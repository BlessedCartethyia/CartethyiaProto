syntax = "proto3";

message Ssc1 {
  repeated Wac2 RoleList = 1;
  repeated Qac Wnc = 2;
  repeated Kac1 ob_ = 3;
  repeated int32 Qnc3 = 4;
  int32 Knc2 = 5;
  repeated INc1 SNc = 6;
  int64 CPs = 7;
  int64 gPs2 = 8;
}

message INc1 {
  int32 e8n = 1;
  bool CMs = 2;
  bool MNc2 = 3;
  int64 yzs = 4;
  bool bxs = 5;
  int32 fM_ = 6;
  int32 JM_1 = 7;
  bool Ezs = 8;
}

message Wac2 {
  int32 Id = 1;
  int32 Level = 2;
  repeated int32 Xnc2 = 3;
}

message Qac {
  int32 ItemId = 1;
  int32 Count = 2;
  int32 IncrId = 3;
  int32 FuncValue = 4;
}

message Kac1 {
  int32 Id = 1;
  bool mLs1 = 4;
  int32 Current = 6;
  int32 j6n = 7;
  bool CM_1 = 9;
}

// MessageId: 23399 (Notify)
message Ioc3 {
  repeated Wac2 RoleList = 6;
}

// MessageId: 17989 (Notify)
message ync2 {
  repeated Wac2 RoleList = 11;
}

// MessageId: 29067 (Notify)
message Toc1 {
  repeated Qac Wnc = 7;
}

// MessageId: 22130 (Notify)
message Snc2 {
  repeated Qac Wnc = 14;
}

// MessageId: 16171 (Notify)
message Mnc1 {
  repeated int32 izl = 8;
}

// MessageId: 19208 (Notify)
message boc3 {
  repeated Kac1 Jnc = 2;
}

// MessageId: 19586 (Notify)
message woc2 {
  repeated int32 Qnc3 = 1;
  repeated INc1 SNc = 3;
}

// MessageId: 28526 (Request)
message Roc2 {
  int32 e8n = 14;
}

// MessageId: 29684 (Response)
message Aoc1 {
  ErrorCode ErrorCode = 15;
}

// MessageId: 23271 (Request)
message Poc1 {
}

// MessageId: 23632 (Response)
message xoc1 {
  ErrorCode ErrorCode = 8;
}

message Xac3 {
  int32 Qxs = 1;
  int32 JM_1 = 2;
  repeated Yac2 TRs = 3;
  bool KRs = 4;
  repeated RewardItemData RewardItems = 5;
}

message Yac2 {
  int32 W5n2 = 1;
  int32 Knc2 = 2;
  repeated zac dUs = 4;
}

message zac {
  int32 eI_ = 1;
  int32 Ebs = 2;
  int32 Znc3 = 3;
  Jac esc = 4;
  repeated Jac tsc = 5;
}

message Jac {
  int32 h5n = 1;
  int32 Value = 2;
  int32 isc = 3;
}

// MessageId: 25472 (Notify)
message Uoc {
  Xac3 j7n = 7;
}

// MessageId: 20591 (Request)
message Boc2 {
  int32 W5n2 = 7;
}

// MessageId: 24902 (Response)
message koc2 {
  ErrorCode ErrorCode = 9;
}

// MessageId: 16881 (Notify)
message Ooc {
  int32 W5n2 = 6;
  int32 Knc2 = 4;
}

// MessageId: 19584 (Notify)
message qoc2 {
  float iPs = 10;
  float rPs = 2;
  float gqs = 13;
  float fqs = 9;
  repeated string mL_ = 1;
  repeated string fL_ = 8;
}

// MessageId: 29301 (Request)
message Goc {
}

// MessageId: 23018 (Response)
message Foc {
  ErrorCode ErrorCode = 9;
}

// MessageId: 19938 (Notify)
message Noc {
  int32 rsc = 14;
  int32 osc = 5;
  int32 ssc2 = 6;
  int32 asc = 3;
  int32 Vy_ = 2;
  int32 ENc1 = 15;
  int32 e8n = 1;
  map<int32, int32> COc2 = 12;
  int32 tBs = 13;
  int32 ec11 = 7;
}

// MessageId: 29706 (Request)
message Voc2 {
  int32 Id = 10;
  repeated int32 BVn = 14;
}

// MessageId: 27783 (Response)
message joc1 {
  ErrorCode ErrorCode = 4;
}

// MessageId: 24851 (Request)
message Hoc2 {
  int32 Id = 14;
  int32 Level = 7;
}

// MessageId: 16772 (Response)
message DOLLARoc {
  ErrorCode ErrorCode = 7;
}

// MessageId: 23190 (Request)
message Woc3 {
  int32 Znc3 = 8;
  repeated int32 Xnc2 = 6;
}

// MessageId: 28426 (Response)
message Qoc1 {
  ErrorCode ErrorCode = 5;
}

// MessageId: 25739 (Request)
message Koc1 {
  repeated int32 hAc1 = 4;
}

// MessageId: 26152 (Response)
message Xoc2 {
  ErrorCode ErrorCode = 12;
  repeated AddCountItemInfo lAc1 = 14;
}

// MessageId: 24580 (Request)
message Yoc {
  int32 Id = 9;
}

// MessageId: 15550 (Response)
message zoc2 {
  ErrorCode ErrorCode = 11;
  repeated ehc2 lsc = 13;
  repeated ehc2 _sc = 12;
}

// MessageId: 17279 (Request)
message Joc2 {
  int32 e8n = 2;
  bool csc = 4;
}

// MessageId: 20806 (Response)
message Zoc1 {
  ErrorCode ErrorCode = 4;
}

// MessageId: 18555 (Request)
message rnc1 {
  int32 Id = 12;
}

// MessageId: 16627 (Response)
message onc1 {
  repeated ehc2 _sc = 2;
}

message ehc2 {
  repeated thc TRs = 1;
  int32 Qxs = 2;
  int32 e8n = 3;
  bool usc = 4;
  bool csc = 5;
  int32 nIs = 6;
  int32 _Ac1 = 7;
}

message thc {
  string Name = 1;
  int32 W5n2 = 2;
  repeated ihc dUs = 4;
}

message ihc {
  int32 eI_ = 1;
  int32 Ebs = 2;
  int32 Znc3 = 3;
  repeated int32 Uy1 = 4;
}

message rhc {
  repeated ehc2 cAc = 1;
  int32 W5n2 = 3;
  string Name = 4;
}

// MessageId: 26962 (Notify)
message enc3 {
  repeated ohc TRs = 11;
}

message ohc {
  int32 W5n2 = 1;
  repeated nhc dUs = 2;
}

message nhc {
  int32 RoleId = 1;
  int32 Znc3 = 2;
  repeated int32 msc1 = 3;
}

message Qsc {
}

// MessageId: 22539 (Request)
message Cec {
  bool yec = 13;
  int32 RoleId = 4;
}

// MessageId: 18176 (Response)
message pec {
  ErrorCode ErrorCode = 9;
}

// MessageId: 26860 (Notify)
message vec {
  int32 Sec = 6;
  int32 uRc2 = 8;
  int32 Mec = 10;
}

message fPc {
  int64 F4n = 1;
  int64 ZM_ = 2;
}

// MessageId: 24294 (Notify)
message dPc {
  repeated fPc mPc = 2;
}

enum MSG_ROUTE_ENUM {
  MSG_ROUTE_ENUM_RouteNone = 0;
  MSG_ROUTE_ENUM_Gateway = 1;
  MSG_ROUTE_ENUM_GameServer = 2;
}

enum EMsgFunction {
  EMsgFunction_FunctionNone = 0;
  EMsgFunction_Dsc = 1;
}

message RewardItemData {
  int32 Id = 1;
  int32 Count = 2;
  int32 IncrId = 3;
}

message ItemReward {
  RewardItemData RewardItemData = 1;
  repeated RewardItemData RewardItems = 2;
}

message AddCountItemInfo {
  int32 Id = 1;
  int32 Count = 2;
  int32 IncrId = 3;
}

// MessageId: 22743 (Request)
message ItemDestructRequest {
  repeated DestructItemInfo ItemList = 7;
}

message DestructItemInfo {
  int32 Count = 2;
  int32 ItemId = 3;
  int32 IncrId = 4;
}

// MessageId: 20298 (Response)
message ItemDestructResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 17357 (Request)
message ItemDestructPreviewRequest {
  repeated DestructItemInfo ItemList = 7;
}

// MessageId: 15369 (Response)
message ItemDestructPreviewResponse {
  ErrorCode ErrorCode = 8;
  map<int32, int32> ItemMap = 12;
}

// MessageId: 18390 (Request)
message ItemLockRequest {
  int32 ItemId = 2;
  int32 IncrId = 11;
}

// MessageId: 23368 (Response)
message ItemLockResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 22564 (Request)
message ItemUseRequest {
  int32 Count = 3;
  int32 ItemId = 10;
}

// MessageId: 20953 (Response)
message ItemUseResponse {
  ErrorCode ErrorCode = 3;
}

message RewardItemInfo {
  int32 ShowPlanId = 1;
  int32 ItemId = 2;
  int32 Count = 3;
  int32 IncrId = 4;
}

// MessageId: 27810 (Notify)
message ItemRewardNotify {
  int32 DropId = 12;
  int32 Reason = 14;
  int32 Magnification = 15;
  map<int32, wR_> RewardItems = 7;
}

message wR_ {
  repeated RewardItemInfo ItemList = 1;
}

// MessageId: 22370 (Request)
message ItemGiftUseRequest {
  int32 Count = 5;
  repeated int32 N9n = 14;
  int32 ItemId = 3;
}

// MessageId: 23905 (Response)
message ItemGiftUseResponse {
  repeated AddCountItemInfo Data = 13;
  ErrorCode ErrorCode = 1;
}

// MessageId: 25301 (Notify)
message ItemGiftUseNotify {
  repeated AddCountItemInfo Data = 10;
  int32 Id = 13;
}

// MessageId: 20451 (Request)
message NormalItemRequest {
}

// MessageId: 25569 (Response)
message NormalItemResponse {
  repeated NormalItem NormalItemList = 10;
}

// MessageId: 19184 (Notify)
message NormalItemUpdateNotify {
  repeated NormalItem NormalItemList = 15;
  bool NoTips = 12;
}

// MessageId: 29860 (Notify)
message NormalItemRemoveNotify {
  repeated int32 NormalItemIdList = 8;
}

// MessageId: 16359 (Notify)
message NormalItemAddNotify {
  repeated NormalItem NormalItemList = 1;
  bool NoTips = 10;
  int32 Reason = 2;
}

// MessageId: 25323 (Request)
message WeaponItemRequest {
}

// MessageId: 28836 (Response)
message WeaponItemResponse {
  repeated WeaponItem WeaponItemList = 10;
}

// MessageId: 29366 (Notify)
message WeaponItemAddNotify {
  repeated WeaponItem WeaponItemList = 10;
  bool AddFromRole = 8;
  int32 Reason = 2;
}

// MessageId: 15616 (Notify)
message WeaponItemRemoveNotify {
  repeated int32 WeaponItemIncrIdList = 4;
}

// MessageId: 22946 (Request)
message PhantomItemRequest {
}

message RolePhantomEquipInfo {
  int32 RoleId = 1;
  repeated int32 PhantomItemIncrId = 2;
}

message RolePhantomPropInfo {
  int32 RoleId = 1;
  repeated ArrayIntInt BaseProp = 2;
  repeated ArrayIntInt AddProp = 3;
}

// MessageId: 23770 (Response)
message PhantomItemResponse {
  repeated PhantomItem PhantomItemList = 15;
  repeated RolePhantomEquipInfo EquipInfoList = 10;
  repeated RolePhantomPropInfo Ows = 3;
  int32 MaxCost = 4;
  repeated int32 PhantomSkinList = 14;
}

// MessageId: 20786 (Notify)
message PhantomItemAddNotify {
  repeated PhantomItem PhantomItemList = 5;
  int32 Reason = 2;
}

// MessageId: 28012 (Notify)
message PhantomItemRemoveNotify {
  repeated int32 PhantomItemIncrIdList = 4;
}

// MessageId: 16337 (Notify)
message ItemFuncValueUpdateNotify {
  int32 IncrId = 11;
  int32 FuncValue = 6;
}

message WeaponItem {
  int32 Id = 1;
  int32 IncrId = 2;
  int32 FuncValue = 3;
  int32 WeaponLevel = 4;
  int32 WeaponExp = 5;
  int32 WeaponBreach = 6;
  int32 WeaponResonLevel = 7;
  int32 RoleId = 8;
}

message PhantomItem {
  int32 Id = 1;
  int32 IncrId = 2;
  int32 FuncValue = 3;
  int32 PhantomLevel = 4;
  int32 PhantomExp = 5;
  repeated PhantomPropInfo PhantomMainProp = 6;
  repeated PhantomPropInfo PhantomSubProp = 7;
  int32 FetterGroupId = 8;
  int32 SkinId = 9;
}

message r5s {
  int32 Index = 1;
  repeated PhantomPropInfo RoleEquipmentPropData = 2;
}

message NormalItem {
  int32 Id = 1;
  int32 Count = 2;
  int64 ExpireTime = 4;
}

message o5s {
  int32 Id = 1;
  int32 Count = 2;
}

message PhantomPropInfo {
  int32 PhantomPropId = 1;
  int32 Value = 2;
}

// MessageId: 26290 (Notify)
message ItemObtainNotify {
  int32 Reason = 4;
  repeated AddCountItemInfo Items = 14;
  repeated ItemReward Rb_2 = 12;
}

// MessageId: 27306 (Notify)
message ItemPkgOpenNotify {
  repeated int32 OpenPkg = 14;
}

// MessageId: 21993 (Request)
message InvalidItemRemoveRequest {
}

message InvalidItemData {
  int32 ItemId = 1;
  int32 Count = 2;
  int32 IncrId = 3;
}

// MessageId: 23764 (Response)
message InvalidItemRemoveResponse {
  bool IsRemove = 1;
}

// MessageId: 16138 (Request)
message InvalidItemCheckRequest {
}

// MessageId: 26432 (Response)
message InvalidItemCheckResponse {
  repeated InvalidItemData InvalidItemData = 5;
}

// MessageId: 25584 (Request)
message ValidTimeItemRequest {
}

message ValidTimeItem {
  int32 Id = 1;
  int32 Count = 2;
  int32 IncrId = 3;
  int64 ExpireTime = 4;
}

// MessageId: 22547 (Response)
message ValidTimeItemResponse {
  repeated ValidTimeItem ItemList = 8;
}

// MessageId: 15238 (Notify)
message ValidTimeItemUpdateNotify {
  repeated ValidTimeItem ItemList = 13;
}

message RemoveValidTimeItem {
  int32 ItemId = 1;
  int32 IncrId = 2;
}

// MessageId: 19861 (Notify)
message ValidTimeItemRemoveNotify {
  repeated RemoveValidTimeItem ItemList = 8;
}

// MessageId: 23439 (Notify)
message ValidTimeItemAddNotify {
  repeated ValidTimeItem ItemList = 3;
  int32 Reason = 9;
}

message RobotRoleInfo {
  int32 RoleId = 1;
  repeated ArrayIntInt BaseProp = 2;
  repeated ArrayIntInt AddProp = 3;
  RolePhantomPropInfo RoleEquipmentPropData = 4;
}

// MessageId: 28612 (Request)
message RobotRolePropRequest {
  repeated int32 RoleIds = 2;
}

// MessageId: 29411 (Response)
message RobotRolePropResponse {
  int32 Error = 9;
  repeated RobotRoleInfo RobotRoleInfo = 12;
}

// MessageId: 15814 (Request)
message ItemDeprecateRequest {
  int32 ItemId = 4;
  int32 IncrId = 9;
}

// MessageId: 22338 (Response)
message ItemDeprecateResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 22401 (Request)
message SendGiftPackPreviewRequest {
  int32 GiftPackId = 15;
}

// MessageId: 29625 (Response)
message SendGiftPackPreviewResponse {
  map<int32, PhantomItem> PhantomItemData = 3;
}

// MessageId: 25394 (Request)
message AccessPathTimeServerConfigRequest {
}

message AccessPathTimeServerConfig {
  int32 Id = 1;
  int64 BeginTime = 2;
  int64 EndTime = 3;
}

// MessageId: 27470 (Response)
message AccessPathTimeServerConfigResponse {
  repeated AccessPathTimeServerConfig Pb_ = 10;
}

enum LogType {
  LogType_LogType_SecGetReportData2Flow = 0;
  LogType_LogType_SecFBRoundStartFlow = 1;
  LogType_LogType_SecFBRoundEndFlow = 2;
  LogType_LogType_SecRoleFightFlow_BigWorldStart = 3;
  LogType_LogType_SecRoleFightFlow_BigWorldEnd = 4;
  LogType_LogType_SecRoleFightFlow_InstStart = 5;
  LogType_LogType_SecRoleFightFlow_InstEnd = 6;
  LogType_LogType_SecWorldInfoFlow_Start = 7;
  LogType_LogType_SecWorldInfoFlow_End = 8;
  LogType_LogType_SecWorldStartFlow = 9;
  LogType_LogType_SecWorldSEndFlow = 10;
}

// MessageId: 27352 (Notify)
message AceAntiLogNotify {
  LogType AntiCheatingLogType = 14;
  int64 LogId = 2;
  int64 TZl2 = 9;
  int64 bZl4 = 7;
  int32 InstId = 4;
  int32 LZl = 1;
}

message AceAntiSkillData {
  int32 SkillId = 1;
  int32 Level = 2;
}

message AceAntiRoleData {
  int32 RoleId = 1;
  int32 Level = 2;
  int32 Exp = 3;
  int32 Breakthrough = 4;
  repeated AceAntiAttrData AceAntiAttrData = 5;
  repeated AceAntiSkillData AceAntiSkillData = 6;
}

// MessageId: 20419 (Request)
message SecFBRoundStartFlowRequest {
  int64 LogId = 7;
  string CurrentTime = 13;
  AceAntiRoleData WTa = 5;
  AceAntiRoleData KTa = 1;
  AceAntiRoleData DOLLARTa = 10;
  AceAntiRoleData XTa = 12;
}

// MessageId: 25847 (Response)
message SecFBRoundStartFlowResponse {
  int64 LogId = 5;
  ErrorCode ErrorCode = 4;
}

// MessageId: 22831 (Request)
message ReportDataRequest {
  bytes AntiData2 = 3;
}

// MessageId: 20382 (Response)
message ReportDataResponse {
  DErrorResult Error = 1;
}

// MessageId: 29862 (Request)
message SecFBRoundEndFlowRequest {
  int64 LogId = 109;
  string ClientTime = 240;
  int64 ElapsedTime = 83;
  int32 iLa1 = 45;
  int32 rLa1 = 100;
  int32 wZl3 = 241;
  int32 RZl2 = 229;
  int32 oLa2 = 200;
  int64 AZl2 = 21;
  int64 xZl1 = 254;
  int32 PZl = 23;
  int32 UZl1 = 166;
  int32 DZl2 = 248;
  int32 BZl3 = 144;
  int32 kZl1 = 42;
  int32 ComboMax = 225;
  int32 qZl2 = 132;
  int32 OZl2 = 123;
  int32 GZl2 = 56;
}

// MessageId: 19854 (Response)
message SecFBRoundEndFlowResponse {
  int64 LogId = 10;
  DErrorResult Error = 13;
}

message in_2 {
  int32 uLa2 = 1;
  AceAntiRoleData cLa2 = 2;
  int64 CLa = 3;
  int64 ALa = 4;
  int32 RLa2 = 5;
  int32 ULa = 6;
  int32 BLa2 = 7;
  int32 bLa = 8;
  int32 xLa = 9;
  int32 PLa = 10;
  int32 wLa = 11;
  int32 qLa = 12;
  int32 kLa = 13;
  int32 NLa = 14;
  int32 FLa = 15;
  int32 OLa1 = 16;
  int32 GLa2 = 17;
  repeated Vector FZl1 = 18;
}

// MessageId: 23472 (Request)
message SecRoleFightFlowRequest {
  int64 LogId = 9;
  string ClientTime = 11;
  repeated in_2 gLa1 = 6;
  int32 AntiCheatingLogType = 2;
}

// MessageId: 15887 (Response)
message SecRoleFightFlowResponse {
  int64 LogId = 6;
  DErrorResult Error = 3;
}

// MessageId: 23430 (Request)
message SecWorldInfoFlowRequest {
  int64 LogId = 173;
  string ClientTime = 65;
  int32 iLa1 = 187;
  int32 rLa1 = 9;
  int32 wZl3 = 196;
  int32 RZl2 = 62;
  int32 oLa2 = 54;
  int32 AZl2 = 45;
  int32 xZl1 = 151;
  int32 PZl = 111;
  int32 UZl1 = 174;
  int32 DZl2 = 229;
  int32 BZl3 = 245;
  int32 kZl1 = 41;
  int32 qZl2 = 110;
  int32 OZl2 = 69;
  int32 GZl2 = 44;
}

// MessageId: 21433 (Response)
message SecWorldInfoFlowResponse {
  int64 LogId = 8;
  DErrorResult Error = 13;
}

// MessageId: 25884 (Request)
message SecWorldStartFlowRequest {
  int64 LogId = 3;
  string CurrentTime = 10;
  AceAntiRoleData WTa = 15;
  AceAntiRoleData KTa = 4;
  AceAntiRoleData DOLLARTa = 2;
  AceAntiRoleData XTa = 5;
}

// MessageId: 28224 (Response)
message SecWorldStartFlowResponse {
  int64 LogId = 1;
  DErrorResult Error = 6;
}

// MessageId: 22014 (Request)
message SecWorldSEndFlowRequest {
  int64 LogId = 148;
  string ClientTime = 119;
  int32 ElapsedTime = 15;
  int32 iLa1 = 143;
  int32 rLa1 = 220;
  int32 wZl3 = 108;
  int32 RZl2 = 45;
  int32 oLa2 = 244;
  int64 AZl2 = 113;
  int64 xZl1 = 5;
  int32 PZl = 44;
  int32 UZl1 = 107;
  int32 DZl2 = 157;
  int32 BZl3 = 245;
  int32 kZl1 = 105;
  int32 qZl2 = 76;
  int32 OZl2 = 74;
  int32 GZl2 = 168;
  int32 ComboMax = 61;
}

// MessageId: 28228 (Response)
message SecWorldSEndFlowResponse {
  int64 LogId = 8;
  DErrorResult Error = 3;
}

enum ErrorCode {
  ErrorCode_Success = 0;
  ErrorCode_RequestParamError = 1;
  ErrorCode_InternalError = 2;
  ErrorCode_UnKnownError = 3;
  ErrorCode_ServerNotReady = 4;
  ErrorCode_ServerFullLoad = 5;
  ErrorCode_InvalidUserId = 6;
  ErrorCode_InvalidToken = 7;
  ErrorCode_InvalidRequest = 8;
  ErrorCode_GmFail = 9;
  ErrorCode_GmParamError = 10;
  ErrorCode_GmException = 11;
  ErrorCode_NotEnableGm = 12;
  ErrorCode_NotElegantName = 13;
  ErrorCode_ContainsDirtyWord = 14;
  ErrorCode_DirtyWordServerError = 15;
  ErrorCode_DirtyWordServerReturnEmpty = 16;
  ErrorCode_DirtyWordCheckException = 17;
  ErrorCode_ComponentNotExist = 18;
  ErrorCode_ServerFullLoadGame = 19;
  ErrorCode_ServerFullLoadGate = 20;
  ErrorCode_PlayerLoggingInFlag = 21;
  ErrorCode_GateLoginException = 22;
  ErrorCode_GateLoginSeverSelectErr = 23;
  ErrorCode_GateTokenAccessErr = 24;
  ErrorCode_GateTokenAccessException = 25;
  ErrorCode_GateLoginUserIdErr = 26;
  ErrorCode_GateLoginNodeIdErr = 27;
  ErrorCode_GateLoginCreateCharacterErr = 28;
  ErrorCode_GateCreateCharacterException = 29;
  ErrorCode_GateEnterGameAddressNotFound = 30;
  ErrorCode_GateEnterGameException = 31;
  ErrorCode_GateEnterGameCreatePlayerErr = 32;
  ErrorCode_GateEnterGameAddPlayerErr = 33;
  ErrorCode_GameGateNodeNotFound = 34;
  ErrorCode_GamePlayerAdminExist = 35;
  ErrorCode_GameReloginGateNodeNotFound = 36;
  ErrorCode_GameReloginPlayerNotFound = 37;
  ErrorCode_ServerNotOpen = 38;
  ErrorCode_ServerMaintenance = 39;
  ErrorCode_InvalidLoginType = 40;
  ErrorCode_InvalidGateway = 41;
  ErrorCode_SDKServerError = 42;
  ErrorCode_TokenNotAuthrized = 43;
  ErrorCode_HadBan = 44;
  ErrorCode_NotInUserIdWhiteList = 45;
  ErrorCode_NoHealthyGamesvr = 46;
  ErrorCode_NoHealthyGateway = 47;
  ErrorCode_GarFailed = 48;
  ErrorCode_GarSdkCheckFail = 49;
  ErrorCode_GarNoneUserInfo = 50;
  ErrorCode_GarQueryUserInfoError = 51;
  ErrorCode_GarNoRegion = 52;
  ErrorCode_InternalExceptionCode = 53;
  ErrorCode_DecodeExceptionCode = 54;
  ErrorCode_EncodeExceptionCode = 55;
  ErrorCode_InvalidRequestExceptionCode = 56;
  ErrorCode_MessageOutOfLimitExceptionCode = 57;
  ErrorCode_MessageNoHandler = 58;
  ErrorCode_EncryptionNoCreate = 59;
  ErrorCode_DecryptFail = 60;
  ErrorCode_PlayerNotInTheScene = 61;
  ErrorCode_NonReentrantExceptionCode = 62;
  ErrorCode_PlayerLoggedOut = 63;
  ErrorCode_MsgFunctionClose = 64;
  ErrorCode_SeqNoError = 65;
  ErrorCode_InvalidMessageType = 66;
  ErrorCode_InvalidMessageHeader = 67;
  ErrorCode_InvalidSeqNo = 68;
  ErrorCode_InvalidMessageId = 69;
  ErrorCode_ProtobufDecodeFailed = 70;
  ErrorCode_ErrProtoSeedCheck = 71;
  ErrorCode_MessageCouldNotBeRouted = 72;
  ErrorCode_ClosedRegister = 100000;
  ErrorCode_RegisterOutOfLimit = 100001;
  ErrorCode_HaveNoCharacter = 100002;
  ErrorCode_InvalidCharacterName = 100003;
  ErrorCode_CreateCharacterFailed = 100004;
  ErrorCode_CreateCharacterDuplicateKey = 100005;
  ErrorCode_PlayerAlreadyLogin = 100006;
  ErrorCode_PlayerLoggingIn = 100007;
  ErrorCode_ErrLoginGWReconnecting = 100008;
  ErrorCode_LoginRetry = 100009;
  ErrorCode_QueryPlayerDataFailed = 100010;
  ErrorCode_CheckPlayerDataFailed = 100011;
  ErrorCode_CheckPlayerDataFailedDebug = 100012;
  ErrorCode_LogoutUnknownError = 100013;
  ErrorCode_AccountLoggedInElsewhere = 100014;
  ErrorCode_AccountIsBlocked = 100015;
  ErrorCode_DataOverflow = 100016;
  ErrorCode_AccountBeKick = 100017;
  ErrorCode_AppVersionNotMatch = 100018;
  ErrorCode_LauncherVersionIsTooLow = 100019;
  ErrorCode_ResourceVersionIsTooLow = 100020;
  ErrorCode_CloseConnection = 100021;
  ErrorCode_ErrAcquirePlayerLockFailed = 100022;
  ErrorCode_ErrPlayerLoggingOut = 100023;
  ErrorCode_MessageChecksumFailed = 100024;
  ErrorCode_LoginTimeout = 100025;
  ErrorCode_ErrWeaponDefault = 200000;
  ErrorCode_ErrWeaponLevelLimit = 200001;
  ErrorCode_ErrWeaponBreachLimit = 200002;
  ErrorCode_ErrWeaponConsumeInvalid = 200003;
  ErrorCode_ErrWeaponPkgFull = 200004;
  ErrorCode_ErrRoleNoConfig = 200005;
  ErrorCode_ErrRoleIsActive = 200006;
  ErrorCode_ErrRoleNotActive = 200007;
  ErrorCode_ErrRoleOverNotEnough = 200008;
  ErrorCode_ErrRoleLevelNotEnough = 200009;
  ErrorCode_ErrRoleException = 200010;
  ErrorCode_ErrRoleNotExchange = 200011;
  ErrorCode_ErrRoleResonNotActive = 200012;
  ErrorCode_ErrRoleResonIsActive = 200013;
  ErrorCode_ErrRoleConfigNotRight = 200014;
  ErrorCode_ErrRoleLevelMax = 200015;
  ErrorCode_ErrRolePerResonNotActive = 200016;
  ErrorCode_ErrRoleConditionNotFind = 200017;
  ErrorCode_ErrRoleConditionNoEnough = 200018;
  ErrorCode_ErrRoleInvalidNameLength = 200019;
  ErrorCode_ErrRoleExpInvalid = 200020;
  ErrorCode_ErrRoleActiveNeedNoEnough = 200021;
  ErrorCode_ErrRoleResonMaxLevel = 200022;
  ErrorCode_ErrRoleProtoError = 200023;
  ErrorCode_ErrRoleItemListEmpty = 200024;
  ErrorCode_ErrRoleItemListCountOutRange = 200025;
  ErrorCode_ErrRoleItemExpError = 200026;
  ErrorCode_ErrRolePhantPosError = 200027;
  ErrorCode_ErrRolePhantSameError = 200028;
  ErrorCode_ErrRolePhantEmptyError = 200029;
  ErrorCode_ErrRoleItemListNoEnough = 200030;
  ErrorCode_ErrRoleGetSkillByIdFailed = 200031;
  ErrorCode_ErrRoleFavorLevelNotEnough = 200032;
  ErrorCode_ErrRolSkillNodeType = 200033;
  ErrorCode_ErrRolSkillNodeTypeActive = 200034;
  ErrorCode_ErrRolSkillNodeTypeUlock = 200035;
  ErrorCode_ErrRolSkillPointsNotEnough = 200036;
  ErrorCode_ErrTrialRoleExist = 200037;
  ErrorCode_ErrTrialRoleNotExist = 200038;
  ErrorCode_ErrTrialRoleRegionDataExist = 200039;
  ErrorCode_ErrTrialRoleBtObjDataExist = 200040;
  ErrorCode_ErrTrialRoleRegionExist = 200041;
  ErrorCode_ErrTrialRoleRegionNotExist = 200042;
  ErrorCode_ErrLoadEquipDefault = 200043;
  ErrorCode_ErrLoadEquipInvalidPos = 200044;
  ErrorCode_ErrLoadEquipInvalidRole = 200045;
  ErrorCode_ErrLoadEquipRoleConfig = 200046;
  ErrorCode_ErrPhantomIdNotExist = 200047;
  ErrorCode_ErrPhantomNotExist = 200048;
  ErrorCode_ErrPhantomLvupMax = 200049;
  ErrorCode_ErrPhantomLvupMismatchItemId = 200050;
  ErrorCode_ErrPhantomLvupNoItem = 200051;
  ErrorCode_ErrPhantomLvupLimit = 200052;
  ErrorCode_ErrPhantomItemType = 200053;
  ErrorCode_ErrPhantomInvalidPos = 200054;
  ErrorCode_ErrPhantomConfigNotFound = 200055;
  ErrorCode_ErrPhantomItemNotExist = 200056;
  ErrorCode_ErrPhantomPropNotExist = 200057;
  ErrorCode_ErrPhantomQaulityNotExist = 200058;
  ErrorCode_ErrPhantomBreachNotExist = 200059;
  ErrorCode_ErrPhantomLevelNotEnough = 200060;
  ErrorCode_ErrPhantomExpItemNotExist = 200061;
  ErrorCode_ErrPhantomSubPropRandomErr = 200062;
  ErrorCode_ErrPhantomSubPropNotEnough = 200063;
  ErrorCode_ErrPhantomSubPropGenDupicate = 200064;
  ErrorCode_ErrPhantomSubStrengthenPropNotExist = 200065;
  ErrorCode_ErrPhantomLevelConfigNotExist = 200066;
  ErrorCode_ErrPhantomLevelUpConsumeItemNotEnough = 200067;
  ErrorCode_ErrPhantomLevelUpMaterialLock = 200068;
  ErrorCode_ErrPhantomLevelUpConsumeItemErr = 200069;
  ErrorCode_ErrPhantomLevelUpRepeatItem = 200070;
  ErrorCode_ErrPhantomMainPropNotExist = 200071;
  ErrorCode_ErrPhantomGrowthNotExist = 200072;
  ErrorCode_ErrPhantomBreachItemCount = 200073;
  ErrorCode_ErrPhantomBreachRepeatItem = 200074;
  ErrorCode_ErrPhantomDecomposeEquiped = 200075;
  ErrorCode_ErrPhantomDecomposeFail = 200076;
  ErrorCode_ErrPhantomBreachBindItem = 200077;
  ErrorCode_ErrPhantomBreachErrItem = 200078;
  ErrorCode_ErrPhantomRecommendNoData = 200079;
  ErrorCode_ErrPhantomCannotTakeOff = 200080;
  ErrorCode_ErrPhantomCannotReplace = 200081;
  ErrorCode_ErrVisionSkillFavoriteTypeLimit = 200082;
  ErrorCode_ErrVisionSkillFavoriteCountLimit = 200083;
  ErrorCode_ErrVisionSkillCfgNotFound = 200084;
  ErrorCode_ErrVisionSkillNotFound = 200085;
  ErrorCode_ErrVisionSkillLevelUpMax = 200086;
  ErrorCode_ErrVisionSkillLevelUpLimit = 200087;
  ErrorCode_ErrVisionSkillSlotNotFound = 200088;
  ErrorCode_ErrVisionSkillEquipTypeLimit = 200089;
  ErrorCode_ErrVisionSkillUnEquipLimit = 200090;
  ErrorCode_ErrVisionSkillGemCfgNotFound = 200091;
  ErrorCode_ErrVisionSkillEquipLimit = 200092;
  ErrorCode_ErrVisionSkillGemLimit = 200093;
  ErrorCode_ErrVisionSkillOperFail = 200094;
  ErrorCode_ErrVisionSkillSlotEquipLimit = 200095;
  ErrorCode_ErrExploreSkillRouletteRepeat = 200096;
  ErrorCode_ErrItemCfgNotFound = 200097;
  ErrorCode_ErrItemNotFound = 200098;
  ErrorCode_ErrItemNotEnough = 200099;
  ErrorCode_ErrItemDecomposeLimit = 200100;
  ErrorCode_ErrItemUseLevelLimit = 200101;
  ErrorCode_ErrItemLockLimit = 200102;
  ErrorCode_ErrItemInvalidParams = 200103;
  ErrorCode_ErrItemDecomposeFail = 200104;
  ErrorCode_ErrItemUseFail = 200105;
  ErrorCode_ErrExchangeRewardCostItemNotEnough = 200106;
  ErrorCode_ExchangeRewardSuccess = 200107;
  ErrorCode_ErrPkgCapacityNotEnough = 200108;
  ErrorCode_ErrGiftOptionalCount = 200109;
  ErrorCode_ErrGiftOptionalNotExists = 200110;
  ErrorCode_ErrGiftNotExists = 200111;
  ErrorCode_ErrItemCount = 200112;
  ErrorCode_ErrItemIdNotContain = 200113;
  ErrorCode_ErrItemTypeNotContain = 200114;
  ErrorCode_ErrCalabashMaxLevel = 200115;
  ErrorCode_ErrCalabashConfig = 200116;
  ErrorCode_ErrCalabashLevelUp = 200117;
  ErrorCode_ErrCalabashExp = 200118;
  ErrorCode_ErrCalabashDevelopNoReward = 200119;
  ErrorCode_ErrCalabashMonsterNotFound = 200120;
  ErrorCode_PropRewardTips = 200121;
  ErrorCode_ErrEnergyMaxCharge = 200122;
  ErrorCode_ErrStateCanotTeleport = 200123;
  ErrorCode_ErrStateCannotEnterInst = 200124;
  ErrorCode_ErrStateCannotOnline = 200125;
  ErrorCode_ErrStateCannotChangeFormation = 200126;
  ErrorCode_ErrReportPlayerCountLimit = 200127;
  ErrorCode_ErrReportPlayerReasonNotFound = 200128;
  ErrorCode_ErrReportMessageLengthLimit = 200129;
  ErrorCode_ErrCookingToolFixed = 200130;
  ErrorCode_ErrCookingFormulaNotFound = 200131;
  ErrorCode_ErrCookingCount = 200132;
  ErrorCode_ErrCookingProcessNotFound = 200133;
  ErrorCode_ErrCookingLevelNotFound = 200134;
  ErrorCode_ErrCookingLevelLimt = 200135;
  ErrorCode_ErrCookingInteractiveNotFound = 200136;
  ErrorCode_ErrCookingFuncNotOpen = 200137;
  ErrorCode_ErrChallengeNotFound = 200138;
  ErrorCode_ErrChallengeNoTeam = 200139;
  ErrorCode_ErrChallengeTeamLimit = 200140;
  ErrorCode_ErrChallengeTeamMemLimit = 200141;
  ErrorCode_ErrChallengeChangeFormation = 200142;
  ErrorCode_ErrChallengeFunNotOpen = 200143;
  ErrorCode_ErrChallengeSeasonUpdate = 200144;
  ErrorCode_ErrChallengeLockRoleLimit = 200145;
  ErrorCode_ErrChallengeRoleLocked = 200146;
  ErrorCode_ErrChallengeNoRoleAlive = 200147;
  ErrorCode_ErrChallengeFormationEmpty = 200148;
  ErrorCode_ErrCycleChallengeNoRoleAlive = 200149;
  ErrorCode_ErrCycleChallengeFormationEmpty = 200150;
  ErrorCode_ErrInfluenceLocked = 200151;
  ErrorCode_ErrInfluenceRewardNotFound = 200152;
  ErrorCode_ErrInfluenceConfigNotFound = 200153;
  ErrorCode_ErrReputationLimit = 200154;
  ErrorCode_ErrInfluenceRewardFailed = 200155;
  ErrorCode_ErrInfluenceFunNotOpen = 200156;
  ErrorCode_ErrForgeFuncNotOpen = 200157;
  ErrorCode_ErrForgeCountLimit = 200158;
  ErrorCode_ErrForgeLocked = 200159;
  ErrorCode_ErrForgeConfigNotFound = 200160;
  ErrorCode_ErrForgeUnlocked = 200161;
  ErrorCode_ErrSynthesisFuncNotOpen = 200162;
  ErrorCode_ErrSynthesisConfigNotFound = 200163;
  ErrorCode_ErrSynthesisCountLimit = 200164;
  ErrorCode_ErrSynthesisLocked = 200165;
  ErrorCode_ErrSynthesisLevelNotFound = 200166;
  ErrorCode_ErrSynthesisLevelLimit = 200167;
  ErrorCode_ErrSynthesisCannotUnlock = 200168;
  ErrorCode_ErrSynthesisUnlocked = 200169;
  ErrorCode_ErrTrialRoleCannotMatch = 200170;
  ErrorCode_ErrPhantomFormationTeleport = 200171;
  ErrorCode_ErrPhantomFormationEnterInst = 200172;
  ErrorCode_ErrPhantomFormationMultiPlay = 200173;
  ErrorCode_ErrPhantomFormationAdvice = 200174;
  ErrorCode_ErrPhantomFormationChangeFormation = 200175;
  ErrorCode_ErrPhantomFormationRepeat = 200176;
  ErrorCode_ErrPhantomFormationChangeFailed = 200177;
  ErrorCode_ErrRoleChangeRoleCreateFailed = 200178;
  ErrorCode_ErrRoleChangeRoleUpdateCreateFailed = 200179;
  ErrorCode_ErrRoleChangeRoleNotUnlock = 200180;
  ErrorCode_ErrRoleChangeMultiPlay = 200181;
  ErrorCode_ErrRoleChangeInst = 200182;
  ErrorCode_ErrRoleChangeElementFunc = 200183;
  ErrorCode_ErrPhantomFormationCannotJoin = 200184;
  ErrorCode_ErrPhantomFormationHost = 200185;
  ErrorCode_ErrRoleChangeShowAllRole = 200186;
  ErrorCode_ErrInteractBoardEntityNotFound = 200187;
  ErrorCode_ErrInteractBoardRange = 200188;
  ErrorCode_ErrInteractBoardSystemNotFound = 200189;
  ErrorCode_ErrInteractBoardEntityConfig = 200190;
  ErrorCode_ErrInteractEntranceNotFound = 200191;
  ErrorCode_ErrInteractEntranceNotMatch = 200192;
  ErrorCode_ErrItemMaxUseCount = 200193;
  ErrorCode_ErrFuncNotExist = 200194;
  ErrorCode_ErrPhantomChangeInBattle = 200195;
  ErrorCode_ErrItemCanNotDestroy = 200196;
  ErrorCode_ErrPhantomEquipSourceCost = 200197;
  ErrorCode_ErrPhantomEquipTargetCost = 200198;
  ErrorCode_ErrPhantomEquipDuplicate = 200199;
  ErrorCode_ErrPhantomAutoEquipFromOther = 200200;
  ErrorCode_ErrPhantomConsumeItemCount = 200201;
  ErrorCode_ErrPhantomConsumeItemDuplicate = 200202;
  ErrorCode_ErrPhantomConsumeItemIncrDuplicate = 200203;
  ErrorCode_ErrPhantomConsumeItem = 200204;
  ErrorCode_ErrPhantomConsumeNoExp = 200205;
  ErrorCode_ErrPhantomBreachPos = 200206;
  ErrorCode_ErrPhantomBreachSuspend = 200207;
  ErrorCode_ErrPhantomBreachQuality = 200208;
  ErrorCode_ErrPhantomBreachExp = 200209;
  ErrorCode_ErrPhantomBreachConsumeItem = 200210;
  ErrorCode_ErrPhantomBreachNoSuspend = 200211;
  ErrorCode_ErrPhantomSpecialSkillRole = 200212;
  ErrorCode_ErrPhantomNotEquip = 200213;
  ErrorCode_ErrPhantomSpecilSkillPos = 200214;
  ErrorCode_ErrPhantomSubPropPlanConfig = 200215;
  ErrorCode_ErrPhantomMainPropGenFail = 200216;
  ErrorCode_ErrLivenessFuncNotOpen = 200217;
  ErrorCode_ErrLivenessTaskNotFound = 200218;
  ErrorCode_ErrLivenessTaskDataNotFound = 200219;
  ErrorCode_ErrLivenessTaskNotFinish = 200220;
  ErrorCode_ErrLivenessTaskRewarded = 200221;
  ErrorCode_ErrLivenessRewardNotFound = 200222;
  ErrorCode_ErrLivenessGoalNotReach = 200223;
  ErrorCode_ErrLivenessRewardParam = 200224;
  ErrorCode_ErrLivenessTaskRewardParam = 200225;
  ErrorCode_ErrWeaponLevelUpComsumeCount = 200226;
  ErrorCode_ErrWeaponConsumeSelf = 200227;
  ErrorCode_ErrWeaponConsumeItemNotFound = 200228;
  ErrorCode_ErrWeaponConsumeItemIdNotFound = 200229;
  ErrorCode_ErrWeaponLocked = 200230;
  ErrorCode_ErrWeaponConsumeDuplicate = 200231;
  ErrorCode_ErrWeaponEquiped = 200232;
  ErrorCode_ErrWeaponLevelUpItemDuplicate = 200233;
  ErrorCode_ErrWeaponLevelUpNoExp = 200234;
  ErrorCode_ErrWeaponLevelUpLevel = 200235;
  ErrorCode_ErrPhantomMainPropNotMatch = 200236;
  ErrorCode_ErrPhantomSubPropNotMatch = 200237;
  ErrorCode_ErrPhantomEquiped = 200238;
  ErrorCode_ErrAdviceNotInit = 200239;
  ErrorCode_ErrTowerChallengeNotOpen = 200240;
  ErrorCode_ErrTowerNotInChallenge = 200241;
  ErrorCode_ErrTowerConfigNotFound = 200242;
  ErrorCode_ErrTowerChallengeNotInOpenTime = 200243;
  ErrorCode_ErrTowerInChallenge = 200244;
  ErrorCode_ErrTowerFormationCount = 200245;
  ErrorCode_ErrTowerFormationRoleDuplicate = 200246;
  ErrorCode_ErrTowerRoleCost = 200247;
  ErrorCode_ErrTowerDifficultyNotClear = 200248;
  ErrorCode_ErrTowerFloorNotClear = 200249;
  ErrorCode_ErrTowerAreaNotClear = 200250;
  ErrorCode_ErrTowerRecommendNotSettle = 200251;
  ErrorCode_ErrTowerRewardNotFound = 200252;
  ErrorCode_ErrTowerNoReward = 200253;
  ErrorCode_ErrTowerRewarded = 200254;
  ErrorCode_ErrTowerRewardTarget = 200255;
  ErrorCode_ErrTowerSeasonUpdate = 200256;
  ErrorCode_ErrLordGymConfigNotFound = 200257;
  ErrorCode_ErrLordGymNotInPlay = 200258;
  ErrorCode_ErrLordGymLock = 200259;
  ErrorCode_ErrLordGymBtTreeNotFound = 200260;
  ErrorCode_ErrRoleSexFuncNotOpen = 200261;
  ErrorCode_ErrPhantomSubPropLocked = 200262;
  ErrorCode_ErrPhantomIdentifyNoCost = 200263;
  ErrorCode_ErrGiftPackType = 200264;
  ErrorCode_ErrGiftPackUseLimit = 200265;
  ErrorCode_ErrCdKeyNotEnable = 200266;
  ErrorCode_ErrCdKeyRequestCount = 200267;
  ErrorCode_ErrCdKeyRequestErr = 200268;
  ErrorCode_ErrCdKeyRequestDataErr = 200269;
  ErrorCode_ErrCdKeyException = 200270;
  ErrorCode_ErrCdKeyProcessCount = 200271;
  ErrorCode_ErrCdKeyNotFound = 200272;
  ErrorCode_ErrCdKeyBatchNotFound = 200273;
  ErrorCode_ErrCdKeyNotInValidTime = 200274;
  ErrorCode_ErrCdKeyBatchMaxCount = 200275;
  ErrorCode_ErrCdKeyEachPlayerMaxCount = 200276;
  ErrorCode_ErrCdKeyGroupCount = 200277;
  ErrorCode_ErrCdKeyCondition = 200278;
  ErrorCode_ErrCdKeyAddCountFail = 200279;
  ErrorCode_ErrCdKeyLength = 200280;
  ErrorCode_ErrCdKeyCharacter = 200281;
  ErrorCode_ErrGiftPackRandomErr = 200282;
  ErrorCode_ErrReconnectUserWhiteList = 200283;
  ErrorCode_ErrReconnectChannelWhiteList = 200284;
  ErrorCode_ErrReconnectIpInvalid = 200285;
  ErrorCode_ErrReconnectIpWhiteList = 200286;
  ErrorCode_ErrCdKeyExpire = 200287;
  ErrorCode_ErrWeaponResonLevelLimit = 200288;
  ErrorCode_ErrWeaponConfigNotFound = 200289;
  ErrorCode_ErrWeaponResonConfigNotFound = 200290;
  ErrorCode_ErrWeaponResonConsumeItem = 200291;
  ErrorCode_ErrWeaponResonConsumeGold = 200292;
  ErrorCode_ErrDestroyItemDuplicate = 200293;
  ErrorCode_ErrDestroyWeapon = 200294;
  ErrorCode_ErrCannotDestroyItem = 200295;
  ErrorCode_ErrCannotDestroyPhantom = 200296;
  ErrorCode_ErrCannotDestroyWeaponForm = 200297;
  ErrorCode_ErrCannotDestroyItemUnknown = 200298;
  ErrorCode_ErrWeaponConsumeQuality = 200299;
  ErrorCode_ErrPhantomSkinChangeCd = 200300;
  ErrorCode_ErrPhantomSkinUnlock = 200301;
  ErrorCode_ErrPhantomSkinMatch = 200302;
  ErrorCode_ErrLoginGameTainted = 200303;
  ErrorCode_ErrCookLimitCount = 200304;
  ErrorCode_ErrCookLimitTime = 200305;
  ErrorCode_ErrForgeLimitCount = 200306;
  ErrorCode_ErrForgeLimitTime = 200307;
  ErrorCode_ErrSynthesisLimitCount = 200308;
  ErrorCode_ErrSynthesisLimitTime = 200309;
  ErrorCode_ErrLoginIpBan = 200310;
  ErrorCode_ErrLoginDeviceBan = 200311;
  ErrorCode_ErrRoleNameEmpty = 200312;
  ErrorCode_ErrAdviceLength = 200313;
  ErrorCode_ErrPhantomRefiningCount = 200314;
  ErrorCode_ErrPhantomRefiningScore = 200315;
  ErrorCode_ErrPhantomRefiningTotalScore = 200316;
  ErrorCode_ErrPhantomRefiningDeveloped = 200317;
  ErrorCode_ErrPhotoMemoryCollectConfig = 200318;
  ErrorCode_ErrPhotoMemoryFuncNotOpen = 200319;
  ErrorCode_ErrPhotoMemoryCollectLock = 200320;
  ErrorCode_ErrPhotoMemoryCollectRewarded = 200321;
  ErrorCode_ErrRoleCount = 200322;
  ErrorCode_ErrCookFormulaUnlocked = 200323;
  ErrorCode_ErrForgeFormulaUnlocked = 200324;
  ErrorCode_ErrSynthesisFormulaUnlocked = 200325;
  ErrorCode_ErrCookFormulaBuyCount = 200326;
  ErrorCode_ErrForgeFormulaBuyCount = 200327;
  ErrorCode_ErrSynthesisFormulaBuyCount = 200328;
  ErrorCode_ErrCdKeyDailyVerifyCount = 200329;
  ErrorCode_ErrLongShanTaskNotFound = 200330;
  ErrorCode_ErrLongShanActivityClosed = 200331;
  ErrorCode_ErrLongShanTaskNotAccept = 200332;
  ErrorCode_ErrLongShanTaskNotComplete = 200333;
  ErrorCode_ErrLongShanTaskRewarded = 200334;
  ErrorCode_ErrTowerDefenceRewardParamErr = 200335;
  ErrorCode_ErrTowerDefenceInstanceNotFound = 200336;
  ErrorCode_ErrTowerDefenceActivityNotOpen = 200337;
  ErrorCode_ErrTowerDefenceActivityDataNotFound = 200338;
  ErrorCode_ErrTowerDefenceInstDataNotFound = 200339;
  ErrorCode_ErrTowerDefenceInstRewarded = 200340;
  ErrorCode_ErrTowerDefenceInstScoreNotEnough = 200341;
  ErrorCode_ErrTowerDefenceScoreRewarded = 200342;
  ErrorCode_ErrTowerDefenceScoreRewardNotEnough = 200343;
  ErrorCode_ErrTowerDefenceScoreRewardNotFound = 200344;
  ErrorCode_ErrTowerDefenceInstBuffNotEnable = 200345;
  ErrorCode_ErrTowerDefencePhantomDuplicate = 200346;
  ErrorCode_ErrTowerDefencePhantomNotSelect = 200347;
  ErrorCode_ErrorTowerDefenceInstNotOpen = 200348;
  ErrorCode_ErrorTowerDefenceInstCondition = 200349;
  ErrorCode_ErrNameModifyCd = 200350;
  ErrorCode_ErrNameVerifying = 200351;
  ErrorCode_ErrTimePointRewardActivityConfigNotFound = 200352;
  ErrorCode_ErrTimePointRewardActivityNotOpen = 200353;
  ErrorCode_ErrTimePointRewardActivityRewarded = 200354;
  ErrorCode_ErrTimePointRewardActivityTime = 200355;
  ErrorCode_ErrCDKeyVerifying = 200356;
  ErrorCode_ErrorTowerDefenceInstLocked = 200357;
  ErrorCode_ErrTrackMoonEntrustLocked = 200358;
  ErrorCode_ErrTrackMoonRoleLocked = 200359;
  ErrorCode_ErrTrackMoonBuildLocked = 200360;
  ErrorCode_ErrTrackMoonBuildEntity = 200361;
  ErrorCode_ErrCopyUserRequestErr = 200362;
  ErrorCode_ErrCopyUserInserting = 200363;
  ErrorCode_ErrCopyUserErr = 200364;
  ErrorCode_ErrCopyUserDataErr = 200365;
  ErrorCode_ErrCopyUserInsertErr = 200366;
  ErrorCode_ErrCopyUserInsertFailed = 200367;
  ErrorCode_ErrRiskHarvestBuffGroupNotFound = 200368;
  ErrorCode_ErrRiskHarvestActivityClosePlay = 200369;
  ErrorCode_ErrRiskHarvestModeChangeClosePlay = 200370;
  ErrorCode_ErrRiskHarvestLeaveClosePlay = 200371;
  ErrorCode_ErrRiskHarvestInstNotFound = 200372;
  ErrorCode_ErrRiskHarvestActivityNotOpen = 200373;
  ErrorCode_ErrRiskHarvestInstDataNotFound = 200374;
  ErrorCode_ErrRiskHarvestInstRewarded = 200375;
  ErrorCode_ErrRiskHarvestInstNotPass = 200376;
  ErrorCode_ErrRiskHarvestScoreRewardNotFound = 200377;
  ErrorCode_ErrRiskHarvestScoreRewarded = 200378;
  ErrorCode_ErrRiskHarvestScoreNotEnough = 200379;
  ErrorCode_ErrRiskHarvestRoleTrial = 200380;
  ErrorCode_ErrRiskHarvestMatching = 200381;
  ErrorCode_ErrRiskHarvestNotDefaultWorld = 200382;
  ErrorCode_ErrRiskHarvestMultiMode = 200383;
  ErrorCode_ErrRiskHarvestInstLocked = 200384;
  ErrorCode_ErrRiskHarvestInstTeleportEntityNotFound = 200385;
  ErrorCode_ErrRiskHarvestInstOpen = 200386;
  ErrorCode_ErrRiskHarvestPlayOpenFailed = 200387;
  ErrorCode_ErrRiskHarvestPlayDataNotFound = 200388;
  ErrorCode_ErrRiskHarvestBuffNoReward = 200389;
  ErrorCode_ErrRiskHarvestBuffRewarded = 200390;
  ErrorCode_ErrRiskHarvestBuffLocked = 200391;
  ErrorCode_ErrRiskHarvestBuffCountRewardNotFound = 200392;
  ErrorCode_ErrRiskHarvestBuffCountRewarded = 200393;
  ErrorCode_ErrRiskHarvestBuffCountNotEnough = 200394;
  ErrorCode_ErrRiskHarvestInstScoreNotEnough = 200395;
  ErrorCode_ErrItemDisuseLimit = 200396;
  ErrorCode_ErrItemDisuseFunc = 200397;
  ErrorCode_ErrPhantomRefiningMaxCount = 200398;
  ErrorCode_ErrPhantomRefiningDulplicate = 200399;
  ErrorCode_ErrPhantomNotNormal = 200400;
  ErrorCode_ErrGetSelfPsnOnlineId = 200401;
  ErrorCode_ErrGetPsnUserPlayerErr = 200402;
  ErrorCode_ErrTowerDefenceHostLeave = 200403;
  ErrorCode_ErrRiskHarvestNotInInst = 200404;
  ErrorCode_ErrEnterInstTypeErr = 200405;
  ErrorCode_ErrInputSettingCount = 200406;
  ErrorCode_ErrInputSettingDeviceType = 200407;
  ErrorCode_ErrInputSettingActionCount = 200408;
  ErrorCode_ErrInputSettingAxisCount = 200409;
  ErrorCode_ErrInputCombinationActionCount = 200410;
  ErrorCode_ErrInputCombinationAxisCount = 200411;
  ErrorCode_ErrInputSettingActionName = 200412;
  ErrorCode_ErrInputSettingAxisName = 200413;
  ErrorCode_ErrInputCombinationActionName = 200414;
  ErrorCode_ErrInputCombinationAxisName = 200415;
  ErrorCode_ErrInputActionKeyNameLength = 200416;
  ErrorCode_ErrInputActionKeyLength = 200417;
  ErrorCode_ErrInputAxisKeyNameLength = 200418;
  ErrorCode_ErrInputAxisKeyLength = 200419;
  ErrorCode_ErrInputCombinationActionKeyNameLength = 200420;
  ErrorCode_ErrInputCombinationActionKeyLength = 200421;
  ErrorCode_ErrInputCombinationActionKeyListLength = 200422;
  ErrorCode_ErrInputCombinationAxisKeyNameLength = 200423;
  ErrorCode_ErrInputCombinationAxisKeyLength = 200424;
  ErrorCode_ErrInputCombinationAxisKeyListLength = 200425;
  ErrorCode_ErrInputDeviceSubTypeLength = 200426;
  ErrorCode_ErrPSNAccountBlocked = 200427;
  ErrorCode_ErrRoleNameInvalid = 200428;
  ErrorCode_ErrMailBindRewardNotBind = 200429;
  ErrorCode_ErrMailBindRewarded = 200430;
  ErrorCode_ErrInputSettingNull = 200431;
  ErrorCode_ErrMultiInstExchangeCountErr = 200432;
  ErrorCode_ErrMultiInstExchangeFirstPass = 200433;
  ErrorCode_ErrMultiInstExchangeActivity = 200434;
  ErrorCode_ErrMultiInstExchangeFuncNotOpen = 200435;
  ErrorCode_ErrMultiInstExchangeTypeErr = 200436;
  ErrorCode_ErrMultiInstExchangeLevelTypeErr = 200437;
  ErrorCode_ErrRoleSkinLocked = 200438;
  ErrorCode_ErrRoleSkinConfig = 200439;
  ErrorCode_ErrRoleSkinNotMatch = 200440;
  ErrorCode_ErrRoleSkinWeaponNotSuit = 200441;
  ErrorCode_ErrSdkLoginResetByPeer = 200442;
  ErrorCode_ErrSdkLoginHttpRequestException = 200443;
  ErrorCode_ErrSdkLoginTaskTimeout = 200444;
  ErrorCode_ErrSdkLoginTaskCanceled = 200445;
  ErrorCode_ErrSexChangeCd = 200446;
  ErrorCode_ErrSexChangeLogout = 200447;
  ErrorCode_ErrSexChangeTrialActive = 200448;
  ErrorCode_ErrLobbyListRequestLimit = 200449;
  ErrorCode_ErrLobbyQueryPlayerRequestLimit = 200450;
  ErrorCode_ErrPlayerBasicInfoRequestLimit = 200451;
  ErrorCode_ErrBlockPlayerRequestLimit = 200452;
  ErrorCode_ErrPsnPlayerInfoRequestLimit = 200453;
  ErrorCode_ErrFishingPosInvalidX = 200454;
  ErrorCode_ErrFishingPosInvalidY = 200455;
  ErrorCode_ErrFishingPosOverlap = 200456;
  ErrorCode_ErrFishingParamLengthCabinLeft = 200457;
  ErrorCode_ErrFishingParamLengthCabinRight = 200458;
  ErrorCode_ErrFishingCabinNotOpen = 200459;
  ErrorCode_ErrFishingCabinNotFound = 200460;
  ErrorCode_ErrFishingCountNotMatch = 200461;
  ErrorCode_ErrFishingDuplicate = 200462;
  ErrorCode_ErrFishingRemoveItemErr = 200463;
  ErrorCode_ErrFishingItemNotFound = 200464;
  ErrorCode_ErrFishingCountNotMatchRequest = 200465;
  ErrorCode_ErrFishingCountNotMatchCabin = 200466;
  ErrorCode_ErrFishingHandInNotMatch = 200467;
  ErrorCode_ErrFishingQuickSellNoItem = 200468;
  ErrorCode_ErrFishingNoQuickSell = 200469;
  ErrorCode_ErrFishingQuickSellConfig = 200470;
  ErrorCode_ErrFishingQuickSellNotFilled = 200471;
  ErrorCode_ErrFishingQuickSellItemErr = 200472;
  ErrorCode_ErrFishingNoSellItem = 200473;
  ErrorCode_ErrFishingCanNotSell = 200474;
  ErrorCode_ErrFishingItemConfigNotFound = 200475;
  ErrorCode_ErrFishingSellItemDuplicate = 200476;
  ErrorCode_ErrFishingPriceCalFailed = 200477;
  ErrorCode_ErrFishingSellCount = 200478;
  ErrorCode_ErrFishingPointNotOpen = 200479;
  ErrorCode_ErrFishingPointConfig = 200480;
  ErrorCode_ErrFishingPointCount = 200481;
  ErrorCode_ErrFishingTempCabinMax = 200482;
  ErrorCode_ErrFishingPointGenFail = 200483;
  ErrorCode_ErrFishingTechLevel = 200484;
  ErrorCode_ErrFishingPreNodeLock = 200485;
  ErrorCode_ErrFishingTechLock = 200486;
  ErrorCode_ErrFishingTechConfig = 200487;
  ErrorCode_ErrFishingLevelMax = 200488;
  ErrorCode_ErrFishingSkinConfig = 200489;
  ErrorCode_ErrFishingPortConfig = 200490;
  ErrorCode_ErrFishingEntrustConfig = 200491;
  ErrorCode_ErrFishingEntrustNotAccepted = 200492;
  ErrorCode_ErrFishingEntrustNotFound = 200493;
  ErrorCode_ErrFishingEntrustDestination = 200494;
  ErrorCode_ErrFishingEntrustItemNotEnough = 200495;
  ErrorCode_ErrFishingEntrustItemTotalNotMatch = 200496;
  ErrorCode_ErrFishingEntrustDumplicate = 200497;
  ErrorCode_ErrFishingEntrustEmptyItem = 200498;
  ErrorCode_ErrFishingEntrustItemNotMatch = 200499;
  ErrorCode_ErrFishingEntrustRefreshInitial = 200500;
  ErrorCode_ErrFishingEntrustRefreshPrice = 200501;
  ErrorCode_ErrFishingEntrustNotAcceptable = 200502;
  ErrorCode_ErrFishingNotInBigWorld = 200503;
  ErrorCode_ErrFishingMultiMode = 200504;
  ErrorCode_ErrFishingNotOwner = 200505;
  ErrorCode_ErrFishingSkinLock = 200506;
  ErrorCode_ErrFishingPortLock = 200507;
  ErrorCode_ErrFishingCageLock = 200508;
  ErrorCode_ErrFishingCageConfig = 200509;
  ErrorCode_ErrFishingHandInConfig = 200510;
  ErrorCode_ErrFishingHandInCountNotMatch = 200511;
  ErrorCode_ErrFishingTempPointData = 200512;
  ErrorCode_ErrFishingTempPointConfig = 200513;
  ErrorCode_ErrFishingBombItem = 200514;
  ErrorCode_ErrFishingBombNoPoint = 200515;
  ErrorCode_ErrFishingBaitArea = 200516;
  ErrorCode_ErrFishingNotSailing = 200517;
  ErrorCode_ErrFishingInPort = 200518;
  ErrorCode_ErrFishingInShip = 200519;
  ErrorCode_ErrFishingIllustratedRewardNotFound = 200520;
  ErrorCode_ErrFishingIllustratedRewarded = 200521;
  ErrorCode_ErrFishingIllustratedCondition = 200522;
  ErrorCode_ErrFishingTechOutputNotFound = 200523;
  ErrorCode_ErrFishingShipNotFound = 200524;
  ErrorCode_ErrFishingPortTech = 200525;
  ErrorCode_ErrFishingRemoveFuncNotOpen = 200526;
  ErrorCode_ErrFishingIllustratedFuncNotOpen = 200527;
  ErrorCode_ErrFishingSellFuncNotOpen = 200528;
  ErrorCode_ErrFishingTechFuncNotOpen = 200529;
  ErrorCode_ErrFishingEntrustHandInQuickSell = 200530;
  ErrorCode_ErrActivityPreOpenLock = 200531;
  ErrorCode_ErrActivityShowLock = 200532;
  ErrorCode_ErrShopGoodsVisibleCondition = 200533;
  ErrorCode_ErrShopGoodsDisableCondition = 200534;
  ErrorCode_ErrFishingEntrustRefreshFail = 200535;
  ErrorCode_ErrPlayerDataVersion = 200536;
  ErrorCode_ErrBrokenCircuitRejected = 200537;
  ErrorCode_ErrRateLimiterRejected = 200538;
  ErrorCode_ErrTimeoutRejected = 200539;
  ErrorCode_ErrLoginEnvironment = 200540;
  ErrorCode_ErrLoginUserEmpty = 200541;
  ErrorCode_ErrOldGameNodeLogoutFail = 200542;
  ErrorCode_ErrOldGameNodeLogoutOffline = 200543;
  ErrorCode_ErrReloginBranchNameNotMatch = 200544;
  ErrorCode_ErrReLoginFightDataInConsistent = 200545;
  ErrorCode_ErrCreatePlayerData = 200546;
  ErrorCode_ErrReLoginPlayerLoggingOut = 200547;
  ErrorCode_ErrAccountLoggedInElsewhere = 200548;
  ErrorCode_ErrTowerChallengeTeleportLocked = 200551;
  ErrorCode_ErrTowerDefenceGroupConfig = 200552;
  ErrorCode_ErrTowerDefencePreInstNotPass = 200553;
  ErrorCode_ErrTowerDefenceRankCd = 200554;
  ErrorCode_ErrFishingFixItemNotEnough = 200549;
  ErrorCode_ErrFishingEntrustUpdateItemNotEnough = 200550;
  ErrorCode_ErrTowerDefenceGroupActivityC = 200555;
  ErrorCode_ErrTowerDefenceGroupActivity = 200556;
  ErrorCode_ErrAbyssComNotFound = 200557;
  ErrorCode_ErrAbyssInstConfig = 200558;
  ErrorCode_ErrAbyssRoomConfig = 200559;
  ErrorCode_ErrAbyssEnterCtx = 200560;
  ErrorCode_ErrAbyssActivityNotOpen = 200561;
  ErrorCode_ErrAbyssRewardConfig = 200562;
  ErrorCode_ErrAbyssRewardNotOpen = 200563;
  ErrorCode_ErrAbyssRewardClosed = 200564;
  ErrorCode_ErrAbyssRewarded = 200565;
  ErrorCode_ErrAbyssRewardCondition = 200566;
  ErrorCode_ErrAbyssLastActionNotFinish = 200567;
  ErrorCode_ErrAbyssNextRoomNotFound = 200568;
  ErrorCode_ErrAbyssRoleNotEquip = 200569;
  ErrorCode_ErrAbyssEquipRoleNotExist = 200570;
  ErrorCode_ErrAbyssEquipRoleDuplicate = 200571;
  ErrorCode_ErrAbyssRoomNoBox = 200572;
  ErrorCode_ErrAbyssRewardPlayerCount = 200573;
  ErrorCode_ErrAbyssRewardBoxEntityIncId = 200574;
  ErrorCode_ErrAbyssBoxRewarded = 200575;
  ErrorCode_ErrAbyssBoxNotBelong = 200576;
  ErrorCode_ErrAbyssBoxConfigNotFound = 200577;
  ErrorCode_ErrAbyssBoxDropFailed = 200578;
  ErrorCode_ErrAbyssChallengeLocked = 200579;
  ErrorCode_ErrAbyssChallengeNoConsume = 200580;
  ErrorCode_ErrAbyssChallengeUnlockItem = 200581;
  ErrorCode_ErrAbyssLikePlayerNotInScene = 200582;
  ErrorCode_ErrAbyssLikeDuplicate = 200583;
  ErrorCode_ErrAbyssRoleItemNotFound = 200584;
  ErrorCode_ErrAbyssRoleConfig = 200585;
  ErrorCode_ErrAbyssRoleLevelConfig = 200586;
  ErrorCode_ErrAbyssRoleMaxPluginCount = 200587;
  ErrorCode_ErrAbyssRoleLevelMaxPlugin = 200588;
  ErrorCode_ErrAbyssPutOnDuplicate = 200589;
  ErrorCode_ErrAbyssEquipOldRoleFailed = 200590;
  ErrorCode_ErrAbyssSysthesisMaxCount = 200591;
  ErrorCode_ErrAbyssSysthesisItemDuplicate = 200592;
  ErrorCode_ErrAbyssPluginItemNotFound = 200593;
  ErrorCode_ErrAbyssPluginItemLocked = 200594;
  ErrorCode_ErrAbyssPluginConfigNotFound = 200595;
  ErrorCode_ErrAbyssPluginEquipped = 200596;
  ErrorCode_ErrAbyssQuialityConfig = 200597;
  ErrorCode_ErrAbyssSysthesisConsumeItemDuplicate = 200598;
  ErrorCode_ErrAbyssRankListCd = 200599;
  ErrorCode_ErrAbyssRoleUpLevel = 200600;
  ErrorCode_ErrAbyssRoleUpItem = 200601;
  ErrorCode_ErrAbyssRoleUpNoComsume = 200602;
  ErrorCode_ErrAbyssPreChallengeNotPass = 200603;
  ErrorCode_ErrAbyssSlotConfig = 200604;
  ErrorCode_ErrAbyssSlotNotMatch = 200605;
  ErrorCode_ErrAbyssInstUnlockTime = 200606;
  ErrorCode_ErrAbyssSettled = 200607;
  ErrorCode_ErrAbyssRewardIdRepeated = 200610;
  ErrorCode_ErrAbyssRewardCount = 200611;
  ErrorCode_ErrOtherPlayerCondition = 200612;
  ErrorCode_ErrMapDefault = 300000;
  ErrorCode_ErrMapMarkNumLimit = 300001;
  ErrorCode_ErrMapNoFogConfig = 300002;
  ErrorCode_ErrMapFogAlreadyUnlock = 300003;
  ErrorCode_ErrFormationEmpty = 300004;
  ErrorCode_ErrFormationUnknown = 300005;
  ErrorCode_ErrFormationDead = 300006;
  ErrorCode_ErrFormationRoleRepeat = 300007;
  ErrorCode_ErrFormationRoleNotActive = 300008;
  ErrorCode_ErrFormationRoleIndexOut = 300009;
  ErrorCode_ErrFormationRoleCountOut = 300010;
  ErrorCode_ErrFightFormationRoleNotExist = 300011;
  ErrorCode_ErrFightFormationRoleIdNotMatch = 300012;
  ErrorCode_ErrFightFormationRoleCountNotMatch = 300013;
  ErrorCode_ErrFightFormationRoleCareerNotMatch = 300014;
  ErrorCode_ErrFightFormationRoleElementNotMatch = 300015;
  ErrorCode_ErrFightFormationCannotTrial = 300016;
  ErrorCode_ErrFightFormationTrialRoleNotMatch = 300017;
  ErrorCode_ErrFormationOverSize = 300018;
  ErrorCode_ErrSwitchRoleIsDead = 300019;
  ErrorCode_ErrUpdateFormationCurRoleIsDead = 300020;
  ErrorCode_ErrUpdateFormationRoleIdsIsNull = 300021;
  ErrorCode_ErrFormationIdOutOfRange = 300022;
  ErrorCode_ErrCanNotCancelCurFormation = 300023;
  ErrorCode_ErrCurRoleNotInFormationRoleIds = 300024;
  ErrorCode_ErrUpateFormationNotInSingleWorld = 300025;
  ErrorCode_ErrSwitchRoleTypeSignleWorld = 300026;
  ErrorCode_ErrSwitchRoleTypeMultiWorld = 300027;
  ErrorCode_ErrSwitchRoleTypeFbInstance = 300028;
  ErrorCode_ErrSwitchRoleTypeUndefine = 300029;
  ErrorCode_ErrSingWorldCanNotUpdateFightRoles = 300030;
  ErrorCode_ErrUpdateFightRolesIsNull = 300031;
  ErrorCode_ErrUpdateFightRolesCurIdNotExist = 300032;
  ErrorCode_ErrInStroyCharacterCanNotSwitchRole = 300033;
  ErrorCode_ErrSwitchRoleNotInFightRoles = 300034;
  ErrorCode_ErrCanNotSwitchRepeat = 300035;
  ErrorCode_ErrSwitchRoleEntityIdNotExist = 300036;
  ErrorCode_ErrSwitchRoleEntityNotExist = 300037;
  ErrorCode_ErrSitchRoleEntityIsDead = 300038;
  ErrorCode_ErrorTeamOperaFail = 300039;
  ErrorCode_ErrorPlayerAlreadyHaveTeam = 300040;
  ErrorCode_ErrorTeamInviteContentInvalid = 300041;
  ErrorCode_ErrorPlayerInBanTime = 300042;
  ErrorCode_ErrorPlayerInInviteCd = 300043;
  ErrorCode_ErrorPlayerAlreadyInTeam = 300044;
  ErrorCode_ErrorKickOutPermissionNotEnough = 300045;
  ErrorCode_ErrorTeamIsFull = 300046;
  ErrorCode_ErrorTeamServiceNotReady = 300047;
  ErrorCode_ErrorTeamPlayerJoinRepeat = 300048;
  ErrorCode_ErrorPlayerNotInTeam = 300049;
  ErrorCode_ErrorInvitePlayerNotExist = 300050;
  ErrorCode_ErrorKickPlayerNotInTeam = 300051;
  ErrorCode_ErrorDismissPermissionNotEnough = 300052;
  ErrorCode_ErrorTeamRoleIdNotActive = 300053;
  ErrorCode_ErrorTeamRoleIdRepeat = 300054;
  ErrorCode_ErrorJoinOtherWorldOtherNotExist = 300055;
  ErrorCode_ErrorJoinOtherWorldOtherNotInScene = 300056;
  ErrorCode_ErrorJoinOtherWorldSceneNotExist = 300057;
  ErrorCode_ErrorTeamNotExist = 300058;
  ErrorCode_ErrRewardCfgNotFound = 300059;
  ErrorCode_ErrTeleportIdNotExist = 300060;
  ErrorCode_ErrTeleportIdNotActivate = 300061;
  ErrorCode_ErrTeleportCreatureIdNotExist = 300062;
  ErrorCode_ErrTeleportIdAlreadyActivate = 300063;
  ErrorCode_ErrTeleportGmGetPlayerFailed = 300064;
  ErrorCode_ErrTeleportGmGetCreatureGenCfgFailed = 300065;
  ErrorCode_ErrTgmNotExitst = 300066;
  ErrorCode_ErrTgmNotPlayer = 300067;
  ErrorCode_ErrTgmNotGenCfg = 300068;
  ErrorCode_ErrTgmInsId = 300069;
  ErrorCode_ErrTeleportEntityNotExist = 300070;
  ErrorCode_ErrTeleportComponentNotExist = 300071;
  ErrorCode_ErrTeleportComponentNotMatch = 300072;
  ErrorCode_ErrAreaEnterRepeated = 300073;
  ErrorCode_ErrAreaIdNotExist = 300074;
  ErrorCode_ErrAreaIdNoNeedRecord = 300075;
  ErrorCode_ErrPlayerIsNotDead = 300076;
  ErrorCode_ErrPlayerCanNotRevive = 300077;
  ErrorCode_ErrPlayerReviveCountReachMax = 300078;
  ErrorCode_ErrPlayerReviveDelayNotReach = 300079;
  ErrorCode_ErrAutoReviveNotRequest = 300080;
  ErrorCode_ErrReviveRegionExisted = 300081;
  ErrorCode_ErrReviveRegionNotExisted = 300082;
  ErrorCode_ErrReviveRegionConfigNotExist = 300083;
  ErrorCode_ErrCanNotUseItemRevive = 300084;
  ErrorCode_ErrIsMatching = 300085;
  ErrorCode_ErrNotInMatcing = 300086;
  ErrorCode_ErrMatchPoolNotExist = 300087;
  ErrorCode_ErrNotFindMatchResult = 300088;
  ErrorCode_ErrConfirmResultRepeat = 300089;
  ErrorCode_ErrAlreadyHaveFbTeam = 300090;
  ErrorCode_ErrFbTeamNotExist = 300091;
  ErrorCode_ErrPlayerNotInFbTeam = 300092;
  ErrorCode_ErrHostCanNotReady = 300093;
  ErrorCode_ErrChangeReadyRepeat = 300094;
  ErrorCode_ErrFbTeamHaveSameRole = 300095;
  ErrorCode_ErrReadyStateCanNotChangeRole = 300096;
  ErrorCode_ErrChangeSameRole = 300097;
  ErrorCode_ErrNotHaveKickPermission = 300098;
  ErrorCode_ErrBeKickNotInFbTeam = 300099;
  ErrorCode_ErrNotHaveFightPermission = 300100;
  ErrorCode_ErrFbTeamNotAllReady = 300101;
  ErrorCode_ErrFbInstIdNotExist = 300102;
  ErrorCode_ErrFbMatchRoleNotMatch = 300103;
  ErrorCode_ErrSingleInstCanNotMatch = 300104;
  ErrorCode_ErrWaitOtherEnterSceneForbidMatch = 300105;
  ErrorCode_ErrIsEnteringOtherSceneForbidMatch = 300106;
  ErrorCode_InstPlayBtObjNotFound = 300107;
  ErrorCode_InstPlayNotSuccess = 300108;
  ErrorCode_InstPlayAlreadyGetReward = 300109;
  ErrorCode_InstPlayExchangeRewardFail = 300110;
  ErrorCode_InstPlaySetterRepeat = 300111;
  ErrorCode_InstEntranceNotUnlock = 300112;
  ErrorCode_InstEntranceNotOpen = 300113;
  ErrorCode_EnterInstLevelNotEnough = 300114;
  ErrorCode_EnterInstWorldLevelNotEnough = 300115;
  ErrorCode_EnterInstQuestNotEnough = 300116;
  ErrorCode_ErrForbidEnterInstInMatch = 300117;
  ErrorCode_ErrForbidEnterInstInEnteringOtherWorld = 300118;
  ErrorCode_ErrForbidEnterInstInWaitingOtherEnterWorld = 300119;
  ErrorCode_ErrEnterInstTypeNotMatch = 300120;
  ErrorCode_ErrNotHaveGetRewardCount = 300121;
  ErrorCode_ErrInMatching = 300122;
  ErrorCode_ErrNotInMatching = 300123;
  ErrorCode_ErrNotFindValidMatchServer = 300124;
  ErrorCode_ErrNotFindMatchServerPrx = 300125;
  ErrorCode_ErrNotHaveMatchTeamInfo = 300126;
  ErrorCode_ErrAlreadyConfirmMatchResult = 300127;
  ErrorCode_ErrMatchTeamNotInReadyState = 300128;
  ErrorCode_ErrMatchRoleNotActive = 300129;
  ErrorCode_ErrMatchReadyRepeat = 300130;
  ErrorCode_ErrMatchPlayerNotReady = 300131;
  ErrorCode_ErrMatchNotHostCanNotKick = 300132;
  ErrorCode_ErrMatchNotHostCanNotSetMatching = 300133;
  ErrorCode_ErrSetMatchFlagRepeat = 300134;
  ErrorCode_ErrPlayerNotInMatchTeam = 300135;
  ErrorCode_ErrGetMatchPoolFail = 300136;
  ErrorCode_ErrPlayerInMatchPool = 300137;
  ErrorCode_ErrPlayerNotInMatchPool = 300138;
  ErrorCode_ErrPlayerInMatchTeamCanNotCancel = 300139;
  ErrorCode_ErrPlayerIsConfirmResult = 300140;
  ErrorCode_ErrNotFindMatchTeam = 300141;
  ErrorCode_ErrPlayerIsReadyCanNotChangeRole = 300142;
  ErrorCode_ErrNotHostCanNotSetMultRoles = 300143;
  ErrorCode_ErrCanNotSetRepeatRole = 300144;
  ErrorCode_ErrPlayerNotReadyCanNotCancel = 300145;
  ErrorCode_ErrRoleRepeatCanNotReady = 300146;
  ErrorCode_ErrBeKickNotInMatchTeam = 300147;
  ErrorCode_ErrNotHostCanNotKick = 300148;
  ErrorCode_ErrNotHostCanNotSetTeamState = 300149;
  ErrorCode_ErrTeamMatchingCanNotStartInst = 300150;
  ErrorCode_ErrMatchTeamHavePlayerNotReady = 300151;
  ErrorCode_ErrNotHostCanNotEnterInst = 300152;
  ErrorCode_ErrMatchTeamIsNotEnterInstState = 300153;
  ErrorCode_ErrMatchInstIdNotExist = 300154;
  ErrorCode_ErrSingleInstanceCanNotMatch = 300155;
  ErrorCode_ErrOnlineStateCanNotMatch = 300156;
  ErrorCode_ErrTeamHaveSameRoleCanNotBegin = 300157;
  ErrorCode_ErrNotJoinChatChannel = 300158;
  ErrorCode_ErrChatChannelNotFound = 300159;
  ErrorCode_ErrChatChannelTypeNotMatch = 300160;
  ErrorCode_ErrChatContentTooLong = 300161;
  ErrorCode_ErrFightRoleIsAllDied = 300162;
  ErrorCode_ErrLoadingSceneIdNotMatch = 300163;
  ErrorCode_ErrLoadingPlayerNotInScene = 300164;
  ErrorCode_ErrPlayerIsSceneLoadingCanNotBeKick = 300165;
  ErrorCode_ErrTeamPlayerIsSceneLoadingCanNotDissolve = 300166;
  ErrorCode_ErrIsSceneLoadingCanNotDissolve = 300167;
  ErrorCode_ErrSceneLoadingCanNotEnterInst = 300168;
  ErrorCode_ErrActivateResetPointNotEntity = 300169;
  ErrorCode_ErrHostIsLoadingScene = 300170;
  ErrorCode_ErrHostIsLoadingSceneCanNotApply = 300171;
  ErrorCode_ErrIsLoadingSceneCanNotAcceptApply = 300172;
  ErrorCode_ErrNotFindHostWorldScene = 300173;
  ErrorCode_ErrCanNotRepeatCreateNeedSaveScene = 300174;
  ErrorCode_DeadStateCanNotAgreeOherEnter = 300175;
  ErrorCode_HostIsDeadStateCanNotEnter = 300176;
  ErrorCode_ErrSceneIsLoadingCanNotLeave = 300177;
  ErrorCode_ErrInstCanNotReChallenge = 300178;
  ErrorCode_ErrInstMemberNotEnoughCanNotReChallenge = 300179;
  ErrorCode_ErrInstHavePlayerLeaveCanNotReChallenge = 300180;
  ErrorCode_ErrInstHavePlayerNotDeadCanNotReChallenge = 300181;
  ErrorCode_ErrInstNotSettleCanNotReChallenge = 300182;
  ErrorCode_ErrInstCanNotRepetApplyRechallenge = 300183;
  ErrorCode_ErrInstCanNotRepetReceiveRechallenge = 300184;
  ErrorCode_ErrInstOwnerCanIniviteRechallenge = 300185;
  ErrorCode_ErrInstOwnerCanNotReceiveRechallenge = 300186;
  ErrorCode_ErrPlayerIsLogoutCanNotCreateScene = 300187;
  ErrorCode_ErrPlayerIsCreatingScene = 300188;
  ErrorCode_ErrPlayerCreateSceneFail = 300189;
  ErrorCode_ErrBigWorldCanNotReset = 300190;
  ErrorCode_ErrMultiGameModeCanNotReset = 300191;
  ErrorCode_ErrIsEnterSceneApplyingCanNotDoRepeate = 300192;
  ErrorCode_ErrIsQueryLobbyFriendDetailCanNotDoRepeate = 300193;
  ErrorCode_ErrIsQueryLobbyPlayerDetailCanNotDoRepeate = 300194;
  ErrorCode_ErrPlayerIsLoadingCanNotDoTeleport = 300195;
  ErrorCode_ErrPlayerIsTeleportCanNotDoTeleport = 300196;
  ErrorCode_ErrTeleportPositionIllegal = 300197;
  ErrorCode_ErrPlayerIsLoadingCanNotRevive = 300198;
  ErrorCode_ErrPlayerIsTeleportCanNotRevive = 300199;
  ErrorCode_ErrPlayerIsInTeleportCanNotBeKick = 300200;
  ErrorCode_ErrTeamPlayerIsInTeleportCanNotDissolve = 300201;
  ErrorCode_ErrHostIsInTeleportCanNotApply = 300202;
  ErrorCode_ErrIsInTeleportCanNotAcceptApply = 300203;
  ErrorCode_ErrStrNotIllegal = 400000;
  ErrorCode_ErrBasicInfoPhotoUnlocked = 400001;
  ErrorCode_ErrBasicInfoFrameUnlocked = 400002;
  ErrorCode_ErrCanNotGetSelfBasicInfo = 400003;
  ErrorCode_ErrMailNotExist = 400004;
  ErrorCode_ErrMailAlreadyRead = 400005;
  ErrorCode_ErrNoMailCanGet = 400006;
  ErrorCode_ErrMailNoAttachment = 400007;
  ErrorCode_ErrMailAttachmentIsGet = 400008;
  ErrorCode_ErrMailAttachmentNotGet = 400009;
  ErrorCode_ErrMailNotRead = 400010;
  ErrorCode_ErrNoMailCanDelete = 400011;
  ErrorCode_ErrMailItemBagFull = 400012;
  ErrorCode_ErrMailFuncNotOpen = 400013;
  ErrorCode_ErrMailOverSize = 400014;
  ErrorCode_ErrMailTakeLimit = 400015;
  ErrorCode_ErrMailAttachmentItemInvalidCount = 400016;
  ErrorCode_ErrMailAttachmentItemNoConf = 400017;
  ErrorCode_ErrMailNoConf = 400018;
  ErrorCode_ErrShopIdNotExit = 400019;
  ErrorCode_ErrShopInfoExist = 400020;
  ErrorCode_ErrShopTimeLimit = 400021;
  ErrorCode_ErrShopMoneyId = 400022;
  ErrorCode_ErrShopNumLimit = 400023;
  ErrorCode_ErrShopCondLimit = 400024;
  ErrorCode_ErrShopBankNoExit = 400025;
  ErrorCode_ErrShopNoShow = 400026;
  ErrorCode_ErrShopVersion = 400027;
  ErrorCode_ErrShopIlligalParam = 400028;
  ErrorCode_ErrDragonPoolConf = 400029;
  ErrorCode_ErrFullLevel = 400030;
  ErrorCode_ErrItemConf = 400031;
  ErrorCode_ErrNotEnoughItem = 400032;
  ErrorCode_NotMingSuTi = 400033;
  ErrorCode_HadFinishMingSuTi = 400034;
  ErrorCode_MingSuCallEntityFail = 400035;
  ErrorCode_ErrDragonPoolFuncNotOpen = 400036;
  ErrorCode_ErrWorldLevelHadDown = 400037;
  ErrorCode_ErrWorldLevelNotDown = 400038;
  ErrorCode_ErrWorldLevelMin = 400039;
  ErrorCode_ErrWorldLevelCd = 400040;
  ErrorCode_ErrIsBlockedPlayer = 400041;
  ErrorCode_ErrIsNotBlockedPlayer = 400042;
  ErrorCode_ErrBlockListCountMax = 400043;
  ErrorCode_ErrYouAreBlocked = 400044;
  ErrorCode_ErrAlreadyOnFriendList = 400045;
  ErrorCode_ErrNotOnFriendList = 400046;
  ErrorCode_ErrAlreadyOnFriendApplyList = 400047;
  ErrorCode_ErrFriendApplyNotExists = 400048;
  ErrorCode_ErrFriendListCountMax = 400049;
  ErrorCode_ErrInitiatorFriendListCountMax = 400050;
  ErrorCode_ErrReceiverApplyListCountMax = 400051;
  ErrorCode_ErrCanNotFriendApplySendToSelf = 400052;
  ErrorCode_ErrFriendApplySended = 400053;
  ErrorCode_ErrFriendRemarkLengthLimit = 400054;
  ErrorCode_ErrFriendApplyRequestLimit = 400055;
  ErrorCode_ErrFriendRequestEmpty = 400056;
  ErrorCode_ErrFriendRequestOverSize = 400057;
  ErrorCode_ErrPayShopNotExists = 400058;
  ErrorCode_ErrPayShopDisabled = 400059;
  ErrorCode_ErrPayShopGoodsNotExists = 400060;
  ErrorCode_ErrPayShopGoodsDisabled = 400061;
  ErrorCode_ErrPayShopGoodsLocked = 400062;
  ErrorCode_ErrPayShopGoodsOutSellTime = 400063;
  ErrorCode_ErrPayShopGoodsBuyLimit = 400064;
  ErrorCode_ErrPayShopDataChanged = 400065;
  ErrorCode_ErrPayShopIllegalBuyCount = 400066;
  ErrorCode_ErrPayShopIsDirect = 400067;
  ErrorCode_ErrPayShopIsNotDirect = 400068;
  ErrorCode_ErrPayShopTabDisabled = 400069;
  ErrorCode_ErrMonthCardWithoutValidity = 400070;
  ErrorCode_ErrMonthCardUpdateConfNotExist = 400071;
  ErrorCode_ErrMonthCardDaysMax = 400072;
  ErrorCode_ErrMonthCardRewardGot = 400073;
  ErrorCode_ErrMonthCardConfNotExist = 400074;
  ErrorCode_ErrIsNotSpecialItem = 400075;
  ErrorCode_ErrNoEquipSpecialItem = 400076;
  ErrorCode_ErrNoValidBattlePass = 400077;
  ErrorCode_ErrBattlePassRewardNotFound = 400078;
  ErrorCode_ErrBattlePassNotPaid = 400079;
  ErrorCode_ErrBattlePassIsPaid = 400080;
  ErrorCode_ErrBattlePassRewardLocked = 400081;
  ErrorCode_ErrBattlePassRewardTaken = 400082;
  ErrorCode_ErrBattlePassCanNotRepeatActive = 400083;
  ErrorCode_BattlePassNoRecurringReward = 400084;
  ErrorCode_ErrBattlePassIsAdvanced = 400085;
  ErrorCode_ErrBattlePassTaskNotFound = 400086;
  ErrorCode_ErrBattlePassTaskNotFinished = 400087;
  ErrorCode_ErrBattlePassTaskTaken = 400088;
  ErrorCode_ErrBattlePassExpIsFull = 400089;
  ErrorCode_ErrAdviceNotFound = 400090;
  ErrorCode_ErrConjunctionCanNotWord = 400091;
  ErrorCode_ErrAdviceTextNotExists = 400092;
  ErrorCode_ErrAdviceWordNotExists = 400093;
  ErrorCode_ErrAdviceTemplateNotExists = 400094;
  ErrorCode_ErrAdviceCellCalcException = 400095;
  ErrorCode_ErrIsNotAdviceEntity = 400096;
  ErrorCode_ErrAdviceCreateLimit = 400097;
  ErrorCode_ErrAdviceContentCanNotEmpty = 400098;
  ErrorCode_ErrAdviceEntityNotFount = 400099;
  ErrorCode_ErrAdviceVoteLimit = 400100;
  ErrorCode_ErrAdviceIsVoteUp = 400101;
  ErrorCode_ErrAdviceIsVoteDown = 400102;
  ErrorCode_ErrNoAdviceItem = 400103;
  ErrorCode_ErrAdviceCreateNotOpen = 400104;
  ErrorCode_ErrAdviceCanNotCreateByVisitor = 400105;
  ErrorCode_ErrAdviceSetingIsShow = 400106;
  ErrorCode_ErrAdviceSetingIsNoShow = 400107;
  ErrorCode_ErrAdviceUpMaxValue = 400108;
  ErrorCode_ErrAdviceDownMaxValue = 400109;
  ErrorCode_ProtoVersionCheckFail = 400110;
  ErrorCode_ProtoMd5CheckFail = 400111;
  ErrorCode_ConfigVersionCheckFail = 400112;
  ErrorCode_ConfigMd5CheckFail = 400113;
  ErrorCode_ErrInvalidMonthCardDays = 400114;
  ErrorCode_ErrMonthCardExtendedDaysMax = 400115;
  ErrorCode_ErrMobileButtonNoCfg = 400116;
  ErrorCode_ErrMoneyWrongPayCount = 400117;
  ErrorCode_ErrMailTextSenderNotFound = 400118;
  ErrorCode_ErrMailTextTitleNotFound = 400119;
  ErrorCode_ErrMailTextContentNotFound = 400120;
  ErrorCode_ErrAdviceIsNotVoteUp = 400121;
  ErrorCode_ErrParkourChallengeNoConf = 400122;
  ErrorCode_ErrParkourLocationNoConf = 400123;
  ErrorCode_ErrParkourChallengeNotOpen = 400124;
  ErrorCode_ErrParkourChallengeNoData = 400125;
  ErrorCode_ErrParkourChallengeTaken = 400126;
  ErrorCode_ErrParkourChallengeUnderscore = 400127;
  ErrorCode_ErrParkourChallengeScoreNoConf = 400128;
  ErrorCode_ErrParkourTakeFail = 400129;
  ErrorCode_ErrShopIllegalBuyCount = 400130;
  ErrorCode_ErrQuestErrTaskId = 500000;
  ErrorCode_ErrQuestErrStepId = 500001;
  ErrorCode_ErrQuestErrTaskBag = 500002;
  ErrorCode_ErrQuestStepStatusNotCanAccept = 500003;
  ErrorCode_ErrQuestStepStatusNotCanCommit = 500004;
  ErrorCode_ErrQuestStepConf = 500005;
  ErrorCode_ErrQuestStepData = 500006;
  ErrorCode_ErrQuestCanNotAccept = 500007;
  ErrorCode_ErrAreaQuestDelegationBoardRequest = 500008;
  ErrorCode_ErrAreaQuestAreaIdErr = 500009;
  ErrorCode_ErrAreaQuestExpired = 500010;
  ErrorCode_ErrDevoteLevel = 500011;
  ErrorCode_ErrDevoteRewardReceived = 500012;
  ErrorCode_ErrQuestNotFinish = 500013;
  ErrorCode_ErrDevoteId = 500014;
  ErrorCode_ErrAreaQuestLimit = 500015;
  ErrorCode_ErrQuestNodeNotActive = 500016;
  ErrorCode_ErrQuestNotActiveId = 500017;
  ErrorCode_ErrQuestNodeNotFound = 500018;
  ErrorCode_ErrQuestComNotFound = 500019;
  ErrorCode_ErrQuestTraceType = 500020;
  ErrorCode_ErrQuestNotProgress = 500021;
  ErrorCode_ErrQuestNoCombatState = 500022;
  ErrorCode_ErrQuestNodeData = 500023;
  ErrorCode_ErrQuestNotChildQuestNode = 500024;
  ErrorCode_ErrQuestNotClientSubmit = 500025;
  ErrorCode_ErrQuestAccepted = 500026;
  ErrorCode_ErrResourceOccupation = 500027;
  ErrorCode_ErrRequestOccupationType = 500028;
  ErrorCode_ErrNotFoundOccupation = 500029;
  ErrorCode_ErrNotOnlineQuestAccept = 500030;
  ErrorCode_ErrQuestDestroy = 500031;
  ErrorCode_ErrTreeNodeNotFind = 500032;
  ErrorCode_ErrTreeNodeNotActive = 500033;
  ErrorCode_ErrIsNotChildQuestNode = 500034;
  ErrorCode_ErrChildQuestConditionCanNotSubmit = 500035;
  ErrorCode_ErrNodeNotFindAction = 500036;
  ErrorCode_ErrNodeActionIsFinish = 500037;
  ErrorCode_ErrNodeActionGetItemIsNotQuestItem = 500038;
  ErrorCode_ErrNodeActionGetItemHasNotFreeSize = 500039;
  ErrorCode_ErrInvalidBtType = 500040;
  ErrorCode_ErrTimerNotFind = 500041;
  ErrorCode_ErrPreCondition = 500042;
  ErrorCode_ErrHandIdItemData = 500043;
  ErrorCode_ErrTreeNotFailedNode = 500044;
  ErrorCode_ErrTreeNotFailConf = 500045;
  ErrorCode_ErrTreeNotGiveUpConf = 500046;
  ErrorCode_ErrTreeNotRollback = 500047;
  ErrorCode_ErrNodeNotFindNpcId = 500048;
  ErrorCode_ErrNotRollbackPermission = 500049;
  ErrorCode_ErrNotRollbackRepeat = 500050;
  ErrorCode_ErrTreeSuspend = 500051;
  ErrorCode_ErrPlayerNotInQuestMap = 500052;
  ErrorCode_ErrSaveNewNotRollback = 500053;
  ErrorCode_ErrUiPlayType = 500054;
  ErrorCode_ErrOccupationTime = 500055;
  ErrorCode_ErrReleaseTime = 500056;
  ErrorCode_ErrActionSetTime = 500057;
  ErrorCode_ErrForcedOccupationResource = 500058;
  ErrorCode_ErrAddPlayBubble = 500059;
  ErrorCode_ErrDisableSwitchOccupation = 500060;
  ErrorCode_ErrOpenSystemBoardResultFail = 500061;
  ErrorCode_ErrEntityNoInhaledComponent = 500062;
  ErrorCode_ErrEntityInhaledStrength = 500063;
  ErrorCode_ErrDisableSwitchGender = 500064;
  ErrorCode_ErrTapeDefault = 600000;
  ErrorCode_ErrTapeInvalidPos = 600001;
  ErrorCode_ErrTapeIsNotActiveRole = 600002;
  ErrorCode_ErrTapeItemTypeFail = 600003;
  ErrorCode_ErrTapeNotExistTapeItem = 600004;
  ErrorCode_ErrTapeNotExistTapeConfig = 600005;
  ErrorCode_ErrTapeNotExistTapeProps = 600006;
  ErrorCode_ErrTapeHasTakeOnTape = 600007;
  ErrorCode_ErrTapeHasNotTakeOnTape = 600008;
  ErrorCode_ErrTapeNotExistTapeQualityConfig = 600009;
  ErrorCode_ErrTapeNotExistLevelUpExpConfig = 600010;
  ErrorCode_ErrTapeInvalidLevelUpExpValue = 600011;
  ErrorCode_ErrTapeNotExistExpDecayRatioConfig = 600012;
  ErrorCode_ErrTapeLevelUpEqualItem = 600013;
  ErrorCode_ErrTapeLevelUpRepeatItem = 600014;
  ErrorCode_ErrTapeLevelUpInvalidExpItemNum = 600015;
  ErrorCode_ErrTapeLevelUpInvalidExpRate = 600016;
  ErrorCode_ErrTapeLevelUpInvalidAddExp = 600017;
  ErrorCode_ErrTapeLevelUpMaxLevel = 600018;
  ErrorCode_ErrTapeLevelUpConsumeItemNotEnough = 600019;
  ErrorCode_ErrTapeLevelUpMaterialLock = 600020;
  ErrorCode_ErrTapeTransferEqualItem = 600021;
  ErrorCode_ErrTapeTransferQualityNotEqual = 600022;
  ErrorCode_ErrTapeTransferSuitNotEqual = 600023;
  ErrorCode_ErrTapeTransferMaterialLock = 600024;
  ErrorCode_ErrTapeTransferMaterialEquipped = 600025;
  ErrorCode_ErrTapeNotExistTransferPropNumConfig = 600026;
  ErrorCode_ErrTapeTransferPropNumIsMax = 600027;
  ErrorCode_ErrTapeTransferRandomSubPropFail = 600028;
  ErrorCode_ErrTapeResetTransferHasNotProp = 600029;
  ErrorCode_ErrTapeResetTransferMaterialNotEnough = 600030;
  ErrorCode_ErrTapeNotExistTapeExpItem = 600031;
  ErrorCode_ErrTapeNotExistTapeExpItemConfig = 600032;
  ErrorCode_ErrCollectEntityNotExist = 600033;
  ErrorCode_ErrCollectInvalidEntityMainType = 600034;
  ErrorCode_ErrRunningLevelPlayNotFind = 600035;
  ErrorCode_ErrLevelPlayInteractionEntity = 600036;
  ErrorCode_ErrLevelPlayNotExistByConfId = 600037;
  ErrorCode_ErrLevelPlayNotCreate = 600038;
  ErrorCode_ErrLevelPlayRewarded = 600039;
  ErrorCode_ErrLevelPlayInteractionType = 600040;
  ErrorCode_ErrLevelPlayNotPlayer = 600041;
  ErrorCode_ErrLevelPlayNotComplete = 600042;
  ErrorCode_ErrLevelPlayRewardFail = 600043;
  ErrorCode_ErrLevelPlayNotWaitState = 600044;
  ErrorCode_ErrLevelPlayAction = 600045;
  ErrorCode_ErrLevelPlayGetRewardLimit = 600046;
  ErrorCode_ErrFlowNotExist = 600047;
  ErrorCode_ErrFlowHaveNotActionWait = 600048;
  ErrorCode_ErrFlowHaveNotTalkWait = 600049;
  ErrorCode_ErrFlowHaveNotOptionWait = 600050;
  ErrorCode_ErrFlowInvalidOptionId = 600051;
  ErrorCode_ErrInteractFlowCanNotPlay = 600052;
  ErrorCode_ErrInteractInvalidFlowState = 600053;
  ErrorCode_ErrInteractOptionOwnerIsNotFlowOwner = 600054;
  ErrorCode_ErrInteractOptionOwnerIsNotActionOwner = 600055;
  ErrorCode_ErrActionOwnerIsNotEntity = 600056;
  ErrorCode_ErrActionOwnerNotFound = 600057;
  ErrorCode_ErrActionSceneNotFound = 600058;
  ErrorCode_ErrActionGroupNotFound = 600059;
  ErrorCode_ErrFinishClientActionFail = 600060;
  ErrorCode_ErrActionHostPlayerNotFound = 600061;
  ErrorCode_ErrActionFail = 600062;
  ErrorCode_ErrActionPlayerNotFound = 600063;
  ErrorCode_ErrInteractMultiGameMode = 600064;
  ErrorCode_ErrInteractAddFlowFail = 600065;
  ErrorCode_ErrBehaviorTreeOwnerNotFound = 600066;
  ErrorCode_ErrBehaviorTreeNotFound = 600067;
  ErrorCode_ErrBehaviorTreePending = 600068;
  ErrorCode_ErrBehaviorTreeTimerTypeNotFound = 600069;
  ErrorCode_ErrBehaviorTreeStopTimerFail = 600070;
  ErrorCode_ErrBehaviorTreeTimerCompNotFound = 600071;
  ErrorCode_ErrInteractCd = 600072;
  ErrorCode_ErrInteractRange = 600073;
  ErrorCode_ErrDropPickRange = 600074;
  ErrorCode_ErrBtTmpItemContextNotExist = 600075;
  ErrorCode_ErrBtTmpItemBtObjNotExist = 600076;
  ErrorCode_ErrPlayerBigWorldNotExist = 600077;
  ErrorCode_ErrRoleEntityNotExist = 600078;
  ErrorCode_ErrAddFlowFail = 600079;
  ErrorCode_ErrInteracting = 600080;
  ErrorCode_ErrInteractCollectBagFull = 600081;
  ErrorCode_ErrBtObjIsNotInstPlay = 600082;
  ErrorCode_ErrReviveConfigNotExist = 600083;
  ErrorCode_ErrFinishFlowFail = 600084;
  ErrorCode_ErrFlowActionFail = 600085;
  ErrorCode_ErrGmSubmitChildQuestNodeMaxDepth = 600086;
  ErrorCode_ErrGmSubmitChildQuestNodeIsNotProgress = 600087;
  ErrorCode_ErrEntityPatrolComponentNotExist = 600088;
  ErrorCode_ErrInteractIsNotParticipant = 600089;
  ErrorCode_ErrVisionEntityInteractFail = 600090;
  ErrorCode_ErrMaxDropTimes = 600091;
  ErrorCode_ErrStateEntityMultiHang = 600092;
  ErrorCode_ErrPlayerLoading = 600093;
  ErrorCode_ErrPlayerTeleporting = 600094;
  ErrorCode_ErrInteractBtPending = 600095;
  ErrorCode_ErrInteractDead = 600096;
  ErrorCode_ErrMultiHangEntity = 600097;
  ErrorCode_ErrRenjuCanNotResetWhenComplete = 600098;
  ErrorCode_ErrRenjuCanNotMove = 600099;
  ErrorCode_ErrEntityNotFound = 600100;
  ErrorCode_ErrSceneHostPlayerNotMatch = 600101;
  ErrorCode_ErrVehicleComponentNotFound = 600102;
  ErrorCode_ErrVehicleSeatNotFound = 600103;
  ErrorCode_ErrVehicleGettingOn = 600104;
  ErrorCode_ErrPortalEntityNotFound = 600105;
  ErrorCode_ErrPortalCompNotFound = 600106;
  ErrorCode_ErrPortalTeleportPosNotEqual = 600107;
  ErrorCode_ErrPlayerNotInVehicle = 600108;
  ErrorCode_ErrVehiclePassengerRoleExist = 600109;
  ErrorCode_ErrCreateVehiclePassengerEntityFail = 600110;
  ErrorCode_ErrVehiclePassengerNotFound = 600111;
  ErrorCode_ErrCanNotMovePlacement = 600112;
  ErrorCode_ErrGmSetLimitTeleportDungeon = 600113;
  ErrorCode_ErrMaxSetTagIdDepth = 600114;
  ErrorCode_ErrBeforeSetStateTagId = 600115;
  ErrorCode_ErrSetStateTagIdLock = 600116;
  ErrorCode_ErrDangoMonopolyActivityDataNotFound = 600117;
  ErrorCode_ErrDangoMonopolyReqTaskRewardMax = 600118;
  ErrorCode_ErrDangoMonopolyTaskConfigNotFound = 600119;
  ErrorCode_ErrDangoMonopolyTaskNotCompleted = 600120;
  ErrorCode_ErrDangoMonopolyTaskRewardHasGet = 600121;
  ErrorCode_ErrDangoMonopolyBoardConfigNotFound = 600122;
  ErrorCode_ErrDangoMonopolyGridRewardNotGet = 600123;
  ErrorCode_ErrDangoMonopolyHasNotDiceItem = 600124;
  ErrorCode_ErrDangoMonopolyHasNotGridReward = 600125;
  ErrorCode_ErrDangoMonopolyGridConfigNotFound = 600126;
  ErrorCode_ErrDangoMonopolyReqBoardRewardMax = 600127;
  ErrorCode_ErrDangoMonopolyBoardNotCompleted = 600128;
  ErrorCode_ErrDangoMonopolyBoardRewardHasGet = 600129;
  ErrorCode_ErrDangoMonopolyActivityConfigNotFound = 600130;
  ErrorCode_ErrDangoMonopolyBoardLock = 600131;
  ErrorCode_ErrChangeEntityStateActionEntityNotFound = 600132;
  ErrorCode_ErrDangoMonopolyDiceNumInvalid = 600133;
  ErrorCode_ErrSceneWorldNotExist = 700000;
  ErrorCode_ErrPlayerNotInScene = 700001;
  ErrorCode_ErrDropEntityNotExist = 700002;
  ErrorCode_ErrDropComponentNotExist = 700003;
  ErrorCode_ErrDropOwnerError = 700004;
  ErrorCode_ErrPlayerAlreadyInScene = 700005;
  ErrorCode_ErrSceneIdParseError = 700006;
  ErrorCode_ErrJoinSceneIdNotExist = 700007;
  ErrorCode_ErrSceneInviteFail = 700008;
  ErrorCode_ErrSceneInvitePlayerNotExist = 700009;
  ErrorCode_ErrSceneInviteTokenInvalid = 700010;
  ErrorCode_ErrSceneInviterNotExist = 700011;
  ErrorCode_ErrSceneInviteeIdNotMatch = 700012;
  ErrorCode_ErrSceneTeamIsFull = 700013;
  ErrorCode_ErrScenePlayerIsInTeam = 700014;
  ErrorCode_ErrSceneInviteerIsInPlayeInst = 700015;
  ErrorCode_ErrBeKickerNotInScene = 700016;
  ErrorCode_ErrorCanNotSceneKickSelf = 700017;
  ErrorCode_ErrCanNotKickOtherInPlayInst = 700018;
  ErrorCode_ErrCanNotKickOtherWhoIsInPlayInst = 700019;
  ErrorCode_ErrNoSceneKickPermission = 700020;
  ErrorCode_ErrInviterIsInOtherScene = 700021;
  ErrorCode_ErrInOtherSceneCanNotInvite = 700022;
  ErrorCode_ErrSceneBackSceneFlagError = 700023;
  ErrorCode_ErrLeaveSceneIdNotMatch = 700024;
  ErrorCode_ErrPrewarTeamAlreadyExist = 700025;
  ErrorCode_ErrPrewarTeamNotExist = 700026;
  ErrorCode_ErrCreatePrewarTeamPermissionNotEnough = 700027;
  ErrorCode_ErrPrewarTeamInvitePermissionNotEnough = 700028;
  ErrorCode_ErrPrewarBeInviterNotInScene = 700029;
  ErrorCode_ErrPrewarBeInviterInInstance = 700030;
  ErrorCode_ErrPlayerAlreadyInPrewarTeam = 700031;
  ErrorCode_ErrPlayerNotInPrewarTeam = 700032;
  ErrorCode_ErrPlayerSetPrewarReadyStateRepeat = 700033;
  ErrorCode_ErrPrewarTeamBeKickerNotInScene = 700034;
  ErrorCode_ErrPrewarTeamKickPermissionNotEnough = 700035;
  ErrorCode_ErrPrewarIniviteTooFrequently = 700036;
  ErrorCode_ErrPrewarJoinInstanceIdNotMatch = 700037;
  ErrorCode_ErrPrewarCaptainCanNotLeave = 700038;
  ErrorCode_ErrPrewarReadyStateCanNotChangeRole = 700039;
  ErrorCode_ErrScenePrewarTeamHavePlayerNotReady = 700040;
  ErrorCode_ErrAlreadyInMultiScene = 700041;
  ErrorCode_ErrOnlyCaptainCanDissolvePrewarTeam = 700042;
  ErrorCode_ErrMultiChangeRoleIndexInvalid = 700043;
  ErrorCode_ErrMultiCanNotChangeOtherRole = 700044;
  ErrorCode_ErrMultiChangeRoleEntityNorExist = 700045;
  ErrorCode_ErrSceneCanNotUseThisFunc = 700046;
  ErrorCode_ErrSceneCanNotUseThisItem = 700047;
  ErrorCode_ErrSceneFightRoleIdRepeat = 700048;
  ErrorCode_ErrShieldAddEntityNotExist = 700049;
  ErrorCode_ErrShieldAddShieldIdExisted = 700050;
  ErrorCode_ErrShieldChangeEntityNotExist = 700051;
  ErrorCode_ErrShieldChangeShieldIdNotExist = 700052;
  ErrorCode_ErrShieldRemoveEntityNotExist = 700053;
  ErrorCode_ErrShieldRemoveShieldIdNotExist = 700054;
  ErrorCode_ErrHardnessModeChangedEntityNotExist = 700055;
  ErrorCode_ErrSceneEntityNotExist = 700056;
  ErrorCode_ErrSceneEntityNotHavePartData = 700057;
  ErrorCode_ErrsceneEntityNotHavePartId = 700058;
  ErrorCode_ErrChangeControlRoleRepeat = 700059;
  ErrorCode_ErrVisionSkillCallEntityFail = 700060;
  ErrorCode_ErrSceneDataLoadError = 700061;
  ErrorCode_ErrCreatureDataError = 700062;
  ErrorCode_ErrCreatureGenIsExist = 700063;
  ErrorCode_ErrCreatureGenIsNotExist = 700064;
  ErrorCode_ErrCreatureGenIsControlByOther = 700065;
  ErrorCode_ErrCreatureGenNotHaveControlPerm = 700066;
  ErrorCode_ErrCreatureReachMaxCount = 700067;
  ErrorCode_ErrCreatureConditionNotMatch = 700068;
  ErrorCode_ErrCreatureTimeIntervalError = 700069;
  ErrorCode_ErrCreatureCfgNotExist = 700070;
  ErrorCode_ErrCreatureEntityIsNotValidity = 700071;
  ErrorCode_ErrUniqueEntityCanNotCreateTwice = 700072;
  ErrorCode_ErrRoleNotHaveVisionSkill = 700073;
  ErrorCode_ErrHitGearEntityNotExist = 700074;
  ErrorCode_ErrHitGearHaveNotEntityConfig = 700075;
  ErrorCode_ErrHitGearHaveNotGearConfig = 700076;
  ErrorCode_ErrHitGearHaveNotGameplayConfig = 700077;
  ErrorCode_ErrHitGearHaveNotStepConfig = 700078;
  ErrorCode_ErrHitGearHaveEntityCommonTag = 700079;
  ErrorCode_ErrHitGearEntityFunctionTypeFail = 700080;
  ErrorCode_ErrHitGearAcceptStepFail = 700081;
  ErrorCode_ErrCreateInstanceNotContainEntrance = 700082;
  ErrorCode_ErrCreateInstanceHaveNotEntranceConfig = 700083;
  ErrorCode_ErrCreateInstanceEntranceLock = 700084;
  ErrorCode_ErrCreateInstanceHaveNotConfig = 700085;
  ErrorCode_ErrCreateInstanceEnterCountNotEnough = 700086;
  ErrorCode_ErrCreateInstanceConditionNotMatch = 700087;
  ErrorCode_ErrEnterCountRequestHaveNotConfig = 700088;
  ErrorCode_ErrUnlockInstanceEntranceHaveNotConfig = 700089;
  ErrorCode_ErrUnlockInstanceEntranceNotNeedUnlock = 700090;
  ErrorCode_ErrUnlockInstanceEntranceUnlocked = 700091;
  ErrorCode_ErrUnlockInstanceEntranceCondiitonNotMatch = 700092;
  ErrorCode_ErrEnterSceneGameplayRequestHaveNotConfig = 700093;
  ErrorCode_ErrEnterSceneGameplayRequestAccepted = 700094;
  ErrorCode_ErrEnterSceneGameplayRequestAcceptFail = 700095;
  ErrorCode_ErrStoryCharacterCreatFail = 700096;
  ErrorCode_ErrStoryCharacterCreatRepeat = 700097;
  ErrorCode_ErrStoryCharacterNotExist = 700098;
  ErrorCode_ErrCheckGearEntityNotExist = 700099;
  ErrorCode_ErrCheckGearType = 700100;
  ErrorCode_ErrCheckGearNotEntityConfig = 700101;
  ErrorCode_ErrCheckGearActive = 700102;
  ErrorCode_ErrCheckGearInactive = 700103;
  ErrorCode_ErrTargetGearGroupEntityNotExist = 700104;
  ErrorCode_ErrTargetGearGroupConfigNotExist = 700105;
  ErrorCode_ErrTargetGearEntityNotExist = 700106;
  ErrorCode_ErrTargetGearConfigNotExist = 700107;
  ErrorCode_ErrTargetGearStartTypeIsNotHit = 700108;
  ErrorCode_ErrTargetGearStartTypeIsNotAction = 700109;
  ErrorCode_ErrTargetGearStarted = 700110;
  ErrorCode_ErrTargetGearFinished = 700111;
  ErrorCode_ErrTargetGearIsNotInCreatedConsole = 700112;
  ErrorCode_ErrTargetGearGroupEntityIsNotAllInit = 700113;
  ErrorCode_ErrLanternCatNotExit = 700114;
  ErrorCode_ErrLanternCatConfNotExit = 700115;
  ErrorCode_ErrLanternCatType = 700116;
  ErrorCode_ErrLanternActived = 700117;
  ErrorCode_ErrLanternTargetNotExit = 700118;
  ErrorCode_ErrCaptureFail = 700119;
  ErrorCode_ErrDyingFail = 700120;
  ErrorCode_ErrThrowDamageEntityNotExit = 700121;
  ErrorCode_ErrThrowDamageCalculateId = 700122;
  ErrorCode_ErrThrowDamageIdNotExit = 700123;
  ErrorCode_ErrThrowDamageRoleIdConf = 700124;
  ErrorCode_ErrThrowDamageTypeNotExit = 700125;
  ErrorCode_InstIdNotExist = 700126;
  ErrorCode_ErrControlObjectEntityNotExist = 700127;
  ErrorCode_ErrControlObjectConfigNotExist = 700128;
  ErrorCode_ErrControlGroupConfigNotExist = 700129;
  ErrorCode_ErrControlObjectLocked = 700130;
  ErrorCode_ErrControlGroupLocked = 700131;
  ErrorCode_ErrControlCanNotPutTarget = 700132;
  ErrorCode_ErrControlTargetOccupied = 700133;
  ErrorCode_ErrControlObjectCatching = 700134;
  ErrorCode_ErrControlObjectNotCatching = 700135;
  ErrorCode_ErrControlObjectOtherCatching = 700136;
  ErrorCode_ErrEntityPositionIllegal = 700137;
  ErrorCode_ErrTreasureBoxNot = 700138;
  ErrorCode_ErrTreasureBoxNotInit = 700139;
  ErrorCode_ErrTreasureBoxNotConfig = 700140;
  ErrorCode_ErrTreasureBoxHadReward = 700141;
  ErrorCode_ErrTreasureBoxNotInteraction = 700142;
  ErrorCode_ErrTreasureBoxNotDropId = 700143;
  ErrorCode_ErrTreasureBoxDropErr = 700144;
  ErrorCode_ErrTreasureBoxNotExist = 700145;
  ErrorCode_ErrTreasureBoxInvalidTag = 700146;
  ErrorCode_ErrTreasureBoxHadTag = 700147;
  ErrorCode_ErrTreasureBoxNotTag = 700148;
  ErrorCode_ErrSneakGameNotOpen = 700149;
  ErrorCode_ErrSneakFinishRepeat = 700150;
  ErrorCode_ErrClientControlDamage = 700151;
  ErrorCode_ErrSceneDataSaveFail = 700152;
  ErrorCode_NotInFbInstance = 700153;
  ErrorCode_GMErrCanNotCreateWorldInst = 700154;
  ErrorCode_GMErrPlayerAlreadyInFbInst = 700155;
  ErrorCode_GMErrTagetInstanceIsNotMulti = 700156;
  ErrorCode_GMErrPlayerNotFound = 700157;
  ErrorCode_ErrEntityFlowTooMuch = 700158;
  ErrorCode_GmErrIsWalkable = 700159;
  ErrorCode_GmErrIsNotWalkable = 700160;
  ErrorCode_GmErrNoNavmesh = 700161;
  ErrorCode_ErrBigWorldInstIdNotExist = 700162;
  ErrorCode_ErrInstIdNotBigWorld = 700163;
  ErrorCode_ErrInInstanceNotSwitchBigWorld = 700164;
  ErrorCode_ErrAlreadyInThisBigWorld = 700165;
  ErrorCode_ErrNoPermissionGetTreasureBox = 700166;
  ErrorCode_ErrCreateBigWorldRepeat = 700167;
  ErrorCode_DebugErrInstIdNotExist = 700168;
  ErrorCode_ErrSceneAiStopped = 700169;
  ErrorCode_ErrGlobalEntityConfigNotExist = 700170;
  ErrorCode_ErrSceneFixedConfigNotExist = 700171;
  ErrorCode_ErrSceneFixedEntityNotFound = 700172;
  ErrorCode_ErrSceneGlobalEntityNotFount = 700173;
  ErrorCode_ErrEntityNotHaveVarComponent = 700174;
  ErrorCode_ErrEntityVarNameNotExist = 700175;
  ErrorCode_ErrEntityVarTypeError = 700176;
  ErrorCode_ErrEntityConfigNotOffer = 700177;
  ErrorCode_ErrConfigTypeNotGloabl = 700178;
  ErrorCode_ErrConfigTypeNotSceneFixed = 700179;
  ErrorCode_ErrConfigTypeNotCharacter = 700180;
  ErrorCode_ErrEntityPosNotOffer = 700181;
  ErrorCode_ErrSceneCellPosNotFount = 700182;
  ErrorCode_ErrEntityCongigNotInSleep = 700183;
  ErrorCode_ErrSummonCfgNotFound = 700184;
  ErrorCode_ErrSummonAddEntityFail = 700185;
  ErrorCode_ErrSummonMaxCount = 700186;
  ErrorCode_ErrSummonMaxGenerations = 700187;
  ErrorCode_ErrSummonEntityIdAlreadyExist = 700188;
  ErrorCode_ErrSummonerEntityType = 700189;
  ErrorCode_ErrEntityStatusIsNotDead = 700190;
  ErrorCode_ErrEntityNotHaveAttributeComp = 700191;
  ErrorCode_ErrEntityDbData = 700192;
  ErrorCode_ErrSceneFixedEntityCreated = 700193;
  ErrorCode_ErrInvalidAwakeEntityContext = 700194;
  ErrorCode_ErrTriggerComponentNotExist = 700195;
  ErrorCode_ErrTriggerComponentMaxCount = 700196;
  ErrorCode_ErrNotSelfRole = 700197;
  ErrorCode_ErrNoControlRights = 700198;
  ErrorCode_ErrEntityHaveNotEntityOwner = 700199;
  ErrorCode_ErrEntityOwnerNotMatch = 700200;
  ErrorCode_ErrCreateSceneFixedEntitiesEmpty = 700201;
  ErrorCode_ErrInteractComponentNotExist = 700202;
  ErrorCode_ErrInteractOptionIndexInvalid = 700203;
  ErrorCode_ErrOnlineInteractNoPermission = 700204;
  ErrorCode_ErrOnlineInteractNotOpen = 700205;
  ErrorCode_ErrAwakeEntityNoPermission = 700206;
  ErrorCode_ErrCannotUseSkillStatus = 700207;
  ErrorCode_ErrInteractOptionGuidInvalid = 700208;
  ErrorCode_ErrAddInteractOptionFail = 700209;
  ErrorCode_ErrRemoveInteractOptionFail = 700210;
  ErrorCode_ErrInteractOptionOwnerNotFound = 700211;
  ErrorCode_ErrSummonPlayerId = 700212;
  ErrorCode_ErrSummonTemplateCfgNotFound = 700213;
  ErrorCode_ErrAttributeComponent = 700214;
  ErrorCode_ErrAnimFsmComponent = 700215;
  ErrorCode_ErrStateComponent = 700216;
  ErrorCode_ErrBattleComponent = 700217;
  ErrorCode_ErrPartComponent = 700218;
  ErrorCode_ErrAiControlComponent = 700219;
  ErrorCode_ErrSummonsComponent = 700220;
  ErrorCode_ErrAiBlackboardComponent = 700221;
  ErrorCode_ErrSetVarInvalidContext = 700222;
  ErrorCode_ErrSetVarInvalidVarRefPb = 700223;
  ErrorCode_ErrSetVarGetRightVarDefineFail = 700224;
  ErrorCode_ErrSetVarSetLeftVarDefineFail = 700225;
  ErrorCode_ErrCalcVarInvalidContext = 700226;
  ErrorCode_ErrCalcVarInvalidVarRef = 700227;
  ErrorCode_ErrCalcVarGetVarDefineFail = 700228;
  ErrorCode_ErrCalcVarInvalidVarType = 700229;
  ErrorCode_ErrCalcVarInvalidOp = 700230;
  ErrorCode_ErrCalcVarSetResultFail = 700231;
  ErrorCode_ErrActionEntityNoExist = 700232;
  ErrorCode_ErrActionNoInteractConfig = 700233;
  ErrorCode_ErrActionIdNoExist = 700234;
  ErrorCode_ErrActionBtObjNoExist = 700235;
  ErrorCode_ErrActionNodeNoExist = 700236;
  ErrorCode_ErrActionNoChildQuest = 700237;
  ErrorCode_ErrActionParams = 700238;
  ErrorCode_ErrActionNotEntityContext = 700239;
  ErrorCode_ErrActionExecutorNotFind = 700240;
  ErrorCode_ErrActionSessionNotFind = 700241;
  ErrorCode_ErrActionCreateSessionIdFail = 700242;
  ErrorCode_ErrActionPathConvertFail = 700243;
  ErrorCode_ErrActionConfigNotFind = 700244;
  ErrorCode_ErrActionHaveNotHandler = 700245;
  ErrorCode_ErrActionInternalError = 700246;
  ErrorCode_ErrActionInvalidIndex = 700247;
  ErrorCode_ErrActionIsNotServer = 700248;
  ErrorCode_ErrActionRemainActionNotFinish = 700249;
  ErrorCode_ErrActionExecutorIsNotBlackbard = 700250;
  ErrorCode_ErrContinuityActionNotFinish = 700251;
  ErrorCode_ErrActionIsNotContinuity = 700252;
  ErrorCode_ErrResetLocationEntityNotExist = 700253;
  ErrorCode_ErrEntityPosAbnormalNotExists = 700254;
  ErrorCode_ErrGmRemoveEntityNotExists = 700255;
  ErrorCode_ErrDrownEntityNotExists = 700256;
  ErrorCode_ErrTargetGearNotExists = 700257;
  ErrorCode_ErrOutofBattleEntityNotExists = 700258;
  ErrorCode_ErrOrderAddBuffEntityNotExists = 700259;
  ErrorCode_ErrOrderRemoveBuffEntityNotExists = 700260;
  ErrorCode_ErrActivateBuffEntityNotExists = 700261;
  ErrorCode_ErrToughCalcExtraRatioChangeEntityNotExists = 700262;
  ErrorCode_ErrAdsorbEntityNotExist = 700263;
  ErrorCode_ErrAdsorbCondNotMeet = 700264;
  ErrorCode_ErrTimelineTrackMultiGameForbid = 700265;
  ErrorCode_ErrTimelineTraceEntityNotExists = 700266;
  ErrorCode_ErrTimelineTraceComponentNotExists = 700267;
  ErrorCode_ErrTimelineTraceGroupIndex = 700268;
  ErrorCode_ErrTimelineTraceFinish = 700269;
  ErrorCode_ErrTimelineTraceCondition = 700270;
  ErrorCode_ErrTimelineTraceTargetEmpty = 700271;
  ErrorCode_ErrTimelineTraceControl = 700272;
  ErrorCode_ErrTimelineTraceFinishCondition = 700273;
  ErrorCode_ErrTimelineTraceNotInControl = 700274;
  ErrorCode_ErrForbidEnterInstance = 700275;
  ErrorCode_ErrForbitEnterBigWorld = 700276;
  ErrorCode_ErrPrefabIncIdExist = 700277;
  ErrorCode_ErrPrefabIdExist = 700278;
  ErrorCode_ErrPrefabNumberIsZero = 700279;
  ErrorCode_ErrPrefabEntityIsExist = 700280;
  ErrorCode_ErrPrefabTreasureBox = 700281;
  ErrorCode_ErrPrefabActionCreate = 700282;
  ErrorCode_ErrPrefabVarNoExist = 700283;
  ErrorCode_ErrClientOnlyEntityCantCreate = 700284;
  ErrorCode_ErrTimelineTraceActionRun = 700285;
  ErrorCode_ErrGmActivateTeleportSceneNotExist = 700286;
  ErrorCode_ErrGmCreateInstSceneHasExist = 700287;
  ErrorCode_ErrVfxNpcNotExist = 700288;
  ErrorCode_ErrVfxNpcIsNotVfxNpc = 700289;
  ErrorCode_ErrBlackboardLimit = 700290;
  ErrorCode_ErrBlackboardArrayLimit = 700291;
  ErrorCode_ErrBlackboardStringLimit = 700292;
  ErrorCode_ErrReconnectGWGetGatePlayerFailed = 800000;
  ErrorCode_ErrGWReconnectGWInvalidPlayerState = 800001;
  ErrorCode_ErrGWReconnectGWVerifyTokenFailed = 800002;
  ErrorCode_ErrGWReconnectGWBackOnlineAsyncFailed = 800003;
  ErrorCode_ErrGWReconnectGWBackOnlineAsyncException = 800004;
  ErrorCode_ErrReconnectGwclientLatestSeqNoNotHit = 800005;
  ErrorCode_ErrGWReconnectConfirmGetPlayerFailed = 800006;
  ErrorCode_ErrAttrChangeHandleInvalidClientAction = 800007;
  ErrorCode_ErrThrowDamageReqGetStateComponentFailed = 800008;
  ErrorCode_ErrThrowDamageReqEntityIsAlreadyDead = 800009;
  ErrorCode_ErrAnimalDieRequestForceSetDieError = 800010;
  ErrorCode_ErrCollectEntityForceSetEntityDieError = 800011;
  ErrorCode_ErrMonsterBoomForceSetDieError = 800012;
  ErrorCode_ErrAttrChangeReqReplaceAttrListFailed = 800013;
  ErrorCode_ErrReconnectInvalidOperation = 800014;
  ErrorCode_ErrReconnectGwNodeTainted = 800015;
  ErrorCode_ErrFavorRoleNotFound = 900000;
  ErrorCode_ErrFavorConfNotFound = 900001;
  ErrorCode_ErrFavorQuestNotFound = 900002;
  ErrorCode_ErrFavorLevelRewardLimit = 900003;
  ErrorCode_ErrFavorQuestAcceptLimit = 900004;
  ErrorCode_ErrFavorItemLocked = 900005;
  ErrorCode_ErrFavorItemHasUnLocked = 900006;
  ErrorCode_ErrElevatorEntityNotExit = 900007;
  ErrorCode_ErrElevatorConfigNotExit = 900008;
  ErrorCode_ErrElevatorLocked = 900009;
  ErrorCode_ErrElevatorIsNotReverse = 900010;
  ErrorCode_ErrElevatorIsNotForward = 900011;
  ErrorCode_ErrElevatorIsNotStart = 900012;
  ErrorCode_ErrElevatorIsNotEnd = 900013;
  ErrorCode_ErrElevatorFloorError = 900014;
  ErrorCode_ErrHostRefuse = 900015;
  ErrorCode_ErrHostOffline = 900016;
  ErrorCode_ErrHostHasOnline = 900017;
  ErrorCode_ErrHostPlayerMax = 900018;
  ErrorCode_ErrHostRefuseStrangers = 900019;
  ErrorCode_ErrHostForbidJoin = 900020;
  ErrorCode_ErrHostTemporarilyForbidJoin = 900021;
  ErrorCode_ErrSlaveInBlockList = 900022;
  ErrorCode_ErrExceedJoinLevelDiff = 900023;
  ErrorCode_ErrHostNotOpenOnlineFunc = 900024;
  ErrorCode_ErrHostInOtherPlayer = 900025;
  ErrorCode_ErrHostInForbidOnlineQuest = 900026;
  ErrorCode_ErrSlaveHasOnline = 900027;
  ErrorCode_ErrSlaveInForbidOnlineQuest = 900028;
  ErrorCode_ErrSlaveNotOpenOnlineFunc = 900029;
  ErrorCode_ErrSlaveApplyRepeated = 900030;
  ErrorCode_ErrSlaveTryApplySelf = 900031;
  ErrorCode_ErrLobbyTryQuerySelf = 900032;
  ErrorCode_ErrSlaveRequestExpired = 900033;
  ErrorCode_ErrEnterringOtherScene = 900034;
  ErrorCode_ErrWaitingOtherJoin = 900035;
  ErrorCode_ErrWaitListFull = 900036;
  ErrorCode_ErrAlreayInWaitEnterList = 900037;
  ErrorCode_ErrHostNotInBigWorld = 900038;
  ErrorCode_ErrPlayerNotInBigWorld = 900039;
  ErrorCode_ErrPlayerNotInWaitList = 900040;
  ErrorCode_ErrForbidOperaInMatching = 900041;
  ErrorCode_ErrLobbyNotFoundPlayer = 900042;
  ErrorCode_ErrRoleTrailCannotOnline = 900043;
  ErrorCode_ErrHostRoleTrail = 900044;
  ErrorCode_ErrInMatchingCanNotJoinOther = 900045;
  ErrorCode_ErrInMatchCanNotBeApply = 900046;
  ErrorCode_ErrInMatchCanNotAcceptApply = 900047;
  ErrorCode_ErrSlaveInFlow = 900048;
  ErrorCode_ErrHostInFlow = 900049;
  ErrorCode_ErrAchievementNotClinet = 900050;
  ErrorCode_ErrTriggerConditionNotMet = 900051;
  ErrorCode_ErrNpcTraceNotConf = 900052;
  ErrorCode_ErrBuffProducerConfNotFound = 900053;
  ErrorCode_ErrBuffProducerHasDone = 900054;
  ErrorCode_ErrBuffConsumerConfNotFound = 900055;
  ErrorCode_ErrBuffConsumerBuffNotFound = 900056;
  ErrorCode_ErrBuffConsumerEntityNotFound = 900057;
  ErrorCode_ErrItemPosInvaild = 900058;
  ErrorCode_ErrItemIdInvaild = 900059;
  ErrorCode_ErrRouletteFuncIdInvaild = 900060;
  ErrorCode_ErrStateIsRunning = 900061;
  ErrorCode_ErrSceneEntityNotFind = 900062;
  ErrorCode_ErrActionPlayersIsEmpty = 900063;
  ErrorCode_ErrFireBulletNoLauncher = 900064;
  ErrorCode_ErrFireBulletNoTarget = 900065;
  ErrorCode_ErrTurntableConfigNotFound = 900066;
  ErrorCode_ErrTurntableActivityNotOpen = 900067;
  ErrorCode_ErrTurntableActivityIsFinish = 900068;
  ErrorCode_ErrTurntableActivityQuestNotFinish = 900069;
  ErrorCode_ErrTurntableActivityRoundConfigNotFound = 900070;
  ErrorCode_ErrEnrichmentAreaIsEmpty = 900071;
  ErrorCode_ErrEnrichmentAreaNotFind = 900072;
  ErrorCode_ErrEnrichmentAreaInCD = 900073;
  ErrorCode_ErrEnrichmentAreaInFog = 900074;
  ErrorCode_ErrEntityWalkingPoint = 900075;
  ErrorCode_ErrBuffItemConfig = 1000000;
  ErrorCode_ErrBuffItemNotShare = 1000001;
  ErrorCode_ErrBuffItemShareRoleId = 1000002;
  ErrorCode_ErrBuffItemRoleIdNotExist = 1000003;
  ErrorCode_ErrBuffItemNotEnough = 1000004;
  ErrorCode_ErrBuffItemMultiUse = 1000005;
  ErrorCode_ErrBuffItemCdLimit = 1000006;
  ErrorCode_ErrBuffItemNumZero = 1000007;
  ErrorCode_ErrBuffItemNotPlayer = 1000008;
  ErrorCode_ErrSceneItemNotExit = 1000009;
  ErrorCode_ErrSceneItemType = 1000010;
  ErrorCode_ErrSceneItemOperate = 1000011;
  ErrorCode_ErrSceneItemState = 1000012;
  ErrorCode_ErrStateEntityNoExit = 1000013;
  ErrorCode_ErrStateEntityNotTagComp = 1000014;
  ErrorCode_ErrStateEntityTypeNotExit = 1000015;
  ErrorCode_ErrStateEntityStateNotExit = 1000016;
  ErrorCode_ErrStateEntityNotConfig = 1000017;
  ErrorCode_ErrStateEntityStateType = 1000018;
  ErrorCode_ErrStateEntityStateNoChange = 1000019;
  ErrorCode_ErrStateEntitySilent = 1000020;
  ErrorCode_ErrStateEntityComplete = 1000021;
  ErrorCode_ErrStateEntityLock = 1000022;
  ErrorCode_ErrStateEntityNotBorn = 1000023;
  ErrorCode_ErrStateNameNoExit = 1000024;
  ErrorCode_ErrStateInBorn = 1000025;
  ErrorCode_ErrStateCondition = 1000026;
  ErrorCode_ErrStateNotOwner = 1000027;
  ErrorCode_ErrChangeSelfStateObjNotEntity = 1000028;
  ErrorCode_ErrFoundationNotExists = 1000029;
  ErrorCode_ErrTeleControlNotExists = 1000030;
  ErrorCode_ErrFoundationNotComponent = 1000031;
  ErrorCode_ErrFoundationActived = 1000032;
  ErrorCode_ErrFoundationUnActived = 1000033;
  ErrorCode_ErrFoundationNotMatch = 1000034;
  ErrorCode_ErrFoundationNotInRange = 1000035;
  ErrorCode_ErrFoundationNotStateId = 1000036;
  ErrorCode_ErrGravityGearNotExists = 1000037;
  ErrorCode_ErrGravityGearNotConfig = 1000038;
  ErrorCode_ErrGravityGearForbidReset = 1000039;
  ErrorCode_ErrFollowTrackEntityNoExist = 1000040;
  ErrorCode_ErrFollowTrackNotComp = 1000041;
  ErrorCode_ErrFollowTrackNotFoundationId = 1000042;
  ErrorCode_ErrFollowTrackNotFoundation = 1000043;
  ErrorCode_ErrFollowTrackActiveed = 1000044;
  ErrorCode_ErrThrowPlayerNotExit = 1000045;
  ErrorCode_ErrAnimalEntityNotExist = 1000046;
  ErrorCode_ErrNotAnimalEntity = 1000047;
  ErrorCode_ErrSneakBtObjNotExist = 1000048;
  ErrorCode_ErrSneakNodeIdNotExist = 1000049;
  ErrorCode_ErrSneakNotFailedNode = 1000050;
  ErrorCode_ErrSneakNotTime = 1000051;
  ErrorCode_ErrSneakTime = 1000052;
  ErrorCode_ErrInSneak = 1000053;
  ErrorCode_ErrNotInSneak = 1000054;
  ErrorCode_ErrBeControlledEntityNotExist = 1000055;
  ErrorCode_ErrNotBeControlledEntity = 1000056;
  ErrorCode_ErrNotBeControlledPlayer = 1000057;
  ErrorCode_ErrNotBeControlledNotPlayer = 1000058;
  ErrorCode_ErrBeControlledShowEntityNotExist = 1000059;
  ErrorCode_ErrNotBeControlledShowEntity = 1000060;
  ErrorCode_ErrNotBeControlledShowPlayer = 1000061;
  ErrorCode_ErrBeControlledShowNoChange = 1000062;
  ErrorCode_ErrGravityGearCondition = 1000063;
  ErrorCode_ErrChairEntityNoExist = 1000064;
  ErrorCode_ErrChairSitDownErr = 1000065;
  ErrorCode_ErrChairEntity = 1000066;
  ErrorCode_ErrPlayerAlreadySit = 1000067;
  ErrorCode_ErrChairNotStateConfig = 1000068;
  ErrorCode_ErrSneakBtObjIncId = 1000069;
  ErrorCode_ErrTimelineMove = 1000070;
  ErrorCode_ErrBeControlledConfig = 1000071;
  ErrorCode_ErrBeControlledThrow = 1000072;
  ErrorCode_ErrBeControlledTimeNull = 1000073;
  ErrorCode_ErrTriggerEnterActionEffective = 1000074;
  ErrorCode_ErrTriggerLeaveActionEffective = 1000075;
  ErrorCode_ErrTriggerLastActionStateError = 1000076;
  ErrorCode_GuideGroupInfoIsNull = 1100000;
  ErrorCode_GuideStateError = 1100001;
  ErrorCode_GuideConfigNotFind = 1100002;
  ErrorCode_GuideNoEnough = 1100003;
  ErrorCode_GuideIsFinish = 1100004;
  ErrorCode_GuidePerIsNotFinish = 1100005;
  ErrorCode_GuideNoCondition = 1100006;
  ErrorCode_GuideNoCurGroup = 1100007;
  ErrorCode_GuideIsServerMonitor = 1100008;
  ErrorCode_GuideNoPending = 1100009;
  ErrorCode_GuideStepRepeat = 1100010;
  ErrorCode_GuideGroupNoClient = 1100011;
  ErrorCode_GuideGroupDoing = 1100012;
  ErrorCode_GuideGroupIsNotRepeat = 1100013;
  ErrorCode_GuideTutorialConfigNotFind = 1100014;
  ErrorCode_GuideTutorialIsUnlock = 1100015;
  ErrorCode_GuideTutorialNotUnlock = 1100016;
  ErrorCode_GuideTutorialIsReceive = 1100017;
  ErrorCode_GuideTutorialAwardConfigNotFind = 1100018;
  ErrorCode_GuideTutorialAwardError = 1100019;
  ErrorCode_GuideGroupIdNoMatch = 1100020;
  ErrorCode_ErrRequestTypeNotExist = 1100021;
  ErrorCode_ErrIllustratedEntryLock = 1100022;
  ErrorCode_ErrIllustratedEntryBanUnlock = 1100023;
  ErrorCode_ErrRequestTypeMax = 1100024;
  ErrorCode_AchievementEntryNotExist = 1100025;
  ErrorCode_AchievementEntryNotFinish = 1100026;
  ErrorCode_AchievementEntryIsReceive = 1100027;
  ErrorCode_AchievementEntryNoConfig = 1100028;
  ErrorCode_AchievementEntryNotOpen = 1100029;
  ErrorCode_AchievementGroupEntryNotExist = 1100030;
  ErrorCode_AchievementGroupEntryNotFinish = 1100031;
  ErrorCode_AchievementGroupEntryIsReceive = 1100032;
  ErrorCode_AchievementGroupEntryNoConfig = 1100033;
  ErrorCode_AchievementGroupEntryNotOpen = 1100034;
  ErrorCode_SilentAreaNotConfig = 1100035;
  ErrorCode_SilentAreaNotUnlock = 1100036;
  ErrorCode_SilentAreaNotFinish = 1100037;
  ErrorCode_SilentAreaReceive = 1100038;
  ErrorCode_AchievementEntryIsFinish = 1100039;
  ErrorCode_AchievementEntryNeedCondition = 1100040;
  ErrorCode_AchievementSceneNotFind = 1100041;
  ErrorCode_BirthdayIsSetting = 1100042;
  ErrorCode_BirthdayInValid = 1100043;
  ErrorCode_RoleShowListMaxCount = 1100044;
  ErrorCode_RoleShowListHasRepeatId = 1100045;
  ErrorCode_RoleShowListHasInValidId = 1100046;
  ErrorCode_CardShowListMaxCount = 1100047;
  ErrorCode_CardShowListHasRepeatId = 1100048;
  ErrorCode_CardShowListHasInValidId = 1100049;
  ErrorCode_CardRepeatSet = 1100050;
  ErrorCode_CardIsInValidId = 1100051;
  ErrorCode_CardIsRead = 1100052;
  ErrorCode_RoleShowListEmpty = 1100053;
  ErrorCode_SettingNotFind = 1100054;
  ErrorCode_RogueRoadConfigNotFind = 1100055;
  ErrorCode_RollRogueRoomError = 1100056;
  ErrorCode_RollRogueBuffError = 1100057;
  ErrorCode_GetRogueRoomIdsError = 1100058;
  ErrorCode_GetRoguePortalEntityNotFind = 1100059;
  ErrorCode_GetRoguePortalLocationNotFind = 1100060;
  ErrorCode_HttpTimeout = 1100061;
  ErrorCode_HttpResultUndefine = 1100062;
  ErrorCode_ConvGateTimeout = 1100063;
  ErrorCode_ProtoKeyTimeout = 1100064;
  ErrorCode_LoginReqTimeout = 1100065;
  ErrorCode_EnterGameTimeout = 1100066;
  ErrorCode_ReReconvReqTimeout = 1100067;
  ErrorCode_RecvSeqNoNotHit = 1100068;
  ErrorCode_AchievementFuncNotOpen = 1100069;
  ErrorCode_RoguelikeInstComponentNotFind = 1100070;
  ErrorCode_RogueCurRoomDataIsNull = 1100071;
  ErrorCode_LevelPlayComponentNotFind = 1100072;
  ErrorCode_OpenLevelPlayFail = 1100073;
  ErrorCode_CloseLevelPlayFail = 1100074;
  ErrorCode_RogueRoomConfigNotFind = 1100075;
  ErrorCode_RogueRoomTypeNotRight = 1100076;
  ErrorCode_RogueRoomTypeNotConfig = 1100077;
  ErrorCode_RogueRoomSubLevelNotFind = 1100078;
  ErrorCode_SelectNextRoomIsValid = 1100079;
  ErrorCode_RogueGainPackageFail = 1100080;
  ErrorCode_RogueGainListIsNull = 1100081;
  ErrorCode_RogueGainIdValid = 1100082;
  ErrorCode_QulityListCountNotRight = 1100083;
  ErrorCode_RandomResultCountNotRight = 1100084;
  ErrorCode_GuaranteeRogueBuffInValid = 1100085;
  ErrorCode_RoleBuffPoolNotFind = 1100086;
  ErrorCode_NotValidBuff = 1100087;
  ErrorCode_NotValidPhantom = 1100088;
  ErrorCode_RandomPhantomFail = 1100089;
  ErrorCode_NotValidRole = 1100090;
  ErrorCode_RandomRoleFail = 1100091;
  ErrorCode_RogueRoadNotFind = 1100092;
  ErrorCode_ResultCountNotMatch = 1100093;
  ErrorCode_InValidRoomCountNotMatch = 1100094;
  ErrorCode_GuaranteeRogueRoomInValid = 1100095;
  ErrorCode_InstIdNotMatchLevelPlayId = 1100096;
  ErrorCode_GetRoomBornPositionFail = 1100097;
  ErrorCode_RoguePortalDataNotClean = 1100098;
  ErrorCode_RoguePortalRoomDataNotFind = 1100099;
  ErrorCode_RogueSelectRoomFail = 1100100;
  ErrorCode_RogueProgressDataIsEmpty = 1100101;
  ErrorCode_RogueGainTypeIsValid = 1100102;
  ErrorCode_RougeNotOpen = 1100103;
  ErrorCode_RougeInstIdIsValid = 1100104;
  ErrorCode_RogueRoleListCountNotRight = 1100105;
  ErrorCode_RogueMainRoleConfigNotFind = 1100106;
  ErrorCode_RogueGainDataDictError = 1100107;
  ErrorCode_RogueDiscountedBuffConfigNotFind = 1100108;
  ErrorCode_RogueDiscountedRoomTypeConfigNotFind = 1100109;
  ErrorCode_RogueDiscountedShopConfigNotFind = 1100110;
  ErrorCode_RogueDiscountedCalculateFail = 1100111;
  ErrorCode_RogueMoneyNotEnough = 1100112;
  ErrorCode_RougeShopRefreshTimeEmpyt = 1100113;
  ErrorCode_RougeCurRoomNotFinish = 1100114;
  ErrorCode_PlayerDataRepairErrorDebug = 1100115;
  ErrorCode_PlayerDataRepairError = 1100116;
  ErrorCode_CreateCharacterReqTimeout = 1100117;
  ErrorCode_SignActivityNotOpen = 1100118;
  ErrorCode_SignActivityNoConfig = 1100119;
  ErrorCode_SignActivityIndexValid = 1100120;
  ErrorCode_SignActivityNoData = 1100121;
  ErrorCode_SignActivityStateNotRight = 1100122;
  ErrorCode_RogueSeasonDataNull = 1100123;
  ErrorCode_RogueSeasonConfigNotFind = 1100124;
  ErrorCode_RogueTokenConfigNotFind = 1100125;
  ErrorCode_RogueTokenStatusVaild = 1100126;
  ErrorCode_RogueSeasonRewardConfigNotFind = 1100127;
  ErrorCode_RogueSeasonRewardIsReceive = 1100128;
  ErrorCode_RougeSeasonPointNotEnough = 1100129;
  ErrorCode_RougeRoomDataError = 1100130;
  ErrorCode_RogueGainDataError = 1100131;
  ErrorCode_RogueRoleIdsError = 1100132;
  ErrorCode_RogueRogueRoomRouteError = 1100133;
  ErrorCode_RogueGetCurRoomLevelPlayError = 1100134;
  ErrorCode_RogueTalentTreeConfigNotFind = 1100135;
  ErrorCode_RogueTalentTreeConditionNotMet = 1100136;
  ErrorCode_RogueTalentTreePerNodeLock = 1100137;
  ErrorCode_RogueTalentTreeNodeMaxLevel = 1100138;
  ErrorCode_RogueTalentTreeConsumeNoEnough = 1100139;
  ErrorCode_RogueRoadRandomRoleBuffError = 1100140;
  ErrorCode_ActivityFuncNotOpen = 1100141;
  ErrorCode_RogueGuideInstNotSupport = 1100142;
  ErrorCode_ErrPayReceiptCannotRefundClose = 1100143;
  ErrorCode_ErrPayReceiptRefundCloseFail = 1100144;
  ErrorCode_PayRefundOverdueBan = 1100145;
  ErrorCode_UnknowChannelId = 1100146;
  ErrorCode_LoginServerNotFind = 1100147;
  ErrorCode_OldGameNodeLogoutFail = 1100148;
  ErrorCode_LoginHandleSwitchError = 1100149;
  ErrorCode_NoAvailableLoginService = 1100150;
  ErrorCode_ServerIsClosing = 1100151;
  ErrorCode_AddPlayerRecordFail = 1100152;
  ErrorCode_FindGatewayFail = 1100153;
  ErrorCode_CommonFightRolesInfoError = 1100154;
  ErrorCode_CurRoleEntityNotFind = 1100155;
  ErrorCode_ScenePlayerInfoNotFind = 1100156;
  ErrorCode_IncrAdviceVoteError = 1100157;
  ErrorCode_InsertAdviceError = 1100158;
  ErrorCode_UpdateAdviceError = 1100159;
  ErrorCode_DeleteAdviceError = 1100160;
  ErrorCode_EntityNoInWater = 1100161;
  ErrorCode_AttributeComponentNotFind = 1100162;
  ErrorCode_TryAddItemDataFail = 1100163;
  ErrorCode_ItemConfigTypeNotRight = 1100164;
  ErrorCode_ItemLogicNotFind = 1100165;
  ErrorCode_RemoveItemLogicNotFind = 1100166;
  ErrorCode_AddItemLogicNotFind = 1100167;
  ErrorCode_AddItemFail = 1100168;
  ErrorCode_UpdatePlayerARemarkFail = 1100169;
  ErrorCode_DeleteFriendApplyFail = 1100170;
  ErrorCode_DeleteFriendshipFail = 1100171;
  ErrorCode_WorldTeamIsNull = 1100172;
  ErrorCode_TeamCountNotRight = 1100173;
  ErrorCode_AddCalabashExpFail = 1100174;
  ErrorCode_SendRequestToSdkFail = 1100175;
  ErrorCode_DirtyWordErrorCode = 1100176;
  ErrorCode_HarvestActivityNotOpen = 1100177;
  ErrorCode_HarvestActivityPointReceived = 1100178;
  ErrorCode_HarvestActivityPointNotConfig = 1100179;
  ErrorCode_HarvestActivityPointNotEnough = 1100180;
  ErrorCode_HarvestActivityLevelNoData = 1100181;
  ErrorCode_HarvestActivityLevelReceived = 1100182;
  ErrorCode_HarvestActivityLevelNotConfig = 1100183;
  ErrorCode_HarvestActivityLevelNotEnough = 1100184;
  ErrorCode_HarvestActivityLevelDiffNotConfig = 1100185;
  ErrorCode_RoguelikeEventConfigNotFind = 1100186;
  ErrorCode_RoguelikeEventIndexError = 1100187;
  ErrorCode_RoguelikeInstConfigNotFind = 1100188;
  ErrorCode_RoguelikeMainRoleError = 1100189;
  ErrorCode_RoguelikeEventIsEmpty = 1100190;
  ErrorCode_RoguelikeEventRandomError = 1100191;
  ErrorCode_RoguelikeEventRandomEmpty = 1100192;
  ErrorCode_PhantomCollectActivityNotOpen = 1100193;
  ErrorCode_PhantomCollectActivitynNotConfig = 1100194;
  ErrorCode_PhantomCollectActivitynNoData = 1100195;
  ErrorCode_PhantomCollectActivityReceived = 1100196;
  ErrorCode_HarvestInstIdInValid = 1100197;
  ErrorCode_HarvestVarNotExist = 1100198;
  ErrorCode_HarvestResultCacheNotExist = 1100199;
  ErrorCode_HarvestInstNotOpen = 1100200;
  ErrorCode_HarvestActivityLimitDataNotFind = 1100201;
  ErrorCode_HarvestDiffConfigNotFind = 1100202;
  ErrorCode_HarvestActivityDiffConfigNotFind = 1100203;
  ErrorCode_ErrIllustratedConfigNotFind = 1100204;
  ErrorCode_CharacterAlreadyCreated = 1100205;
  ErrorCode_SdkHelperInternalError = 1100206;
  ErrorCode_GameServiceControllerInternalError = 1100207;
  ErrorCode_DoGetCacheInfoInternalError = 1100208;
  ErrorCode_DoGetCacheInfosInternalError = 1100209;
  ErrorCode_DeleteFriendLoadedInternalError = 1100210;
  ErrorCode_UpdateFriendRemarkInternalError = 1100211;
  ErrorCode_CheckApplyRequestInternalError = 1100212;
  ErrorCode_OnReLoginInternalError = 1100213;
  ErrorCode_CreateCharacterRequestInternalError = 1100214;
  ErrorCode_LoginRequestInternalError = 1100215;
  ErrorCode_LoginRequestInternalError2 = 1100216;
  ErrorCode_EnterGameRequestInternalError = 1100217;
  ErrorCode_ReconnectRequestInternalError = 1100218;
  ErrorCode_ReconnectRequestInternalError2 = 1100219;
  ErrorCode_SwitchNodeInternalError = 1100220;
  ErrorCode_InnerLoginInternalError = 1100221;
  ErrorCode_AccessTokenInternalError = 1100222;
  ErrorCode_CreateCharacterInternalError = 1100223;
  ErrorCode_RogueSeasonNotValid = 1100224;
  ErrorCode_RogueCurRoleNotFind = 1100225;
  ErrorCode_RogueSeasonNotMatch = 1100226;
  ErrorCode_RogueGainLogicNotFind = 1100227;
  ErrorCode_RogueBuffConfigNotFind = 1100228;
  ErrorCode_RoguePhantomNotConfig = 1100229;
  ErrorCode_RogueRoleNotConfig = 1100230;
  ErrorCode_RoguePopularSlotConfigNotFind = 1100231;
  ErrorCode_RoguePopularCountIsMax = 1100232;
  ErrorCode_RoguePopularConfigNotFind = 1100233;
  ErrorCode_RogueRoleNotOpen = 1100234;
  ErrorCode_RogueGuideInstError = 1100235;
  ErrorCode_RogueMainRoleChange = 1100236;
  ErrorCode_RogueShopConfigNull = 1100237;
  ErrorCode_RogueGainIsSelect = 1100238;
  ErrorCode_RogueGainNoRefresh = 1100239;
  ErrorCode_RogueRefreshCostNotFind = 1100240;
  ErrorCode_RogueNotMaxLayer = 1100241;
  ErrorCode_RogueRoomSubLevelNotFind2 = 1100242;
  ErrorCode_RoguePopularSlotArgConfigNotFind = 1100243;
  ErrorCode_RogueInstSeasonNotMatch = 1100244;
  ErrorCode_RogueSeasonTalentTreeNotFind = 1100245;
  ErrorCode_RogueGainOptionsNotFind = 1100246;
  ErrorCode_RogueGainIsSell = 1100247;
  ErrorCode_RogueMiracleCreationConfNotFind = 1100248;
  ErrorCode_RogueGainPackageError = 1100249;
  ErrorCode_RogueTrialRoleIdsCountNotRight = 1100250;
  ErrorCode_RogueVarNotExist = 1100251;
  ErrorCode_RougeWhiteCatConfigNotFind = 1100252;
  ErrorCode_RougeWhiteCatNotOpen = 1100253;
  ErrorCode_RougeWhiteCatLimitedTime = 1100254;
  ErrorCode_RougeWhiteCatRewardLock = 1100255;
  ErrorCode_RougeWhiteCatRewardIsReceive = 1100256;
  ErrorCode_RougeWhiteCatRewardIndexErr = 1100257;
  ErrorCode_RougeWhiteCatInstIndexErr = 1100258;
  ErrorCode_RougeWhiteCatInstLock = 1100259;
  ErrorCode_RougeWhiteCatBossRewardIndexErr = 1100260;
  ErrorCode_RougeWhiteCatBossRewardLock = 1100261;
  ErrorCode_RougeWhiteCatBossRewardIsReceive = 1100262;
  ErrorCode_RougeWhiteCatLevelPlayIndexErr = 1100263;
  ErrorCode_RougeWhiteCatLevelPlayLock = 1100264;
  ErrorCode_RougeWhiteCatLevelPlayIsReceive = 1100265;
  ErrorCode_ResourceVersionTooLow = 1100266;
  ErrorCode_RogueLimitTimeRewardConfigNotFind = 1100267;
  ErrorCode_RogueWhiteCatLimitedTimeOut = 1100268;
  ErrorCode_RougeWhiteCatLimitedRewardLock = 1100269;
  ErrorCode_RougeWhiteCatLimitedRewardIsReceive = 1100270;
  ErrorCode_RougeWhiteCatBlackFlowerNoCount = 1100271;
  ErrorCode_RogueInstCountNotRight = 1100272;
  ErrorCode_RogueInstFightFormationNotConfig = 1100273;
  ErrorCode_RogueTrialRoleNotValid = 1100274;
  ErrorCode_RogueRoleNotValid = 1100275;
  ErrorCode_ErrorBlackFlowerEntityNotRight = 1100276;
  ErrorCode_ErrorBlackFlowerStatus = 1100277;
  ErrorCode_ErrorBlackFlowerCanNotReward = 1100278;
  ErrorCode_ErrorBlackFlowerRewardFail = 1100279;
  ErrorCode_ErrorPhantomUnlockError = 1100280;
  ErrorCode_ErrorPhantomSwitchError = 1100281;
  ErrorCode_ActivityConfigNotFind = 1100282;
  ErrorCode_ActivityNotOpen = 1100283;
  ErrorCode_DirectTrainActivityConfigNotFind = 1100284;
  ErrorCode_ActivityTypeNotFind = 1100285;
  ErrorCode_SetGlobalVarFail = 1100286;
  ErrorCode_ErrMultigame = 1100287;
  ErrorCode_RogueWeeklyCycleNoFind = 1100288;
  ErrorCode_RogueWeeklyCycleIdNotMatch = 1100289;
  ErrorCode_RogueWeeklyCycleInstIdNotMatch = 1100290;
  ErrorCode_RogueWeeklyCycleSexNotMatch = 1100291;
  ErrorCode_RogueWeeklyCycleActivityIdNotMatch = 1100292;
  ErrorCode_RogueWeeklyCycleAwardNotFind = 1100293;
  ErrorCode_RogueWeeklyCycleAwardStateNotMatch = 1100294;
  ErrorCode_RogueWeeklyInstResultFail = 1100295;
  ErrorCode_RogueWeeklyGoldNoEnough = 1100296;
  ErrorCode_HasRogueProgressCanNotChangeSex = 1100297;
  ErrorCode_RogueWeeklyWorldLevelNotMatch = 1100298;
  ErrorCode_ResourceVersionIsTooLowWithTips = 1100299;
  ErrorCode_RogueResInstIdNotMatch = 1100300;
  ErrorCode_RogueResInstGridConfigNotFind = 1100301;
  ErrorCode_RogueResInBossInst = 1100302;
  ErrorCode_RogueResCurGridIsNull = 1100303;
  ErrorCode_RogueResPathCountFail = 1100304;
  ErrorCode_RogueResPathRepeat = 1100305;
  ErrorCode_RogueResPathGridNoNear = 1100306;
  ErrorCode_RogueResPathGridNoValid = 1100307;
  ErrorCode_RogueResPathGridNoVision = 1100308;
  ErrorCode_RogueResPathGridBlock = 1100309;
  ErrorCode_RogueResPlayerBanMove = 1100310;
  ErrorCode_RogueResHasOp = 1100311;
  ErrorCode_RogueResTrialRoleNotFind = 1100312;
  ErrorCode_RogueResTrialRoleNoValid = 1100313;
  ErrorCode_RogueResThemeConfNotFind = 1100314;
  ErrorCode_RogueResCrossInstDataIsNull = 1100315;
  ErrorCode_RogueResOpEmpty = 1100316;
  ErrorCode_RogueResOpNotMatch = 1100317;
  ErrorCode_RogueResCollectionConfNotFind = 1100318;
  ErrorCode_RogueResCollectionStateErr = 1100319;
  ErrorCode_RogueResEndingAwardConfNotFind = 1100320;
  ErrorCode_RogueResEndingAwardIsReceived = 1100321;
  ErrorCode_RogueResEndingAwardNotFinish = 1100322;
  ErrorCode_RogueResTalentConfNotFind = 1100323;
  ErrorCode_RogueResTaskConfNotFind = 1100324;
  ErrorCode_RogueResTaskDatanotFind = 1100325;
  ErrorCode_RogueResTaskAwardIsReceived = 1100326;
  ErrorCode_RogueResTaskAwardNotFinish = 1100327;
  ErrorCode_RogueResEffectConfNoFind = 1100328;
  ErrorCode_RogueResOptionNoRestCount = 1100329;
  ErrorCode_RogueResOptionCantMulti = 1100330;
  ErrorCode_RogueResOptionRepeat = 1100331;
  ErrorCode_RogueResOptionCantGiveUp = 1100332;
  ErrorCode_RogueResOptionCantRefresh = 1100333;
  ErrorCode_RogueResOptionIndexNoValid = 1100334;
  ErrorCode_RogueResOptionTypeError = 1100335;
  ErrorCode_RogueResOptionIsSelect = 1100336;
  ErrorCode_RogueResCollectionIndexMax = 1100337;
  ErrorCode_RogueResCollectionDropConfigNoFind = 1100338;
  ErrorCode_RogueResNoBaseGainLogic = 1100339;
  ErrorCode_RogueResGridAwardNoConf = 1100340;
  ErrorCode_RogueResBornPositionNoConf = 1100341;
  ErrorCode_RogueResEffectExecFail = 1100342;
  ErrorCode_RogueResOptionFinish = 1100343;
  ErrorCode_RogueResOpTypeErr = 1100344;
  ErrorCode_RogueResGridEventNoConf = 1100345;
  ErrorCode_RogueResGridEventStepNoConf = 1100346;
  ErrorCode_RogueResStepOptionNoValid = 1100347;
  ErrorCode_RogueResGridEventNoData = 1100348;
  ErrorCode_RogueResSelectIndexNoValid = 1100349;
  ErrorCode_RogueResGotoNextRoomNoData = 1100350;
  ErrorCode_RogueResSelectOpNoData = 1100351;
  ErrorCode_RogueResBranchTaskNoConf = 1100352;
  ErrorCode_RogueResBranchTaskNoData = 1100353;
  ErrorCode_RogueResBranchTaskIsReceive = 1100354;
  ErrorCode_RogueResBranchTaskNoFinish = 1100355;
  ErrorCode_RogueResTokenShopPriceErr = 1100356;
  ErrorCode_RogueResTaskTypeErr = 1100357;
  ErrorCode_RogueRandomNoPoolName = 1100358;
  ErrorCode_RogueRandomNoHit = 1100359;
  ErrorCode_RogueRandomNoValidResult = 1100360;
  ErrorCode_RogueResFormationIdNoValid = 1100361;
  ErrorCode_RogueResFormationRoleCountErr = 1100362;
  ErrorCode_RogueResRandomNoShopGoods = 1100363;
  ErrorCode_RogueResRandomShopGoodsNoEnough = 1100364;
  ErrorCode_RogueResFormationRoleNoValid = 1100365;
  ErrorCode_RogueResFormationNoData = 1100366;
  ErrorCode_RogueResGainRoleNoFind = 1100367;
  ErrorCode_RogueResGainRoleLvNoConf = 1100368;
  ErrorCode_RogueResGainRoleLvNoLv = 1100369;
  ErrorCode_RogueResGainRoleNoBuffPool = 1100370;
  ErrorCode_RogueResGainRoleNoMaxlv = 1100371;
  ErrorCode_RogueResGainRoleRollEffectNoValid = 1100372;
  ErrorCode_RogueResGainRoleRollRetNoMatch = 1100373;
  ErrorCode_RogueResGainRoleShopNoConf = 1100374;
  ErrorCode_RogueResGainRoleRollEmpty = 1100375;
  ErrorCode_RogueResGainRoleBondNoValid = 1100376;
  ErrorCode_RogueResRoleBuffGuaranteeFail = 1100377;
  ErrorCode_RogueResRoleBuffNoMore = 1100378;
  ErrorCode_RogueResRoleBuffRandomFail = 1100379;
  ErrorCode_RogueRoleShopRollFail = 1100380;
  ErrorCode_RogueResGridRangeTrigger = 1100381;
  ErrorCode_RogueResCurGridTrigger = 1100382;
  ErrorCode_RogueResEventTypeErr = 1100383;
  ErrorCode_RogueResEventOpNoData = 1100384;
  ErrorCode_RogueResGridNoConf = 1100385;
  ErrorCode_RogueResEffectExceFail = 1100386;
  ErrorCode_RogueResNoInBattle = 1100387;
  ErrorCode_RogueResStepCondLock = 1100388;
  ErrorCode_RogueResGridEventOpNotFind = 1100389;
  ErrorCode_RogueNoLastInstData = 1100390;
  ErrorCode_RogueNoRollBuffBondLinkOp = 1100391;
  ErrorCode_RogueTokenCantRepeat = 1100392;
  ErrorCode_RogueFailCountMax = 1100393;
  ErrorCode_RogueResRoleMaxLv = 1100394;
  ErrorCode_RogueResPerInstNoPass = 1100395;
  ErrorCode_RogueResCreateInstCacheErr = 1100396;
  ErrorCode_LordGymRepeatChallenge = 1100397;
  ErrorCode_ErrChatNotFriendNorOnline = 1200000;
  ErrorCode_ErrChatContentFilterFailed = 1200001;
  ErrorCode_ErrChatLockState = 1200002;
  ErrorCode_ErrChatEmojiNotValid = 1200003;
  ErrorCode_ErrChatSendTooFast = 1200004;
  ErrorCode_ErrChatMuteNotValidId = 1200005;
  ErrorCode_ErrBanChatDefault = 1200006;
  ErrorCode_ErrRoleQuestFuncNotOpen = 1200007;
  ErrorCode_ErrRoleQuestMaxCount = 1200008;
  ErrorCode_ErrRoleQuestUnlockPointNotEnough = 1200009;
  ErrorCode_ErrDailyQuestNotFoundArea = 1200010;
  ErrorCode_ErrDailyQuestNotFoundInfluence = 1200011;
  ErrorCode_ErrDailyQuestRewardAlreadyGet = 1200012;
  ErrorCode_ErrDailyQuestDataError = 1200013;
  ErrorCode_ErrDailyQuestCantGetReward = 1200014;
  ErrorCode_ErrEntityBuffProducerStateError = 1200015;
  ErrorCode_ErrEntityBuffProducerNotFound = 1200016;
  ErrorCode_ErrVoiceRemainChangeRoleNotInFormation = 1200017;
  ErrorCode_ErrVoiceRemainChangeRoleNotAlive = 1200018;
  ErrorCode_ErrApplyEffectFail = 1300000;
  ErrorCode_ErrOutofBattleTargetNotMonster = 1300001;
  ErrorCode_ErrMonsterBoomEntityNotExists = 1300002;
  ErrorCode_ErrMonsterBoomNotMonster = 1300003;
  ErrorCode_ErrMonsterBoomIsDead = 1300004;
  ErrorCode_ErrAnimationStateSpecialFuncException = 1300005;
  ErrorCode_ErrPayConfigNotFound = 1400000;
  ErrorCode_ErrPayCreateReceiptFail = 1400001;
  ErrorCode_ErrPayReceiptNotFound = 1400002;
  ErrorCode_ErrPayReceiptPlayerIdUnMatch = 1400003;
  ErrorCode_ErrPayReceiptCannotDealClose = 1400004;
  ErrorCode_ErrPayReceiptDealCloseFail = 1400005;
  ErrorCode_ErrPayNotEnable = 1400006;
  ErrorCode_ErrPayDataChanged = 1400007;
  ErrorCode_ErrPayUpdateReceiptFail = 1400008;
  ErrorCode_ErrGachaConfigNotFound = 1400009;
  ErrorCode_ErrGachaRuleGroupConfigNotFound = 1400010;
  ErrorCode_ErrGachaRulesNotFound = 1400011;
  ErrorCode_ErrGachaTypeKnowns = 1400012;
  ErrorCode_ErrGachaDailyTimesLimit = 1400013;
  ErrorCode_ErrGachaTotalTimesLimit = 1400014;
  ErrorCode_ErrGachaDailyTotalTimesLimit = 1400015;
  ErrorCode_ErrGachaIsNotOpen = 1400016;
  ErrorCode_ErrGachaIsNotInOpenTime = 1400017;
  ErrorCode_ErrGachaFuncIsNotOpen = 1400018;
  ErrorCode_ErrItemExchageConfigNotFound = 1400019;
  ErrorCode_ErrItemExchageDailyTimesLimit = 1400020;
  ErrorCode_ErrItemExchangeTotalTimesLimit = 1400021;
  ErrorCode_ErrGachaLimitNotFound = 1400022;
  ErrorCode_ErrGachaLimitsEmpty = 1400023;
  ErrorCode_ErrTextServerTimeout = 1400024;
  ErrorCode_ErrTextServerResFail = 1400025;
  ErrorCode_ErrTextServerResEmpty = 1400026;
  ErrorCode_ErrTextServerResException = 1400027;
  ErrorCode_ErrItemExchageParamError = 1400028;
  ErrorCode_ErrBattlePassFuncIsNotOpen = 1400029;
  ErrorCode_ErrPayShopFuncIsNotOpen = 1400030;
  ErrorCode_ErrGachaPoolConfigNotFound = 1400031;
  ErrorCode_ErrGachaPoolIsNotOpen = 1400032;
  ErrorCode_ErrGachaPoolIsNotInOpenTime = 1400033;
  ErrorCode_ErrGachaPoolLimitNotFound = 1400034;
  ErrorCode_ErrGachaPoolNotBelongToGacha = 1400035;
  ErrorCode_ErrGachaUsePoolIdNotSet = 1400036;
  ErrorCode_ErrGachaTimesNonsupport = 1400037;
  ErrorCode_ErrGachaFrontRuleGroupNotFinish = 1400038;
  ErrorCode_ErrGachaRuleGroupFinish = 1400039;
  ErrorCode_ErrPayGiftBuyLimit = 1400040;
  ErrorCode_ErrPayGiftTypeUnknown = 1400041;
  ErrorCode_ErrPayGiftNotInSellTime = 1400042;
  ErrorCode_ErrBattlePassBuyLevelLimit = 1400043;
  ErrorCode_ErrBattlePassBuyLevelError = 1400044;
  ErrorCode_ErrJsFileNotFound = 1400045;
  ErrorCode_ErrPayReceiptIsRefunded = 1400046;
  ErrorCode_ErrPayReceiptIsNotPay = 1400047;
  ErrorCode_ErrPayReceiptRefundFail = 1400048;
  ErrorCode_ErrPayGiftLocked = 1400049;
  ErrorCode_ErrPayGiftBuyConditionLimit = 1400050;
  ErrorCode_ErrMapMarkConfigIdNotExist = 1400051;
  ErrorCode_ErrTreasureSlotMarkNotExist = 1400052;
  ErrorCode_ErrTreasureBoxMarkNotExist = 1400053;
  ErrorCode_ErrTreasureSlotMarkExist = 1400054;
  ErrorCode_ErrMapMarkTypeNotCustom = 1400055;
  ErrorCode_ErrPayShopIsNotOpen = 1400056;
  ErrorCode_ErrConsumptiveActivityNotOpen = 1400057;
  ErrorCode_ErrConsumptiveTaskNotFound = 1400058;
  ErrorCode_ErrConsumptiveTaskNotFinish = 1400059;
  ErrorCode_ErrConsumptiveTaskRewarded = 1400060;
  ErrorCode_ErrConsumptiveActivityNotFound = 1400061;
  ErrorCode_ErrPayGiftPersonalNoPermission = 1400062;
  ErrorCode_ErrPayGiftPersonalPermissionExpired = 1400063;
  ErrorCode_ErrPayGiftNotPersonal = 1400064;
  ErrorCode_ErrPayGiftPersonalPermissionExist = 1400065;
  ErrorCode_ErrInfoDisplayId = 1500000;
  ErrorCode_ErrItemAlreadyInCd = 1500001;
  ErrorCode_ErrCantFinAdventureConfig = 1500002;
  ErrorCode_ErrAdventureRewardReceived = 1500003;
  ErrorCode_ErrAdventureTaskCache = 1500004;
  ErrorCode_ErrAdventureState = 1500005;
  ErrorCode_ErrAdventureRewardOrder = 1500006;
  ErrorCode_ErrAdventureChapterState = 1500007;
  ErrorCode_ErrCantDetectRepeat = 1500008;
  ErrorCode_ErrNotInCurrentFollowList = 1500009;
  ErrorCode_ErrCantDetectOtherDetectionType = 1500010;
  ErrorCode_ErrNotSelectCurrentDetectionId = 1500011;
  ErrorCode_ErrDetectionConfigNotFound = 1500012;
  ErrorCode_ErrDetectionListCantBeEmpty = 1500013;
  ErrorCode_ErrCantFindAnyDetectionTarget = 1500014;
  ErrorCode_ErrCantFindTurntableComponentEntity = 1500015;
  ErrorCode_ErrHaveNoTurntableControlComponent = 1500016;
  ErrorCode_ErrCantFindLevitationMagnetComponentEntity = 1500017;
  ErrorCode_ErrHaveNoLevitaionMagnetComponent = 1500018;
  ErrorCode_ErrCantFindBoardEntity = 1500019;
  ErrorCode_ErrCantFindPlacementEntity = 1500020;
  ErrorCode_ErrHaveNoPlacementComponent = 1500021;
  ErrorCode_ErrCantFindBoardEntityComponent = 1500022;
  ErrorCode_ErrBoardHaveNoAnyPlacement = 1500023;
  ErrorCode_ErrBoardNotActiveAllGrid = 1500024;
  ErrorCode_ErrNeedBeControlledBefore = 1500025;
  ErrorCode_ErrPlaceFailOfAlreadyOnBoard = 1500026;
  ErrorCode_ErrInvalidBoardPosition = 1500027;
  ErrorCode_ErrNeedRemoveControlRelation = 1500028;
  ErrorCode_ErrNotOccupyOnBoard = 1500029;
  ErrorCode_ErrHaveNoFillRule = 1500030;
  ErrorCode_ErrGridPosAlreadyOccupied = 1500031;
  ErrorCode_ErrHaveNoJigsawFoundationConfig = 1500032;
  ErrorCode_ErrInvalidGridPos = 1500033;
  ErrorCode_ErrGridPosAlreadyActive = 1500034;
  ErrorCode_ErrCantPlaceItemOnBoard = 1500035;
  ErrorCode_ErrNeedJigsawFoundationComponentWhenBeControlled = 1500036;
  ErrorCode_ErrHaveNoBoardComponentConfig = 1500037;
  ErrorCode_ErrNeedJigsawItemComponentWhenBeControlled = 1500038;
  ErrorCode_ErrCantFindOriginBoardEntity = 1500039;
  ErrorCode_ErrDistanceNotInRangeBetweenEntity = 1500040;
  ErrorCode_ErrJigsawFoundationIsAlreadySilent = 1500041;
  ErrorCode_ErrCrystalEntityNotFound = 1500042;
  ErrorCode_ErrGachaBoardEntityNotFound = 1500043;
  ErrorCode_ErrNotCrystalEntity = 1500044;
  ErrorCode_ErrNotGachaFoundationEntity = 1500045;
  ErrorCode_ErrGachaHoleIsFull = 1500046;
  ErrorCode_ErrJigsawItemSilent = 1500047;
  ErrorCode_ErrThrowDamageConfigNotExists = 1500048;
  ErrorCode_ErrThrowDamageComponetNotExists = 1500049;
  ErrorCode_ErrEggNotMatchEggFoundation = 1500050;
  ErrorCode_ProgressBarEntityNotFound = 1500051;
  ErrorCode_NotProgressBarEntity = 1500052;
  ErrorCode_ProgressBarIsSilent = 1500053;
  ErrorCode_ScenePlayerInfoNotFound = 1500054;
  ErrorCode_PlayerNotInAnyScene = 1500055;
  ErrorCode_TeleportNotInValidDistance = 1500056;
  ErrorCode_AddMapMarkInfoLackOfTeleportParam = 1500057;
  ErrorCode_TemporaryTeleportNotExists = 1500058;
  ErrorCode_ErrNotHostPlayer = 1500059;
  ErrorCode_ErrMarkIdNotExists = 1500060;
  ErrorCode_ErrCantUpdateTemporaryTeleportMarkInfo = 1500061;
  ErrorCode_NotHostCantAddTemporaty = 1500062;
  ErrorCode_TemporaryTeleportPosIsNotWalkable = 1500063;
  ErrorCode_BadTemporaryTeleportConfig = 1500064;
  ErrorCode_HaveNoTemporaryTeleportComponent = 1500065;
  ErrorCode_ErrCantDetectAtInvalidPoint = 1500066;
  ErrorCode_ErrNotDetectionTreasureBoxBefore = 1500067;
  ErrorCode_ErrJigsawFoundationIsCompleteCantModifyGridState = 1500068;
  ErrorCode_GridIsActiveCantSwitchState = 1500069;
  ErrorCode_GridIsOccupiedCantSwitchState = 1500070;
  ErrorCode_ErrHaveNoBaseInfoComponent = 1500071;
  ErrorCode_ErrHaveNoParentEntity = 1500072;
  ErrorCode_NotRelationEntity = 1500073;
  ErrorCode_ErrLevelPlayNotRunning = 1500074;
  ErrorCode_ErrStateCantChangeWhenLifeCycleDestroy = 1500075;
  ErrorCode_ErrRangeEntityIdNotFoundWhenForbidTempTeleport = 1500076;
  ErrorCode_TemporaryTeleportIsForbidden = 1500077;
  ErrorCode_ErrGravityGearIsComplete = 1500078;
  ErrorCode_ErrInvalidRoleWhenUpdatePassiveSkill = 1500079;
  ErrorCode_ErrInvalidRolePassiveSkillId = 1500080;
  ErrorCode_ErrPassiveSkillNotAddBuff = 1500081;
  ErrorCode_ErrPassiveSkillCantSpecifyBuff = 1500082;
  ErrorCode_ErrPassiveSkillAddBuffFail = 1500083;
  ErrorCode_ErrPassiveSkillAddBulletFail = 1500084;
  ErrorCode_ErrBuffCreatePassiveSkillFail = 1500085;
  ErrorCode_ErrInvalidPreContext = 1500086;
  ErrorCode_ErrBadPassiveSkillId = 1500087;
  ErrorCode_ErrPassiveSkillComponentNotFound = 1500088;
  ErrorCode_ErrRepeatePassiveSkill = 1500089;
  ErrorCode_ErrBadPassiveSkillTriggerType = 1500090;
  ErrorCode_ErrAddPassiveSkillFailOfEntityNotFound = 1500091;
  ErrorCode_ErrEntityNotClientControlWhenAddPassiveSkill = 1500092;
  ErrorCode_ErrEntityNotClientControlWhenRemovePassiveSkill = 1500093;
  ErrorCode_ErrPassiveSkillNotFoundWhenRemovePassiveSkill = 1500094;
  ErrorCode_ErrRepeatedBattleContext = 1500095;
  ErrorCode_ErrPassiveSkillAddSkillFail = 1500096;
  ErrorCode_ErrCombatSendPackAbnormal = 1500097;
  ErrorCode_ErrContextCheckFail = 1500098;
  ErrorCode_ErrFsmComponentNotFound = 1500099;
  ErrorCode_ErrFsmCreateContextFail = 1500100;
  ErrorCode_ErrFsmStateBehaviorPreMessageCantBeZero = 1500101;
  ErrorCode_ErrFsmBehaviorCheckBattleContextFail = 1500102;
  ErrorCode_ErrFsmPlayMontageLackPreMessage = 1500103;
  ErrorCode_ErrFsmPlayMontageCheckContextFail = 1500104;
  ErrorCode_ErrFsmPlayMontageConfigCheckFail = 1500105;
  ErrorCode_ErrSkillFlowNotExist = 1500106;
  ErrorCode_ErrGetReportDataOverLimit = 1500107;
  ErrorCode_ErrGetReportDataTooFast = 1500108;
  ErrorCode_ErrNotInAnyScene = 1500109;
  ErrorCode_ErrAceLogDataNotFound = 1500110;
  ErrorCode_ErrAceLogDataRepeatReport = 1500111;
  ErrorCode_ErrAceInvalidLogId = 1500112;
  ErrorCode_ErrAceSceneGlobalObjNotFound = 1500113;
  ErrorCode_ErrAceBadParam = 1500114;
  ErrorCode_ErrS2CConfirmIdNotExists = 1500115;
  ErrorCode_ErrPassiveSkillConfigNotFound = 1500116;
  ErrorCode_ErrNotBehaviorController = 1500117;
  ErrorCode_ErrPlayMontageFail = 1500118;
  ErrorCode_ErrFightDataInConsistent = 1500119;
  ErrorCode_ErrNotInAoiSight = 1500120;
  ErrorCode_ErrPassiveSkillNotOwner = 1500121;
  ErrorCode_ErrReportStartFirstly = 1500122;
  ErrorCode_ErrBattleEntityNotFound = 1500123;
  ErrorCode_ErrBattleCampNotDefined = 1500124;
  ErrorCode_ErrOtherInternalError = 1500125;
  ErrorCode_ErrHaventBattleComponent = 1500126;
  ErrorCode_ErrLackCombinePartInfoParam = 1500127;
  ErrorCode_ErrCombinerEntityNotExists = 1500128;
  ErrorCode_ErrTargetEntityNotExists = 1500129;
  ErrorCode_ErrTargetPartNotExists = 1500130;
  ErrorCode_ErrCombineComponentNotExists = 1500131;
  ErrorCode_ErrAlreadyCombineToOtherEntity = 1500132;
  ErrorCode_ErrLackCombinerOffsetPos = 1500133;
  ErrorCode_ErrLackCombinerOffsetRotate = 1500134;
  ErrorCode_ErrCombineEntityNotFound = 1500135;
  ErrorCode_ErrDissolveCheckBattleContextFail = 1500136;
  ErrorCode_ErrRepeatedRole = 1500137;
  ErrorCode_ErrNotStateMachineBehavior = 1500138;
  ErrorCode_ErrDiscardMsgWhenChangeSceneMultiMode = 1500140;
  ErrorCode_ErrMayOccurDbAbnormal = 1500139;
  ErrorCode_ErrEntityLivingStatusNotifyCheckFsmPlayMontageOfFsmGroupConfigNotExists = 1500141;
  ErrorCode_ErrEntityLivingStatusNotifyCheckFsmPlayMontageOfConfigNotExists = 1500142;
  ErrorCode_ErrEntityLivingStatusNotifyCheckFsmPlayMontageFail = 1500143;
  ErrorCode_ErrFsmActionCheckFsmPlayMontageFail = 1500144;
  ErrorCode_ErrFsmActionCheckSkillFail = 1500145;
  ErrorCode_ErrFsmActionCheckBufflFail = 1500146;
  ErrorCode_ErrFsmPlayMontageCheckAnParamError = 1500147;
  ErrorCode_ErrFsmPlayMontageCheckAnMontageConfigNotFound = 1500148;
  ErrorCode_ErrFsmPlayMontageCheckAnMontageFail = 1500149;
  ErrorCode_ErrMontageConfigNotFound = 1500150;
  ErrorCode_ErrANConfigNotFound = 1500151;
  ErrorCode_ErrBulletConfigNotFound = 1500152;
  ErrorCode_ErrFsmVersion = 1500153;
  ErrorCode_ErrUpdateFightRoleRepeated = 1500154;
  ErrorCode_ErrCombatSkillGAHandleGetEntityFailed = 1600000;
  ErrorCode_ErrCombatMaterialHandleGetEntityFailed = 1600001;
  ErrorCode_ErrCombatParticleHandleGetEntityFailed = 1600002;
  ErrorCode_ErrCombatPartLifeChangeEntityNotExisted = 1600003;
  ErrorCode_ErrCombatCreateBulletTargetNotExisted = 1600004;
  ErrorCode_ErrCombatDeleteBulletTargetNotExisted = 1600005;
  ErrorCode_ErrCombatDeleteBulletGetEntityFailed = 1600006;
  ErrorCode_ErrCombatBulletTargetNoExist = 1600007;
  ErrorCode_ErrPartEntityNotExisted = 1600008;
  ErrorCode_ErrNoAiControlRights = 1600009;
  ErrorCode_ErrAiHateComponent = 1600010;
  ErrorCode_ErrSummonerPlayerControl = 1600011;
  ErrorCode_ErrConfDamageNotFound = 1600012;
  ErrorCode_ErrProcessDamageFailed = 1600013;
  ErrorCode_ErrInjuryFreeLandingTag = 1600014;
  ErrorCode_ErrNotFindActiveGameplayEffect = 1600015;
  ErrorCode_NotClientControlBuff = 1600016;
  ErrorCode_ErrBuffNoEffectConf = 1600017;
  ErrorCode_ErrBuffCannotCreateBullet = 1600018;
  ErrorCode_ErrBuffCannotCreateBuff = 1600019;
  ErrorCode_ErrNoBuffConf = 1600020;
  ErrorCode_ErrStoppedAi = 1600021;
  ErrorCode_ErrEntityIsNotAlive = 1600022;
  ErrorCode_ErrSummonCannotSwitchAiControl = 1600023;
  ErrorCode_ErrAiControlNotChange = 1600024;
  ErrorCode_ErrPlayerCannotControlEntity = 1600025;
  ErrorCode_ErrNotFoundBuffEffect = 1600026;
  ErrorCode_ErrBuffEffectAuthority = 1600027;
  ErrorCode_ErrConcomitantDestroy = 1600028;
  ErrorCode_ErrPlayerFollowersComponent = 1600029;
  ErrorCode_ErrBuffComponentNotExist = 1600030;
  ErrorCode_ErrOrderApplyBuffFailed = 1600031;
  ErrorCode_ErrPlayerBuff = 1600032;
  ErrorCode_ErrEntityFsmMachineNotExist = 1700000;
  ErrorCode_ErrEntityFsmStateIncorrect = 1700001;
  ErrorCode_ErrIsNotAiControler = 1700002;
  ErrorCode_ErrIEntityFsmCantTransit = 1700003;
  ErrorCode_ErrIEntityFsmTransitCondition = 1700004;
  ErrorCode_ErrIEntityFsmTransitToState = 1700005;
  ErrorCode_ErrIEntityFsmConfirmNotExist = 1700006;
  ErrorCode_ErrIEntityFsmConfirmNotWait = 1700007;
  ErrorCode_ErrITest = 1700008;
  ErrorCode_ErrITest1 = 1700009;
  ErrorCode_ErrITest2 = 1700010;
  ErrorCode_ErrIEntityFsmCondCantPass = 1700011;
  ErrorCode_ErrIEntityFsmActionParamType = 1700012;
  ErrorCode_ErrIEntityFsmActionParam = 1700013;
  ErrorCode_ErrIEntityFsmActionExecuted = 1700014;
  ErrorCode_ErrIEntityFsmActionNotMatchState = 1700015;
  ErrorCode_ErrSkillNotExecuting = 1700016;
  ErrorCode_ErrExecuteSkillNotMatch = 1700017;
  ErrorCode_ErrBlueprintPinNotSupport = 1700018;
  ErrorCode_ErrBlueprintPinNotMontage = 1700019;
  ErrorCode_ErrBlueprintPinMontageIndex = 1700020;
  ErrorCode_ErrConfSkillNotExist = 1700021;
  ErrorCode_ErrSkillGANotExist = 1700022;
  ErrorCode_ErrSkillGAHaveNoBuff = 1700023;
  ErrorCode_ErrSkillGAHaveNoBuffId = 1700024;
  ErrorCode_ErrSkillGAHaveNoBullet = 1700025;
  ErrorCode_ErrSkillGAHaveNoBulletId = 1700026;
  ErrorCode_ErrMontageNotMatchSkill = 1700027;
  ErrorCode_ErrMontageIndexError = 1700028;
  ErrorCode_ErrVisiionSkillNotEquip = 1700029;
  ErrorCode_ErrSkillCD = 1700030;
  ErrorCode_ErrHaveNoBattleContext = 1700031;
  ErrorCode_ErrContextFsmActionOnce = 1700032;
  ErrorCode_ErrPlayMontageButNoSkill = 1700033;
  ErrorCode_ErrMontageNotExist = 1700034;
  ErrorCode_ErrMontageNotContainBuff = 1700035;
  ErrorCode_ErrMontageNotContainBullet = 1700036;
  ErrorCode_ErrMontageCantBring = 1700037;
  ErrorCode_ErrSkillInfoParamError = 1700038;
  ErrorCode_ErrNoWorldTeam = 1800000;
  ErrorCode_ErrWorldTeamNoMember = 1800001;
  ErrorCode_ErrNoHostIs = 1800002;
  ErrorCode_ErrNoInstId = 1800003;
  ErrorCode_ErrNoTeamInfo = 1800004;
  ErrorCode_ErrHostNoTeamInfo = 1800005;
  ErrorCode_ErrHasInMatchTeam = 1800006;
  ErrorCode_ErrNotInMatchTeam = 1800007;
  ErrorCode_ErrHostIsParam = 1800008;
  ErrorCode_ErrMatchModeIParam = 1800009;
  ErrorCode_ErrMatchTeamFull = 1800010;
  ErrorCode_ErrLocalTeamCanNotOpt = 1800011;
  ErrorCode_ErrHostInLocalTeam = 1800012;
  ErrorCode_ErrNoMatchNodeId = 1800013;
  ErrorCode_ErrPlayerSceneIsNull = 1800014;
  ErrorCode_ErrPlayerSceneRolesNull = 1800015;
  ErrorCode_ErrInvalidMatchState = 1800016;
  ErrorCode_ErrRepeatedMatchState = 1800017;
  ErrorCode_ErrApplyrPlayerInMatchNotEnterMatchTeam = 1800018;
  ErrorCode_ErrOtherVersionLowNoOperate = 1800019;
  ErrorCode_ErrPlayerVersionLowNeedUpdate = 1800020;
  ErrorCode_ErrMultiGameModeNoWorldLevelDown = 1800021;
  ErrorCode_ErrMultiGameModeNoWorldLevelRegain = 1800022;
  ErrorCode_ErrOtherHasOnline = 1800023;
  ErrorCode_SwitchRoleNotInCurrentFormation = 1800024;
  ErrorCode_ErrNoChangeRoles = 1800025;
  ErrorCode_ErrExploreSkillPullGiantMultiGame = 1800026;
  ErrorCode_ErrExploreSkillPullGiantNotExist = 1800027;
  ErrorCode_ErrHttpRpcParam = 1800028;
  ErrorCode_ErrPlayerNotInGameNode = 1800029;
  ErrorCode_ErrApplyJoinPlayerCurRoleIsDead = 1800030;
  ErrorCode_ErrPlayerCurRoleIsDeadNoJoin = 1800031;
  ErrorCode_ErrPlayerCurRoleIsDead = 1800032;
  ErrorCode_ErrSwitchMultiverse = 1800033;
  ErrorCode_ErrSwitchNode = 1800034;
  ErrorCode_ErrMatchConfirmPlayerDead = 1800035;
  ErrorCode_ErrCheckPublicResourceVersionLower = 1800036;
  ErrorCode_ErrCheckPublicResourceVersionHigher = 1800037;
  ErrorCode_ErrCheckPublicResourceClientVersionErr = 1800038;
  ErrorCode_ErrCheckPublicResourceServerVersionErr = 1800039;
  ErrorCode_ErrCheckPublicResourceClientVersionParamErr = 1800040;
  ErrorCode_ErrCheckClientVersionNeedUpdate = 1800041;
  ErrorCode_ErrBranchNameNotMatch = 1800042;
  ErrorCode_ErrMatchRpcAlready = 1800043;
  ErrorCode_ErrOtherPlayerEnterHost = 1800044;
  ErrorCode_ErrPlayerEnterHost = 1800045;
  ErrorCode_ErrLevelPlayChangeSprotModeInMutile = 1800046;
  ErrorCode_ErrMatchingNotInvite = 1800047;
  ErrorCode_ErrEnableFunctionFB = 1800048;
  ErrorCode_ErrMatchSelectTrialRole = 1800049;
  ErrorCode_ErrNoFindLastBigScene = 1800050;
  ErrorCode_ErrExploreSkillCustomMultiGame = 1800051;
  ErrorCode_ErrExploreSkillCustomNotExist = 1800052;
  ErrorCode_ErrMatchInviteMemberDead = 1800053;
  ErrorCode_ErrMatchAcceptInviteMemberDead = 1800054;
  ErrorCode_ErrNoFishBoat = 1800055;
  ErrorCode_ErrTemplateNotExists = 1800056;
  ErrorCode_ErrDisableSubLevels = 1800058;
  ErrorCode_ErrSubLevelsClientNoPermission = 1800059;
  ErrorCode_ErrExploreSkillCustomNoActions = 1800057;
  ErrorCode_ErrMatchClientVersion = 1800060;
  ErrorCode_ErrCurNodeIsTainted = 1800061;
  ErrorCode_ErrTeamMateNodeIsTainted = 1800062;
  ErrorCode_ErrMapFuctionNotOpen = 1800063;
  ErrorCode_ErrCalabashLevelRequest = 1900000;
  ErrorCode_ErrCalabashLevelRewardDone = 1900001;
  ErrorCode_ErrCalabashLevelConfig = 1900002;
  ErrorCode_ErrSkillTreeActiveConsume = 1900003;
  ErrorCode_ErrLoadFriendData = 1900004;
  ErrorCode_ErrNoLoadPrivateChatData = 1900005;
  ErrorCode_ErrNotInWolrd = 1900006;
  ErrorCode_ErrNotInGround = 1900007;
  ErrorCode_ErrInFighting = 1900008;
  ErrorCode_ErrNotHaveCountryAccess = 1900009;
  ErrorCode_ErrSkillIsEffect = 1900010;
  ErrorCode_ErrNoSoundBox = 1900011;
  ErrorCode_ErrConsumeNotEnough = 1900012;
  ErrorCode_ErrExploreSkillCountLimit = 1900013;
  ErrorCode_ErrLegalAreaNoTreasureBox = 1900014;
  ErrorCode_ErrTreasureBoxAllActive = 1900015;
  ErrorCode_ExploreProgressNoCountry = 1900016;
  ErrorCode_ExploreProgressNoScoreCfg = 1900017;
  ErrorCode_ExploreProgressLackProgress = 1900018;
  ErrorCode_ExploreProgressRewardDone = 1900019;
  ErrorCode_ExploreProgressNoArea = 1900020;
  ErrorCode_ExploreToolNotConfirm = 1900021;
  ErrorCode_ExploreToolNotOpen = 1900022;
  ErrorCode_ErrTreasureBoxPlaceFail = 1900023;
  ErrorCode_ErrTreasureBoxData = 1900024;
  ErrorCode_ErrPayShopBuyCondition = 1900025;
  ErrorCode_ErrGatherActivityData = 1900026;
  ErrorCode_ErrGatherTaskNoFinish = 1900027;
  ErrorCode_ErrHadGatherReward = 1900028;
  ErrorCode_ErrHadGetSharedReward = 1900029;
  ErrorCode_ErrSharedPlat = 1900030;
  ErrorCode_ErrTowerTargetComplete = 1900031;
  ErrorCode_ErrTowerGuideRewardHad = 1900032;
  ErrorCode_ErrTowerGuideNoOpen = 1900033;
  ErrorCode_ErrTowerGuideConfig = 1900034;
  ErrorCode_ErrNewBieCourseConfig = 1900035;
  ErrorCode_ErrNewBieCourseRewardHad = 1900036;
  ErrorCode_ErrNewBieCourseLevel = 1900037;
  ErrorCode_ErrDetectionTargetSilence = 1900038;
  ErrorCode_ErrRoleTrialNotInit = 1900039;
  ErrorCode_ErrRoleTrialNoFinish = 1900040;
  ErrorCode_ErrRoleTrialReward = 1900041;
  ErrorCode_ErrRoleTrialRewardDone = 1900042;
  ErrorCode_ErrAdventureTaskReward = 1900043;
  ErrorCode_ErrChapterReward = 1900044;
  ErrorCode_ErrSilentFirstPassStatus = 1900045;
  ErrorCode_ErrSilentFirstPassReward = 1900046;
  ErrorCode_ErrPayShopEchoRole = 1900047;
  ErrorCode_ErrPayShopEchoItemOver = 1900048;
  ErrorCode_ErrDailyAdventureActivityInit = 1900049;
  ErrorCode_ErrDailyAdventureActivityPtEnough = 1900050;
  ErrorCode_ErrDailyAdventureActivityRewardDone = 1900051;
  ErrorCode_ErrDailyAdventureActivityRewardTake = 1900052;
  ErrorCode_ErrDailyAdventureActivityTaskDone = 1900053;
  ErrorCode_ErrRoleTrialTimeOut = 1900054;
  ErrorCode_ErrFriendRemarkNull = 1900055;
  ErrorCode_ErrTrackMoonRoleUnLock = 1900056;
  ErrorCode_ErrTrackMoonTrigger = 1900057;
  ErrorCode_ErrTrackMoonBuildingUnLock = 1900058;
  ErrorCode_ErrTrackMoonBuildingCurve = 1900059;
  ErrorCode_ErrTrackMoonBuildingLock = 1900060;
  ErrorCode_ErrMoonEntrustCfg = 1900061;
  ErrorCode_ErrMoonRoleCfg = 1900062;
  ErrorCode_ErrMoonRoleTrailCurve = 1900063;
  ErrorCode_ErrMoonBuildingCfg = 1900064;
  ErrorCode_ErrMoonItemConsume = 1900065;
  ErrorCode_ErrDirtyWordDeserialize = 1900066;
  ErrorCode_ErrMoonTargetNoFinish = 1900067;
  ErrorCode_ErrMoonActivityReward = 1900068;
  ErrorCode_ErrMoonActivityOpen = 1900069;
  ErrorCode_ErrCircumDoReward = 1900070;
  ErrorCode_ErrRetrunRewardCfg = 1900071;
  ErrorCode_ErrRetrunRewardLevel = 1900072;
  ErrorCode_ErrRetrunHaddone = 1900073;
  ErrorCode_ErrSignRewardCfg = 1900074;
  ErrorCode_ErrCircumSignHadRwd = 1900075;
  ErrorCode_ErrCircumNoSign = 1900076;
  ErrorCode_ErrScoreRewardCfg = 1900077;
  ErrorCode_ErrCircumScoreHadRwd = 1900078;
  ErrorCode_ErrCircumScoreLack = 1900079;
  ErrorCode_ErrCircumTaskNoFinish = 1900080;
  ErrorCode_LoginServiceInvalidToken = 1900081;
  ErrorCode_LoginFusing = 1900082;
  ErrorCode_LoginRateLimiterRejected = 1900083;
  ErrorCode_LoginTimeoutRejected = 1900084;
  ErrorCode_AccountInputErr = 1900085;
  ErrorCode_DevInvalidLoginType = 1900086;
  ErrorCode_GARInvalidLoginType = 1900087;
  ErrorCode_GARDevInvalidLoginType = 1900088;
  ErrorCode_SdkserverTimeOut = 1900089;
  ErrorCode_ReconnectInvalidOperation = 1900090;
  ErrorCode_PbMessageAppVersionNotMatch = 1900091;
  ErrorCode_ErrPluginReconnectIpWhiteList = 1900092;
  ErrorCode_NotInUserIdWhiteListWithChannel = 1900093;
  ErrorCode_ErrPluginReconnectChannelWhiteList = 1900094;
  ErrorCode_PluginPlayerLoggingIn = 1900095;
  ErrorCode_LoginFusing2 = 1900096;
  ErrorCode_SoundBoxExploreFull = 1900097;
  ErrorCode_ErrMoonEntrustNoData = 1900098;
  ErrorCode_ErrMoonMoneyNotEnough = 1900099;
  ErrorCode_ErrCircumFluenceTimeIn = 1900100;
  ErrorCode_DragonPoolRewardWayErr = 1900101;
  ErrorCode_DragonPoolNoHandIn = 1900102;
  ErrorCode_WeaponSkinNoEquiped = 1900103;
  ErrorCode_WeaponSkinDataErr = 1900104;
  ErrorCode_WeaponSkinUnLockErr = 1900105;
  ErrorCode_WeaponSkinEquipDone = 1900106;
  ErrorCode_WeaponSkinTypeErr = 1900107;
  ErrorCode_FriendOfflineMsgErr = 1900108;
  ErrorCode_FindSpringSignConfigErr = 1900109;
  ErrorCode_SpringSignDataErr = 1900110;
  ErrorCode_SpringSignRewardDone = 1900111;
  ErrorCode_SpringSignRewardGetErr = 1900112;
  ErrorCode_SpringSignNoOpen = 1900113;
  ErrorCode_SpringSignNoTask = 1900114;
  ErrorCode_SpringSignInviteNum = 1900115;
  ErrorCode_SpringSignRolePool = 1900116;
  ErrorCode_SpringSignDrawPoolNull = 1900117;
  ErrorCode_FarmGoldActivityNotOpen = 1900118;
  ErrorCode_FarmGoldActivityPointReceived = 1900119;
  ErrorCode_FarmGoldActivityPointNotConfig = 1900120;
  ErrorCode_FarmGoldActivityPointNotEnough = 1900121;
  ErrorCode_FarmGoldActivityLevelNoData = 1900122;
  ErrorCode_FarmGoldActivityLevelReceived = 1900123;
  ErrorCode_FarmGoldActivityLevelNotConfig = 1900124;
  ErrorCode_FarmGoldActivityLevelDiffNotConfig = 1900125;
  ErrorCode_FarmGoldInstIdInValid = 1900126;
  ErrorCode_FarmGoldVarNotExist = 1900127;
  ErrorCode_FarmGoldResultCacheNotExist = 1900128;
  ErrorCode_FarmGoldInstNotOpen = 1900129;
  ErrorCode_FarmGoldActivityLimitDataNotFind = 1900130;
  ErrorCode_MapTravelDataErr = 1900131;
  ErrorCode_MapTravelConfigErr = 1900132;
  ErrorCode_MapTravelCannotReward = 1900133;
  ErrorCode_MapTravelRewardGet = 1900134;
  ErrorCode_MapTravelMaxLevel = 1900135;
  ErrorCode_MapTravelLackExp = 1900136;
  ErrorCode_FarmGoldLevelNotOpen = 1900137;
  ErrorCode_MapTravelAreaLock = 1900138;
  ErrorCode_MapTravelAreaConfigErr = 1900139;
  ErrorCode_SlashAndTowerCacheErr = 1900142;
  ErrorCode_SlashAndTowerConfigErr = 1900143;
  ErrorCode_SlashAndTowerDataErr = 1900144;
  ErrorCode_SlashAndTowerReceivedLevelAward = 1900145;
  ErrorCode_SlashAndTowerNotReward = 1900146;
  ErrorCode_SlashAndTowerRoleNum = 1900147;
  ErrorCode_SlashAndTowerBuffNum = 1900148;
  ErrorCode_SlashAndTowerBuffConfig = 1900149;
  ErrorCode_SlashAndTowerBuffAccess = 1900150;
  ErrorCode_SlashAndTowerRoleSame = 1900151;
  ErrorCode_SlashAndTowerSeasonErr = 1900152;
  ErrorCode_SlashAndTowerBuffLack = 1900153;
  ErrorCode_MapTravelLevelUpCfgErr = 1900140;
  ErrorCode_MapTravelLevelCfgErr = 1900141;
  ErrorCode_TeamParkOurTaskCfgErr = 1900154;
  ErrorCode_TeamParkOurDataErr = 1900155;
  ErrorCode_TeamParkOurCfgNoMatch = 1900156;
  ErrorCode_TeamParkOurTaskDoing = 1900157;
  ErrorCode_TeamParkOurTaskTaken = 1900158;
  ErrorCode_TeamParkOurLevelLock = 1900159;
  ErrorCode_TeamParkOurFindNoLevel = 1900160;
  ErrorCode_SlashAndTowerRewardErr = 1900161;
  ErrorCode_SlashAndTowerBuffSeasonErr = 1900162;
  ErrorCode_SlashAndTowerNotOpen = 1900163;
  ErrorCode_SlashAndTowerSeasonToCfgErr = 1900164;
  ErrorCode_SlashAndTowerSeasonNoUpdate = 1900165;
  ErrorCode_SlashAndTowerFirstNoPass = 1900166;
  ErrorCode_SlashAndTowerLevelErr = 1900167;
  ErrorCode_TeamParkMemberErr = 1900168;
  ErrorCode_AvignonNotOpen = 1900172;
  ErrorCode_AvignonNotConfig = 1900173;
  ErrorCode_AvignonTaskNotFinish = 1900174;
  ErrorCode_AvignonTaskNotData = 1900175;
  ErrorCode_AvignonHadReward = 1900176;
  ErrorCode_SlashAndTowerTeamErr = 1900169;
  ErrorCode_SlashAndTowerBuffErr = 1900170;
  ErrorCode_SeasonTowerNoMatch = 1900171;
  ErrorCode_TeamParkOurMemberErr = 1900177;
  ErrorCode_BattlePassRewardDone = 1900178;
  ErrorCode_SlashAndTowerAwardCfgErr = 1900179;
  ErrorCode_NoFlySkinItem = 1900180;
  ErrorCode_FlySkinHadWear = 1900181;
  ErrorCode_NoOldFlySkinItem = 1900182;
  ErrorCode_OldFlySkinNoWear = 1900183;
  ErrorCode_RoleWearNoFlySkin = 1900184;
  ErrorCode_FlySkinParaGliderNoOpen = 1900185;
  ErrorCode_FlySkinSoaringWingNoOpen = 1900186;
  ErrorCode_NoRoleWearFlySkinSucc = 1900187;
  ErrorCode_FlySkinItemNoConfig = 1900188;
  ErrorCode_SlashAndTowerLevelSettle = 1900189;
  ErrorCode_FlySkinTypeErr = 1900190;
  ErrorCode_FlySkinTrialRole = 1900191;
  ErrorCode_RegreeNotOpen = 1900192;
  ErrorCode_RegressNoConfig = 1900193;
  ErrorCode_RegressWrongId = 1900194;
  ErrorCode_NoRegressRoundData = 1900195;
  ErrorCode_NotInRegress = 1900196;
  ErrorCode_AskRewardNoFinish = 1900197;
  ErrorCode_BirthdayNotArrived = 1900198;
  ErrorCode_BirthdayRoleInvalid = 1900199;
  ErrorCode_BirthdayNoCfg = 1900200;
  ErrorCode_HadBirthDayReward = 1900201;
  ErrorCode_BirthdayNoReset = 1900202;
  ErrorCode_BirthDayRewardTimeInvalid = 1900203;
  ErrorCode_BirthdayMustNowYear = 1900204;
  ErrorCode_BirthDayNotOpen = 1900205;
  ErrorCode_BirthDayRewardNotFinish = 1900206;
  ErrorCode_BirthdayRoleDone = 1900207;
  ErrorCode_ErrDoCommonRewardConfigError = 2000000;
  ErrorCode_InstPlayNotSettle = 2000001;
  ErrorCode_InstPlayNotFinishExecute = 2000002;
  ErrorCode_ErrResetItemEntityNotContain = 2000003;
  ErrorCode_InstPlayExchangeRewardNotExist = 2000004;
  ErrorCode_MapConfigNull = 2000005;
  ErrorCode_MapConfigError = 2000006;
  ErrorCode_InstPlayComponentNotExist = 2000007;
  ErrorCode_InstTeleportResetPlayerDead = 2000008;
  ErrorCode_DrownEndTeleportInBigWorld = 2000009;
  ErrorCode_ErrFightTrialRoleRoldIdsError = 2000010;
  ErrorCode_ErrFightTrialRoleFromationError = 2000011;
  ErrorCode_ErrInstSaveFail = 2000012;
  ErrorCode_ErrActiveFoundationControlPlayerError = 2000013;
  ErrorCode_ErrActiveFoundationOccupation = 2000014;
  ErrorCode_ErrSingleInstanceCanNotOnline = 2000015;
  ErrorCode_ErrInstanceRechallengeLimit = 2000016;
  ErrorCode_ErrTargetSame = 2000017;
  ErrorCode_ErrAttachTargetType = 2000018;
  ErrorCode_ErrAttachInfoNull = 2000019;
  ErrorCode_ErrLevelPlayChallengeFail = 2000020;
  ErrorCode_ErrGMTip = 2000021;
  ErrorCode_ErrPosSenderEntityNoExist = 2000022;
  ErrorCode_ErrPosSenderComponentNoExist = 2000023;
  ErrorCode_ErrPosSenderParamError = 2000024;
  ErrorCode_ErrPosSenderRemoveSenderNotSame = 2000025;
  ErrorCode_ErrConnectorEntityNoExist = 2000026;
  ErrorCode_ErrConnectorCompNoExist = 2000027;
  ErrorCode_ErrConnectorPreIdError = 2000028;
  ErrorCode_ErrConnectorCompleteState = 2000029;
  ErrorCode_ErrConnectorActiveStateError = 2000030;
  ErrorCode_ErrConnectorMatchErro = 2000031;
  ErrorCode_ErrActiveControlOccupation = 2000032;
  ErrorCode_ErrPortalCreatorActive = 2000033;
  ErrorCode_ErrComponentNull = 2000034;
  ErrorCode_ErrPortalCreatorConfigError = 2000035;
  ErrorCode_ErrPortalCreatorCreateFail = 2000036;
  ErrorCode_ErrTrialRoleEnterInst = 2000037;
  ErrorCode_ErrNpcInVehicle = 2000038;
  ErrorCode_ErrSceneItemBBNotChange = 2000039;
  ErrorCode_ErrInitMatchNotSuccess = 2000040;
  ErrorCode_ErrFightFormationSameRoleError = 2000041;
  ErrorCode_ErrFightMainRoleConflict = 2000042;
  ErrorCode_ErrVehicleItemConfigError = 2000043;
  ErrorCode_ErrVehicleCreateError = 2000044;
  ErrorCode_ErrVehicleEntityTypeError = 2000045;
  ErrorCode_ErrInstanceActivityExpire = 2000046;
  ErrorCode_ErrSlashAndTowerLevelUnlock = 2000047;
  ErrorCode_ErrInstLevelUnlock = 2000048;
  ErrorCode_ErrEnterInstConfigError = 2000049;
  ErrorCode_ErrMoveWithSplineConfigError = 2000050;
  ErrorCode_ErrMoveWithSplineIdError = 2000051;
  ErrorCode_ErrMoveWithSplineStop = 2000052;
  ErrorCode_ErrMoveWithSplineEntityConfigError = 2000053;
  ErrorCode_ErrMoveWithSplineControlPlayerError = 2000054;
  ErrorCode_ErrLeaveSceneStarted = 2000055;
  ErrorCode_ErrChangeFightState = 2100000;
  ErrorCode_ErrAddFragileFail = 2100001;
  ErrorCode_ErrStoreEnergyClose = 2100002;
  ErrorCode_ErrAttrOverMax = 2100003;
  ErrorCode_ErrGmkillEntityNotValid = 2200000;
  ErrorCode_ErrSplineConfigNotExist = 2200001;
  ErrorCode_BossRushActivityNotOpen = 2200002;
  ErrorCode_BossRushActivityScoreRewardNotExist = 2200003;
  ErrorCode_BossRushActivityLevelRewardNotExist = 2200004;
  ErrorCode_BossRushActivityScoreNotEnough = 2200005;
  ErrorCode_BossRushActivityLevelNotPass = 2200006;
  ErrorCode_BossRushActivityRewardClaimed = 2200007;
  ErrorCode_BossRushActivityBuffSelectionNotValid = 2200008;
  ErrorCode_BossRushActivityConfigNotExist = 2200009;
  ErrorCode_BossRushActivityCharacterSelectionNotValid = 2200010;
  ErrorCode_BossRushActivityComponentNotExist = 2200011;
  ErrorCode_BossRushActivityCharacterSelectionEmpty = 2200012;
  ErrorCode_BossRushActivityBuffSelectionEmpty = 2200013;
  ErrorCode_BossRushActivityLevelNotOpen = 2200014;
  ErrorCode_InRangeEntityDuplicate = 2200015;
  ErrorCode_InRangeEntityNotExist = 2200016;
  ErrorCode_NpcPerformComponentNotExist = 2200017;
  ErrorCode_NpcPerformStateNotInit = 2200018;
  ErrorCode_NpcPerformActionTargetEntityNotExist = 2200019;
  ErrorCode_ActionQueueTypeNotExist = 2200020;
  ErrorCode_ActionQueueCtxTypeNotExist = 2200021;
  ErrorCode_ExecuteQueueOwnerHasAction = 2200022;
  ErrorCode_ActionQueueExceedMaxCount = 2200023;
  ErrorCode_ActionQueueStartActionGroupFail = 2200024;
  ErrorCode_ActionQueueComponentNotExist = 2200025;
  ErrorCode_ActionQueueNotInit = 2200026;
  ErrorCode_ChangeBatchEntitiesStateError = 2200027;
  ErrorCode_EnableNearbyTrackingTargetEntityNotExist = 2200028;
  ErrorCode_EnableNearbyTrackingSelfNotEntity = 2200029;
  ErrorCode_EnableNearbyTrackingSelfComponentNotExist = 2200030;
  ErrorCode_SetTeleControlEntityNotExist = 2200031;
  ErrorCode_SetTeleControlTypeNotExist = 2200032;
  ErrorCode_SetTeleControlComponentNotExist = 2200033;
  ErrorCode_SetTeleControlCoordEntityNotExist = 2200034;
  ErrorCode_SceneItemAttributeIdNotInType = 2200035;
  ErrorCode_SceneItemAttributeIdNotExist = 2200036;
  ErrorCode_ModifySceneItemAttributeEntityNotExist = 2200037;
  ErrorCode_AddSceneItemAttributeTagDuplicate = 2200038;
  ErrorCode_RemoveSceneItemAttributeTagNotExist = 2200039;
  ErrorCode_AttributeEntityLock = 2200040;
  ErrorCode_AttributeEntitySilent = 2200041;
  ErrorCode_ModifySceneItemAttributeTagNotExist = 2200042;
  ErrorCode_ErrEnterInstCtx = 2200043;
  ErrorCode_ErrEnterInstBlackboardValueNotExist = 2200044;
  ErrorCode_TriggerLocked = 2200045;
  ErrorCode_TriggerIgnore = 2200046;
  ErrorCode_TriggerEntityNull = 2200047;
  ErrorCode_TriggerEntityNotMatch = 2200048;
  ErrorCode_TriggerMatchCountNotMet = 2200049;
  ErrorCode_TriggerActionEmpty = 2200050;
  ErrorCode_ExceedMaxTriggerCount = 2200051;
  ErrorCode_TriggerAlreadyLeaveWhenEnterCondFail = 2200052;
  ErrorCode_TriggerLeaveConfigEmpty = 2200053;
  ErrorCode_TriggerConditionNotMet = 2200054;
  ErrorCode_TriggerRangeRationalityFail = 2200055;
  ErrorCode_TrampleEntityNotMatch = 2200056;
  ErrorCode_TrampleConditionNotMet = 2200057;
  ErrorCode_TrampleMatchCountNotMet = 2200058;
  ErrorCode_HasDestroySelfActionInQueue = 2200059;
  ErrorCode_EntityWillDestroy = 2200060;
  ErrorCode_AddInRangePlayerDuplicate = 2200061;
  ErrorCode_AddInRangeEntityDuplicate = 2200062;
  ErrorCode_RemoveInRangePlayerNotExist = 2200063;
  ErrorCode_RemoveInRangeEntityNotExist = 2200064;
  ErrorCode_GravityDirectionNoChange = 2200072;
  ErrorCode_HookExitWayNotExist = 2200065;
  ErrorCode_HookLockPointLocked = 2200066;
  ErrorCode_HookLockAddPlayerDuplicate = 2200067;
  ErrorCode_HookLockRemovePlayerNotExist = 2200068;
  ErrorCode_KiteHookLockPointOnlyOnePlayer = 2200069;
  ErrorCode_EffectAreaAddBuffFail = 2200073;
  ErrorCode_ErrGravityInteractNoPermission = 2200074;
  ErrorCode_PlayerNotInAnyGravityRegion = 2200075;
  ErrorCode_ErrSceneEntityAlreadyExist = 2200070;
  ErrorCode_PlayerLeaveGravityRegionInAbnormalGravity = 2200076;
  ErrorCode_HookLockPointConditionNotMet = 2200071;
  ErrorCode_PlayerInAbnormalGravity = 2200077;
  ErrorCode_GravityFlipIndexNoChange = 2200078;
  ErrorCode_GravityFlipIndexNotExist = 2200079;
  ErrorCode_GravityFlipTypeNoChange = 2200080;
  ErrorCode_GravityFlipTypeNotExist = 2200081;
  ErrorCode_GravityFlipNotUpdateToTargetDirection = 2200082;
  ErrorCode_ReliablePosNotInGravityRegion = 2200083;
  ErrorCode_TargetPosNotInGravityRegion = 2200084;
  ErrorCode_PlayerCurGravityDirectionNotInOptions = 2200085;
  ErrorCode_WaterfallClimbingParticipatorCountErr = 2200086;
  ErrorCode_WaterfallClimbingParticipatorNoVehicle = 2200087;
  ErrorCode_WaterfallClimbingVehicleNoPassenger = 2200088;
  ErrorCode_WaterfallClimbingPlayerNotInPassenger = 2200089;
  ErrorCode_ErrVehicleEntityNotExist = 2200090;
  ErrorCode_GravityFlipLocked = 2200091;
  ErrorCode_ClientActionSkipped = 2200092;
  ErrorCode_AbnormalGravityCannotAddTemporary = 2200093;
  ErrorCode_ErrReliablePosEntityNotExist = 2200094;
  ErrorCode_UpdateReliablePosGravityDirNotMatch = 2200095;
  ErrorCode_UpdateReliablePosNotWalkable = 2200096;
  ErrorCode_UpdateReliablePosSelfNotEntity = 2200097;
  ErrorCode_GravityDirectionHasNaN = 2200098;
  ErrorCode_ErrHostInAbnormalGravity = 2200099;
  ErrorCode_MultiModeCannotTeleport = 2200100;
  ErrorCode_NotQaAccountWithHIddenServer = 2300000;
  ErrorCode_DisabledFuncInHIddenServer = 2300001;
  ErrorCode_ErrActionExecutorFinishConditionNotSport = 2400000;
  ErrorCode_ErrAlreadyInSwitchNode = 2400001;
  ErrorCode_ErrCornActivityId = 2500000;
  ErrorCode_ErrCornActivityNoOpen = 2500001;
  ErrorCode_ErrCornNoActivityData = 2500002;
  ErrorCode_NoPlayIdCorniceReward = 2500003;
  ErrorCode_ActivityNoOpenCorniceReward = 2500004;
  ErrorCode_ScoreLimitCorniceReward = 2500005;
  ErrorCode_RewardedCorniceReward = 2500006;
  ErrorCode_NoUnlockCorniceReward = 2500007;
  ErrorCode_NoScoreCorniceReward = 2500008;
  ErrorCode_TrackMoonPhaseNoConfig = 2500009;
  ErrorCode_TrackMoonPhaseActivityNoOpen = 2500010;
  ErrorCode_TrackMoonPhaseNoPolulary = 2500011;
  ErrorCode_TrackMoonPhaseNoData = 2500012;
  ErrorCode_TrackMoonPhaseRewarded = 2500013;
  ErrorCode_TrackMoonPhaseDataNoConfig = 2500014;
  ErrorCode_TrackMoonPhaseDataNoOpen = 2500015;
  ErrorCode_TrackMoonPhaseDataNoData = 2500016;
  ErrorCode_BCTRewardNoTConfig = 2500017;
  ErrorCode_BCTRewardNoOpenActivity = 2500018;
  ErrorCode_BCTRewardNoData = 2500019;
  ErrorCode_BCTRewardNoUnlock = 2500020;
  ErrorCode_BCTRewardNoComplete = 2500021;
  ErrorCode_BCARewardNoRConfig = 2500022;
  ErrorCode_BCARewardNoOpenActivity = 2500023;
  ErrorCode_BCARewardNoData = 2500024;
  ErrorCode_BCARewardNoActive = 2500025;
  ErrorCode_BCARewarded = 2500026;
  ErrorCode_BCARewardNoActiveReward = 2500027;
  ErrorCode_CornTranNoPlayConfig = 2500028;
  ErrorCode_CornTranNoOpenPlay = 2500029;
  ErrorCode_CornTranNoOpenActivity = 2500030;
  ErrorCode_CornTranNoEntityConfig = 2500031;
  ErrorCode_BCARewardRepeatRewardId = 2500032;
  ErrorCode_BCARewardDifferActivityId = 2500033;
  ErrorCode_BCTRewardNoActivity = 2500034;
  ErrorCode_BCTRewardIllegalRewardNum = 2500035;
  ErrorCode_BCTRewardNoUnlockStage = 2500036;
  ErrorCode_PreheatSignNodeNoConfig = 2500037;
  ErrorCode_PreheatSignNodeNoData = 2500038;
  ErrorCode_PreheatSignActivityOnOpen = 2500039;
  ErrorCode_PreheatSignNodeNoUnlock = 2500040;
  ErrorCode_PreheatSignNodeNoRewardStatus = 2500041;
  ErrorCode_PreheatSignNodeNoAnswer = 2500042;
  ErrorCode_ScratchCardNoRoundConfig = 2500043;
  ErrorCode_ScratchCardNoActivityConfig = 2500044;
  ErrorCode_ScratchCardNoDbData = 2500045;
  ErrorCode_ScratchCardIllegalIndex = 2500046;
  ErrorCode_ScratchCardIndexRewarded = 2500047;
  ErrorCode_ScratchCardNoTime = 2500048;
  ErrorCode_ScratchCardNoRandomReward = 2500049;
  ErrorCode_ScratchCardRoundNoUnlock = 2500050;
  ErrorCode_BossRushPlayerNoSceneData = 2500051;
  ErrorCode_BossRushPlayerCanNoChooseBuff = 2500052;
  ErrorCode_BossRushPlayerIllegalIndex = 2500053;
  ErrorCode_BossRushHadSameBuffId = 2500054;
  ErrorCode_BossRushBuffCountLimit = 2500055;
  ErrorCode_BossRushBuffIllegal = 2500056;
  ErrorCode_BossRushBuffNoConfig = 2500057;
  ErrorCode_ScratchCardActivityNoOpen = 2500058;
  ErrorCode_MowToweNoLevelConfig = 2500059;
  ErrorCode_MowTowerActivityNoOpen = 2500060;
  ErrorCode_MowToweNoCacheData = 2500061;
  ErrorCode_MowTowerNoPassFirstInst = 2500062;
  ErrorCode_MowTowerLevelsIdError = 2500063;
  ErrorCode_MowTowerRoleIdError = 2500064;
  ErrorCode_MowTowerBuffIdError = 2500065;
  ErrorCode_MowTowerNoComponent = 2500066;
  ErrorCode_MowTowerHadSameRole = 2500067;
  ErrorCode_MowTowerBuffCountError = 2500068;
  ErrorCode_MowTowerNoFirstInst = 2500069;
  ErrorCode_MowTowerNoActivityData = 2500070;
  ErrorCode_MowTowerScoreLimit = 2500071;
  ErrorCode_MowTowerScoreRewarded = 2500072;
  ErrorCode_MowTowerScoreRewardConfig = 2500073;
  ErrorCode_MowTowerNoInScene = 2500074;
  ErrorCode_MowTowerNoRewardConfig = 2500075;
  ErrorCode_MaterialReplaceNoTargetConfig = 2500076;
  ErrorCode_MaterialReplaceNoConsumeConfig = 2500077;
  ErrorCode_MaterialReplaceNoSameGroup = 2500078;
  ErrorCode_MaterialReplaceErrConsumeNum = 2500079;
  ErrorCode_ErrRoleSkinTrialNotInit = 2500080;
  ErrorCode_ErrRoleSkinTrialNoFinish = 2500081;
  ErrorCode_ErrRoleSkinTrialReward = 2500082;
  ErrorCode_ErrRoleSkinTrialRewardDone = 2500083;
  ErrorCode_ErrRoleSkinTrialTimeOut = 2500084;
  ErrorCode_PhantomEquipGroupNoEquipPhantom = 2500085;
  ErrorCode_PhantomEquipGroupCountLimit = 2500086;
  ErrorCode_PhantomEquipGroupHadInTop = 2500087;
  ErrorCode_PhantomEquipGroupNameEmpty = 2500088;
  ErrorCode_PhantomEquipGroupNameCountLimiy = 2500089;
  ErrorCode_PhantomRecommendFuncNoOpen = 2500090;
  ErrorCode_BossRushTaskNoFinish = 2500091;
  ErrorCode_PhantomGroupUseSame = 2500092;
  ErrorCode_PhantomGroupFunNoOpen = 2500093;
  ErrorCode_NoFishingActivityConfig = 2500094;
  ErrorCode_NoInFishingActivityTime = 2500095;
  ErrorCode_FishingActivityCanNoReward = 2500096;
  ErrorCode_NoFishingActivityMileConfig = 2500097;
  ErrorCode_FishingActivitySameMileId = 2500098;
  ErrorCode_FishingActivityRewarded = 2500099;
  ErrorCode_PlayerTitleFuncNoOpen = 2500100;
  ErrorCode_PlayerTitleHadUndress = 2500101;
  ErrorCode_PlayerTitleHadDress = 2500102;
  ErrorCode_PlayerTitleNoUnlock = 2500103;
  ErrorCode_BabelTowerActivityNoOpen = 2500104;
  ErrorCode_BabelTowerLevelNoOpen = 2500105;
  ErrorCode_BabelTowerDeEffectNoFind = 2500106;
  ErrorCode_BabelTowerDeEffectCanNoChoose = 2500107;
  ErrorCode_BabelTowerDeEffectMutex = 2500108;
  ErrorCode_BabelTowerNoDailyTask = 2500109;
  ErrorCode_BabelTowerTaskNoComplete = 2500110;
  ErrorCode_BabelTowerTaskRewarded = 2500111;
  ErrorCode_BabelTowerRoleLimit = 2500112;
  ErrorCode_BabelTowerNoBuffConfig = 2500113;
  ErrorCode_BabelTowerBuffCanNoChoose = 2500114;
  ErrorCode_BabelTowerBuffNumIllegal = 2500115;
  ErrorCode_BabelTowerBuffChooseCountLimit = 2500116;
  ErrorCode_NoBabelTowerInsComponent = 2500117;
  ErrorCode_BabelTowerNoSelectBuff = 2500118;
  ErrorCode_PhantomPolishFuncNoOpen = 2500119;
  ErrorCode_PhantomPolishHadLevelUp = 2500120;
  ErrorCode_PhantomPolishQualityLimit = 2500121;
  ErrorCode_PhantomPolishSamePro = 2500122;
  ErrorCode_ExploreActivityNoOpen = 2500123;
  ErrorCode_ExploreActivityTaskNoFinish = 2500124;
  ErrorCode_ExploreActivityTaskRewarded = 2500125;
  ErrorCode_BabelTowerDeTermNoUnlock = 2500126;
  ErrorCode_BabelTowerBuffNoUnlock = 2500127;
  ErrorCode_BabelTowerIsNoDifficult = 2500128;
  ErrorCode_PlayerTitleNoConfig = 2500129;
  ErrorCode_PlayerFixIndexIllegal = 2500130;
  ErrorCode_PlayerFixHadFlag = 2500131;
  ErrorCode_PlayerFixFrontNoFlag = 2500132;
  ErrorCode_BabelTowerNoSelectRoles = 2500133;
  ErrorCode_ErrAlertAreaId = 2600000;
  ErrorCode_ErrAlertAreaEnable = 2600001;
  ErrorCode_ErrAlertAreaDisable = 2600002;
  ErrorCode_ErrAlertUiEnable = 2600003;
  ErrorCode_ErrAlertUiDisable = 2600004;
  ErrorCode_ErrAlertUiVisible = 2600005;
  ErrorCode_ErrAlertUiInvisible = 2600006;
  ErrorCode_ErrAlertValueError = 2600007;
  ErrorCode_ErrAlertSetAlertValueType = 2600008;
  ErrorCode_LevelPlayReportConfigNotExist = 2600009;
  ErrorCode_LevelPlayReportTypeError = 2600010;
  ErrorCode_LevelPlayReportVarsEmpty = 2600011;
  ErrorCode_LevelPlayReportPlayVarsError = 2600012;
  ErrorCode_CameraAlertHasAlert = 2600013;
  ErrorCode_CameraAlertHasNotAlert = 2600014;
  ErrorCode_CameraAlertTagIdNotExist = 2600015;
  ErrorCode_LevelPlayConfigNotExist = 2600016;
  ErrorCode_LevelPlayRepeateInstId = 2600017;
  ErrorCode_LevelPlayNotBelongInst = 2600018;
  ErrorCode_LevelPlayIdsNotExist = 2600019;
  ErrorCode_LevelPlayInstCountError = 2600020;
  ErrorCode_LevelPlayCountError = 2600021;
  ErrorCode_TimerHasPause = 2600022;
  ErrorCode_TimerHasNotPause = 2600023;
  ErrorCode_TimerHasFinish = 2600024;
  ErrorCode_CanNotContinueInst = 2600025;
  ErrorCode_ChapterNotExist = 2600026;
  ErrorCode_ChapterResultHasFinish = 2600027;
  ErrorCode_ChapterResultNotFinish = 2600028;
  ErrorCode_ChapterResultRewardCanNotTake = 2600029;
  ErrorCode_ChoiceHasUnlock = 2600030;
  ErrorCode_ChoiceNotUnlock = 2600031;
  ErrorCode_ChapterResultNotExist = 2600032;
  ErrorCode_ChapterResultRewardHasTake = 2600033;
  ErrorCode_ChoiceNotExist = 2600034;
  ErrorCode_InspirationNotEnough = 2600035;
  ErrorCode_ActivityRewardCanNotTake = 2600036;
  ErrorCode_ActivityResultNotExist = 2600037;
  ErrorCode_ScheduleRewardNotExist = 2600038;
  ErrorCode_ScheduleRewardHasTake = 2600039;
  ErrorCode_ScheduleRewardCanNotTake = 2600040;
  ErrorCode_ActivityRewardHasTake = 2600041;
  ErrorCode_QuestWaitConfirmResource = 2600042;
  ErrorCode_HasGuest = 2600043;
  ErrorCode_ErrorCodeIdCreateRuleChange2 = 2700001;
  ErrorCode_RacingBetsActivityIdErr = 2700002;
  ErrorCode_RacingBetsActivityDataErr = 2700003;
  ErrorCode_RacingBetsRewardConfErr = 2700004;
  ErrorCode_RacingBetsTaskIdNotExist = 2700005;
  ErrorCode_RacingBetsTaskRewarded = 2700006;
  ErrorCode_RacingBetsTaskUndone = 2700007;
  ErrorCode_RacingBetsTaskRewardFail = 2700008;
  ErrorCode_RacingBetsSeasonConfErr = 2700009;
  ErrorCode_RacingBetsLegMatchIdNotExist = 2700010;
  ErrorCode_RacingBetsOddsTimesErr = 2700011;
  ErrorCode_RacingBetsOddsVersionErr = 2700012;
  ErrorCode_RacingBetsOddsVersionCodeErr = 2700013;
  ErrorCode_RacingBetsOddsConfErr = 2700014;
  ErrorCode_RacingBetsOddsDangoErr = 2700015;
  ErrorCode_RacingBetsOddsDangoConfErr = 2700016;
  ErrorCode_RacingBetsOddsTimeErr = 2700017;
  ErrorCode_RacingBetsOddsRetry = 2700018;
  ErrorCode_RacingBetsCostFundsErr = 2700019;
  ErrorCode_RacingBetsGearTimesLimit = 2700020;
  ErrorCode_RacingBetsGearInfoErr = 2700021;
  ErrorCode_RacingBetsGearRefundParamErr = 2700022;
  ErrorCode_RacingBetsGearRefundFail = 2700023;
  ErrorCode_RacingBetsGearNotRefund = 2700024;
  ErrorCode_RacingBetsActivityConfErr = 2700025;
  ErrorCode_RacingBetsOddsFundsLack = 2700026;
  ErrorCode_RacingBetsOddsLack = 2700027;
  ErrorCode_RacingBetsGroupNotExist = 2700028;
  ErrorCode_RacingBetsGroupConfNotExist = 2700029;
  ErrorCode_RacingBetsGroupConfError = 2700030;
  ErrorCode_RacingBetsNotInInst = 2700031;
  ErrorCode_RacingBetsFundsNotEnough = 2700032;
  ErrorCode_RacingBetsFundsCalcErr = 2700033;
  ErrorCode_RacingBetsLegMatchNotOpen = 2700034;
  ErrorCode_RacingBetsDangoActionTypeErr = 2700035;
  ErrorCode_RacingBetsDangoMatchParamErr = 2700036;
  ErrorCode_RacingBetsInstSubTypeErr = 2700037;
  ErrorCode_RacingBetsEntityErr = 2700038;
  ErrorCode_RacingBetsLegMatchIdErr = 2700039;
  ErrorCode_RacingBetsBulletScreenTableNotExist = 2700040;
  ErrorCode_RacingBetsBulletScreenIdErr = 2700041;
  ErrorCode_RacingBetsBulletActionIndexNotExist = 2700042;
  ErrorCode_RacingBetsBulletScreenLegMatchNotExist = 2700043;
  ErrorCode_RacingBetsBulletNotFundOpenRankCurTime = 2700044;
  ErrorCode_RacingBetsBulletGetRankErr = 2700045;
  ErrorCode_RacingBetsBulletCD = 2700046;
  ErrorCode_ActivityLinkageActivityIdConfErr = 2700047;
  ErrorCode_ActivityLinkageConfErr = 2700048;
  ErrorCode_ActivityLinkageRewardErr = 2700049;
  ErrorCode_ActivityLinkageDataErr = 2700050;
  ErrorCode_ActivityLinkageConfIndexErr = 2700051;
  ErrorCode_ActivityLinkageRewardStatusErr = 2700052;
  ErrorCode_ActivityLinkagePageTimeErr = 2700053;
  ErrorCode_RacingBetsdynamicOddsConfErr = 2700054;
  ErrorCode_RacingBetsdynamicOddsProportionErr = 2700055;
  ErrorCode_RacingBetsDangoDataNotExist = 2700056;
  ErrorCode_RacingBetsMatchDataErr = 2700057;
  ErrorCode_RacingBetsMatchRoundTimeErr = 2700058;
  ErrorCode_RacingBetsNotGear = 2700059;
  ErrorCode_RacingBetsLegSettle = 2700060;
  ErrorCode_RacingBetsRankNotOpen = 2700061;
  ErrorCode_RacingBetsActionIndexErr = 2700062;
  ErrorCode_RacingBetsMatchRoundNotFund = 2700063;
  ErrorCode_RacingBetsDangoConfNotExist = 2700064;
  ErrorCode_RacingBetsDangoTemplateConfNotExist = 2700065;
  ErrorCode_RacingBetsDangoEntityCreateFail = 2700066;
  ErrorCode_RacingBetsLegMatchConfNotExist = 2700067;
  ErrorCode_RacingBetsLegNextOddsErr = 2700070;
  ErrorCode_RacingBetsRankNotExist = 2700071;
  ErrorCode_RacingBetsPlayerNotExistInRank = 2700072;
  ErrorCode_RacingBetsBulletIdErr = 2700083;
  ErrorCode_RacingBetsPlayerDataNotExist = 2700084;
  ErrorCode_RacingBetsTaskDataNotExist = 2700085;
}

message DErrorResult {
  ErrorCode ErrorCode = 1;
  repeated string ErrorParams = 2;
}

// MessageId: 22742 (Request)
message F_s {
}

// MessageId: 29336 (Response)
message V_s {
  ErrorCode ErrorCode = 15;
  repeated RoleInfo RoleList = 11;
}

// MessageId: 28447 (Notify)
message PbGetRoleListNotify {
  repeated RoleInfo RoleList = 6;
}

// MessageId: 24161 (Request)
message PbRoleActiveRequest {
  int32 RoleId = 5;
}

// MessageId: 16315 (Response)
message PbRoleActiveResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 29631 (Notify)
message PbRoleActiveNotify {
  RoleInfo Role = 12;
}

// MessageId: 26475 (Request)
message PbUpLevelRoleRequest {
  int32 RoleId = 6;
  repeated ArrayIntInt ItemList = 1;
}

// MessageId: 24801 (Response)
message PbUpLevelRoleResponse {
  ErrorCode ErrorCode = 3;
  int32 RoleId = 7;
  int32 Exp = 10;
  int32 Level = 6;
  map<int32, int32> ItemMap = 15;
}

// MessageId: 25883 (Request)
message PbOverRoleRequest {
  int32 RoleId = 15;
}

// MessageId: 15498 (Response)
message PbOverRoleResponse {
  ErrorCode ErrorCode = 9;
  int32 RoleId = 15;
  int32 Breakthrough = 2;
}

// MessageId: 17086 (Request)
message PbUpLevelSkillRequest {
  int32 RoleId = 4;
  int32 SkillId = 1;
}

// MessageId: 28476 (Response)
message PbUpLevelSkillResponse {
  ErrorCode ErrorCode = 2;
  int32 RoleId = 15;
  ArrayIntInt SkillInfo = 14;
}

// MessageId: 17282 (Notify)
message PbRolePropsNotify {
  int32 RoleId = 7;
  repeated ArrayIntInt BaseProp = 2;
  repeated ArrayIntInt AddProp = 1;
}

message ArrayIntInt {
  int32 Key = 1;
  int32 Value = 2;
}

message ArrayIntDouble {
  int32 Key = 1;
  double Value = 2;
}

message ArraySkillNode {
  int32 SkillNodeId = 1;
  bool IsActive = 2;
  int32 SkillId = 3;
}

message ResonInfo {
  int32 ResonId = 1;
  bool IsOpen = 2;
  int32 Increase = 3;
}

message RoleInfo {
  int32 RoleId = 1;
  string Name = 2;
  int32 Level = 3;
  int32 Exp = 4;
  int32 Breakthrough = 5;
  repeated ArrayIntInt Skills = 6;
  repeated ArrayIntInt Phantom = 7;
  int32 Star = 8;
  int32 Favor = 10;
  repeated ResonInfo Reson = 11;
  int32 CurModel = 12;
  repeated int32 Models = 13;
  repeated ArrayIntInt BaseProp = 14;
  repeated ArrayIntInt AddProp = 15;
  uint32 CreateTime = 17;
  repeated ArraySkillNode SkillNodeState = 19;
  int32 ResonantChainGroupIndex = 20;
  int32 SkinId = 21;
}

// MessageId: 19779 (Notify)
message PbRoleExpNotify {
  int32 RoleId = 1;
  int32 Exp = 12;
  int32 Level = 13;
}

// MessageId: 16427 (Notify)
message PbRoleResonLockFinishNotify {
  int32 RoleId = 6;
  int32 ResonId = 14;
}

// MessageId: 24369 (Notify)
message PbRoleScenePropsNotify {
  int32 RoleId = 15;
  repeated ArrayIntInt BaseProp = 4;
  repeated ArrayIntInt AddProp = 7;
}

// MessageId: 21014 (Notify)
message PbRoleSkillLevelNotify {
  int32 RoleId = 6;
  ArrayIntInt SkillInfo = 2;
}

message SkillEffect {
  int32 Level = 1;
  repeated OneSkillEffect EffectDescList = 3;
}

message OneSkillEffect {
  int32 Id = 1;
  repeated string Desc = 3;
}

// MessageId: 16575 (Request)
message RoleLevelUpViewRequest {
  int32 RoleId = 1;
  int32 MaxItemId = 8;
  repeated ArrayIntInt ItemList = 11;
}

// MessageId: 15175 (Response)
message RoleLevelUpViewResponse {
  ErrorCode ErrorCode = 15;
  int32 Level = 9;
  repeated ArrayIntInt LevelExpInfo = 14;
  int32 Exp = 3;
  int32 AddExp = 13;
  repeated ArrayIntDouble FinalProp = 11;
  repeated ArrayIntInt CostList = 4;
  repeated ArrayIntInt OverflowList = 2;
  repeated ArrayIntInt ItemList = 12;
}

// MessageId: 16213 (Request)
message RoleBreakThroughViewRequest {
  int32 RoleId = 10;
}

// MessageId: 19981 (Response)
message RoleBreakThroughViewResponse {
  ErrorCode ErrorCode = 4;
  int32 LevelLimit = 14;
  int32 UnLockSkillId = 13;
  repeated ArrayIntInt CostList = 5;
  repeated ArrayIntInt RewardList = 6;
  repeated ArrayIntDouble FinalProp = 2;
  bool IsConditionFinish = 7;
}

// MessageId: 22675 (Request)
message RoleSkillLevelUpViewRequest {
  int32 RoleId = 9;
  int32 SkillId = 15;
}

// MessageId: 20259 (Response)
message RoleSkillLevelUpViewResponse {
  ErrorCode ErrorCode = 2;
  repeated SkillEffect SkillEffectList = 3;
  repeated ArrayIntInt CostList = 13;
}

// MessageId: 29092 (Request)
message RoleSkillViewRequest {
  int32 RoleId = 12;
  int32 SkillId = 4;
}

// MessageId: 23969 (Response)
message RoleSkillViewResponse {
  ErrorCode ErrorCode = 10;
  repeated SkillEffect SkillEffectList = 9;
  repeated SkillEffect PreSkillEffectList = 2;
  bool IsConditionFinish = 1;
}

// MessageId: 22041 (Notify)
message RoleChangeNameNotify {
  int32 RoleId = 12;
  string Name = 2;
}

// MessageId: 28294 (Notify)
message RoleTrialOpenNotify {
  repeated int32 RoleIds = 9;
  bool xb_ = 11;
  repeated int32 Ub_ = 13;
}

// MessageId: 18014 (Notify)
message RoleTrialCloseNotify {
  repeated int32 RoleIds = 3;
  bool xb_ = 1;
  repeated int32 Ub_ = 14;
}

// MessageId: 20066 (Notify)
message hp_2 {
  int32 DungeonInstanceId = 9;
}

// MessageId: 20449 (Request)
message RoleActivateSkillRequest {
  int32 RoleId = 12;
  int32 SkillNodeId = 7;
}

// MessageId: 17778 (Response)
message RoleActivateSkillResponse {
  ErrorCode ErrorCode = 13;
  int32 RoleId = 15;
  ArrayIntInt SkillInfo = 2;
}

// MessageId: 20776 (Notify)
message RoleSkillNodeNotify {
  int32 RoleId = 9;
  repeated ArraySkillNode SkillNodeState = 12;
}

// MessageId: 17341 (Request)
message ResonantChainUnlockRequest {
  int32 RoleId = 15;
}

// MessageId: 23935 (Response)
message ResonantChainUnlockResponse {
  ErrorCode ErrorCode = 13;
  int32 RoleId = 3;
  int32 ResonantChainGroupIndex = 15;
}

// MessageId: 25077 (Request)
message RoleSexChangeRequest {
  int32 Sex = 7;
}

// MessageId: 19160 (Response)
message RoleSexChangeResponse {
  ErrorCode ErrorCode = 1;
  int32 Sex = 12;
}

// MessageId: 24170 (Request)
message RoleElementChangeRequest {
  int32 ElementType = 3;
}

// MessageId: 17391 (Response)
message RoleElementChangeResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 26616 (Notify)
message RoleChangeNotify {
  int32 SourceRoleId = 12;
  RoleInfo RoleInfo = 8;
}

// MessageId: 25012 (Notify)
message RoleChangeUnlockNotify {
  repeated int32 UnlockRoleIds = 2;
  int64 NextAllowChangeTime = 5;
}

// MessageId: 26598 (Push)
message MaxMessageIdPush {
}

// MessageId: 23029 (Request)
message RoleSkinChangeRequest {
  int32 RoleId = 15;
  int32 SkinId = 6;
  bool IsWearWeaponSkin = 11;
}

// MessageId: 25652 (Response)
message RoleSkinChangeResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 22331 (Request)
message UnlockRoleSkinListRequest {
}

// MessageId: 25525 (Response)
message UnlockRoleSkinListResponse {
  repeated int32 PhantomSkinList = 11;
}

// MessageId: 19165 (Notify)
message UnlockRoleSkinListNofity {
  repeated int32 PhantomSkinList = 11;
}

message Vector {
  float X = 1;
  float Y = 2;
  float Z = 3;
}

message Rotator {
  float Pitch = 1;
  float Yaw = 2;
  float Roll = 3;
}

message Bo11 {
  Vector l8n1 = 1;
  Rotator _8n = 2;
}

enum EEntityType {
  EEntityType_Player = 0;
  EEntityType_Npc = 1;
  EEntityType_Monster = 2;
  EEntityType_SceneItem = 5;
  EEntityType_Custom = 6;
  EEntityType_Vision = 7;
  EEntityType_Animal = 8;
  EEntityType_ClientOnly = 9;
  EEntityType_Vehicle = 10;
  EEntityType_PlayerEntity = 11;
  EEntityType_SceneEntity = 12;
}

enum EAddEntityType {
  EAddEntityType_SceneInit = 0;
  EAddEntityType_Normal = 1;
}

enum ERemoveEntityType {
  ERemoveEntityType_RemoveTypeForce = 0;
  ERemoveEntityType_HpIsZero = 1;
  ERemoveEntityType_Destructible = 2;
  ERemoveEntityType_RemoveTypeNormal = 3;
  ERemoveEntityType_RemoveTypeCapture = 4;
  ERemoveEntityType_RemoveTypeTreasureBox = 5;
  ERemoveEntityType_RemoveTypeDrop = 6;
  ERemoveEntityType_MonsterBoom = 7;
  ERemoveEntityType_RemoveTypeResetByModeChange = 8;
}

enum EAttributeType {
  EAttributeType_EAttributeType_None = 0;
  EAttributeType_Lv = 1;
  EAttributeType_LifeMax = 2;
  EAttributeType_Life = 3;
  EAttributeType_Sheild = 4;
  EAttributeType_SheildDamageChange = 5;
  EAttributeType_SheildDamageReduce = 6;
  EAttributeType_Atk = 7;
  EAttributeType_Crit = 8;
  EAttributeType_CritDamage = 9;
  EAttributeType_Def = 10;
  EAttributeType_EnergyEfficiency = 11;
  EAttributeType_CdReduse = 12;
  EAttributeType_ElementEfficiency = 13;
  EAttributeType_DamageChangeNormalSkill = 14;
  EAttributeType_DamageChange = 15;
  EAttributeType_DamageReduce = 16;
  EAttributeType_DamageChangeAuto = 17;
  EAttributeType_DamageChangeCast = 18;
  EAttributeType_DamageChangeUltra = 19;
  EAttributeType_DamageChangeQte = 20;
  EAttributeType_DamageChangePhys = 21;
  EAttributeType_DamageChangeElement1 = 22;
  EAttributeType_DamageChangeElement2 = 23;
  EAttributeType_DamageChangeElement3 = 24;
  EAttributeType_DamageChangeElement4 = 25;
  EAttributeType_DamageChangeElement5 = 26;
  EAttributeType_DamageChangeElement6 = 27;
  EAttributeType_DamageResistancePhys = 28;
  EAttributeType_DamageResistanceElement1 = 29;
  EAttributeType_DamageResistanceElement2 = 30;
  EAttributeType_DamageResistanceElement3 = 31;
  EAttributeType_DamageResistanceElement4 = 32;
  EAttributeType_DamageResistanceElement5 = 33;
  EAttributeType_DamageResistanceElement6 = 34;
  EAttributeType_HealChange = 35;
  EAttributeType_HealedChange = 36;
  EAttributeType_DamageReducePhys = 37;
  EAttributeType_DamageReduceElement1 = 38;
  EAttributeType_DamageReduceElement2 = 39;
  EAttributeType_DamageReduceElement3 = 40;
  EAttributeType_DamageReduceElement4 = 41;
  EAttributeType_DamageReduceElement5 = 42;
  EAttributeType_DamageReduceElement6 = 43;
  EAttributeType_ReactionChange1 = 44;
  EAttributeType_ReactionChange2 = 45;
  EAttributeType_ReactionChange3 = 46;
  EAttributeType_ReactionChange4 = 47;
  EAttributeType_ReactionChange5 = 48;
  EAttributeType_ReactionChange6 = 49;
  EAttributeType_ReactionChange7 = 50;
  EAttributeType_ReactionChange8 = 51;
  EAttributeType_ReactionChange9 = 52;
  EAttributeType_ReactionChange10 = 53;
  EAttributeType_ReactionChange11 = 54;
  EAttributeType_ReactionChange12 = 55;
  EAttributeType_ReactionChange13 = 56;
  EAttributeType_ReactionChange14 = 57;
  EAttributeType_ReactionChange15 = 58;
  EAttributeType_EnergyMax = 59;
  EAttributeType_Energy = 60;
  EAttributeType_SpecialEnergy1Max = 61;
  EAttributeType_SpecialEnergy1 = 62;
  EAttributeType_SpecialEnergy2Max = 63;
  EAttributeType_SpecialEnergy2 = 64;
  EAttributeType_SpecialEnergy3Max = 65;
  EAttributeType_SpecialEnergy3 = 66;
  EAttributeType_SpecialEnergy4Max = 67;
  EAttributeType_SpecialEnergy4 = 68;
  EAttributeType_StrengthMax = 69;
  EAttributeType_Strength = 70;
  EAttributeType_StrengthRecover = 71;
  EAttributeType_StrengthPunishTime = 72;
  EAttributeType_StrengthRun = 73;
  EAttributeType_StrengthSwim = 74;
  EAttributeType_StrengthFastSwim = 75;
  EAttributeType_ElementEnergyMax = 76;
  EAttributeType_ElementEnergy = 77;
  EAttributeType_HardnessMax = 78;
  EAttributeType_Hardness = 79;
  EAttributeType_HardnessRecover = 80;
  EAttributeType_HardnessPunishTime = 81;
  EAttributeType_HardnessChange = 82;
  EAttributeType_HardnessReduce = 83;
  EAttributeType_ToughMax = 84;
  EAttributeType_Tough = 85;
  EAttributeType_ToughRecover = 86;
  EAttributeType_ToughChange = 87;
  EAttributeType_ToughReduce = 88;
  EAttributeType_ElementPower1 = 89;
  EAttributeType_ElementPower2 = 90;
  EAttributeType_ElementPower3 = 91;
  EAttributeType_ElementPower4 = 92;
  EAttributeType_ElementPower5 = 93;
  EAttributeType_ElementPower6 = 94;
  EAttributeType_SpecialDamageChange = 95;
  EAttributeType_StrengthFastClimbCost = 96;
  EAttributeType_ElementPropertyType = 97;
  EAttributeType_WeakTime = 98;
  EAttributeType_IgnoreDefRate = 99;
  EAttributeType_IgnoreDamageResistancePhys = 100;
  EAttributeType_IgnoreDamageResistanceElement1 = 101;
  EAttributeType_IgnoreDamageResistanceElement2 = 102;
  EAttributeType_IgnoreDamageResistanceElement3 = 103;
  EAttributeType_IgnoreDamageResistanceElement4 = 104;
  EAttributeType_IgnoreDamageResistanceElement5 = 105;
  EAttributeType_IgnoreDamageResistanceElement6 = 106;
  EAttributeType_SkillToughRatio = 107;
  EAttributeType_StrengthClimbJump = 108;
  EAttributeType_StrengthGliding = 109;
  EAttributeType_Mass = 110;
  EAttributeType_BrakingFrictionFactor = 111;
  EAttributeType_GravityScale = 112;
  EAttributeType_SpeedRatio = 113;
  EAttributeType_DamageChangePhantom = 114;
  EAttributeType_AutoAttackSpeed = 115;
  EAttributeType_CastAttackSpeed = 116;
  EAttributeType_StatusBuildUp1Max = 117;
  EAttributeType_StatusBuildUp1 = 118;
  EAttributeType_StatusBuildUp2Max = 119;
  EAttributeType_StatusBuildUp2 = 120;
  EAttributeType_StatusBuildUp3Max = 121;
  EAttributeType_StatusBuildUp3 = 122;
  EAttributeType_StatusBuildUp4Max = 123;
  EAttributeType_StatusBuildUp4 = 124;
  EAttributeType_StatusBuildUp5Max = 125;
  EAttributeType_StatusBuildUp5 = 126;
  EAttributeType_RageMax = 127;
  EAttributeType_Rage = 128;
  EAttributeType_RageRecover = 129;
  EAttributeType_RagePunishTime = 130;
  EAttributeType_RageChange = 131;
  EAttributeType_RageReduce = 132;
  EAttributeType_ToughRecoverDelayTime = 133;
  EAttributeType_Jump = 134;
  EAttributeType_ParalysisTimeMax = 135;
  EAttributeType_ParalysisTime = 136;
  EAttributeType_ParalysisTimeRecover = 137;
  EAttributeType_EAttributeType_MAX = 138;
}

message GameplayAttributeData {
  int32 CurrentValue = 1;
  int32 ValueIncrement = 2;
  EAttributeType AttributeType = 3;
}

message AttrData {
  EAttributeType AttributeType = 1;
  int32 CurrentValue = 2;
  int32 ValueIncrement = 3;
}

message GameplayTagData {
  int32 Id = 1;
  int32 TagCount = 2;
}

message CommonTagData {
  int32 TagId = 1;
  bool RemoveTagIds = 2;
}

message MovementInformation {
  Vector LinearVelocity = 1;
  Vector AngularVelocity = 2;
  Vector Location = 3;
  Rotator Rotation = 4;
  bool bSimulatedPhysicSleep = 5;
  bool bRepPhysics = 6;
  int32 MovementMode = 7;
  float TimeStamp = 8;
  int32 InputDirection = 9;
  bool ResetMeshOffset = 10;
  bool IsJump = 11;
  float HorizontalJumpSpeed = 12;
}

message RelativeMoveReplaySample {
  int64 BaseMovementEntityId = 1;
  Vector RelativeLocation = 2;
  Rotator RelativeRotation = 3;
}

message MoveReplaySample {
  Vector LinearVelocity = 1;
  Vector Location = 2;
  Rotator Rotation = 3;
  int32 MovementMode = 4;
  float TimeStamp = 5;
  int32 InputDirection = 6;
  repeated GameplayTagData Tags = 7;
  RelativeMoveReplaySample RelativeMoveReplaySample = 8;
  float ControllerPitch = 9;
  float TimeScale = 10;
  int64 ServerTimeStamp = 11;
  int32 RTT = 12;
  Vector SlideForward = 13;
  int32 MoveState = 14;
  int32 SkillId = 15;
  int32 ElapsedLogicTickTime = 16;
}

message PrivateTag {
  int32 PlayerId = 1;
  repeated string Tags = 31;
}

message InstanceOwnerInfo {
  bool IsFinishMingSuGen = 1;
}

message Qks {
  int64 CreatureGenId = 1;
}

message AceAntiAttrData {
  int32 Id = 1;
  float Value = 2;
  bool _Ss = 3;
}

message CombatCommon {
  int64 PreMessageId = 1;
  int64 MessageId = 2;
  int64 Originator = 3;
  float TimeStamp = 4;
  int64 EntityId = 5;
  bool IsServerRequest = 6;
}

message EntityRemoveInfo {
  int64 EntityId = 1;
  int32 Type = 2;
}

message RoleShowEntry {
  int32 RoleId = 1;
  int32 Level = 2;
}

message PlayerDetails {
  int32 PlayerId = 1;
  string Name = 2;
  int32 Level = 3;
  int32 OriginWorldLevel = 4;
  int32 CurWorldLevel = 5;
  int32 HeadId = 6;
  int32 HeadFrameId = 7;
  string Signature = 8;
  bool IsOnline = 9;
  bool IsCanLobbyOnline = 10;
  int64 LastOfflineTime = 11;
  int32 TeamMemberCount = 12;
  int32 LevelGap = 13;
  int32 Birthday = 14;
  repeated RoleShowEntry RoleShowList = 15;
  repeated int32 CardShowList = 16;
  int32 CurCard = 17;
  bool DisplayBirthday = 18;
  int64 y0a = 19;
  string SdkUserId = 20;
  string SdkOnlineId = 21;
  string SdkAccountId = 22;
  bool CrossPlayEnabled = 23;
  int32 LimitState = 24;
  int32 PlayerTitleId = 25;
  int32 CurPlayerTitleId = 26;
  int32 Sex = 27;
}

message EntitySimplyMoveInfo {
  int64 EntityId = 1;
  Vector Location = 2;
  Rotator Rotation = 3;
}

// MessageId: 28584 (Push)
message AceAntiDataPush {
  bytes AntiData = 14;
}

// MessageId: 27311 (Notify)
message AceAntiDataNotify {
  bytes AntiData = 1;
}

message AchievementProgress {
  int32 CurProgress = 1;
  int32 TotalProgress = 2;
}

message AchievementEntry {
  int32 Id = 1;
  uint32 FinishTime = 2;
  bool IsReceive = 3;
  AchievementProgress Progress = 4;
}

message AchievementGroupEntry {
  int32 Id = 1;
  uint32 FinishTime = 2;
  bool IsReceive = 3;
}

message AchievementGroupInfo {
  AchievementGroupEntry AchievementGroupEntry = 1;
  repeated AchievementEntry AchievementEntryList = 2;
}

// MessageId: 29711 (Request)
message AchievementInfoRequest {
}

// MessageId: 23223 (Response)
message AchievementInfoResponse {
  repeated AchievementGroupInfo AchievementGroupInfoList = 14;
  int32 AchievementFinishedStar = 10;
  int32 FinishedAchievementNum = 13;
}

// MessageId: 23589 (Request)
message AchievementReceiveRequest {
  bool IsGroupId = 7;
  int32 Id = 10;
}

// MessageId: 23207 (Response)
message AchievementReceiveResponse {
  ErrorCode ErrorCode = 14;
  repeated string ErrorParams = 10;
  map<int32, int32> ItemMap = 13;
}

// MessageId: 23304 (Notify)
message AchievementProgressNotify {
  AchievementEntry AchievementEntry = 4;
}

// MessageId: 24402 (Notify)
message AchievementListProgressNotify {
  repeated AchievementEntry AchievementEntryList = 9;
}

// MessageId: 24566 (Notify)
message AchievementGroupProgressNotify {
  AchievementGroupEntry AchievementGroupEntry = 4;
}

// MessageId: 25832 (Request)
message AchievementFinishRequest {
  int32 Id = 4;
}

// MessageId: 25772 (Response)
message AchievementFinishResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 17485 (Notify)
message AchievementCountChangeNotify {
  int32 AchievementFinishedStar = 7;
  int32 FinishedAchievementNum = 9;
}

// MessageId: 26727 (Request)
message UpdateAchievementInfoRequest {
}

// MessageId: 23062 (Response)
message UpdateAchievementInfoResponse {
  ErrorCode ErrorCode = 14;
  repeated AchievementEntry AchievementEntryList = 8;
}

// MessageId: 25630 (Notify)
message LevelEventNotify {
  int32 PlayerId = 13;
  int32 IncId = 7;
  GameCtxPb GameCtx = 10;
  int32 TotalCount = 6;
  int32 StartIndex = 4;
  int32 EndIndex = 9;
  bool NeedFinishReq = 2;
}

// MessageId: 29238 (Notify)
message jnc2 {
  int32 PlayerId = 7;
  int32 IncId = 9;
}

// MessageId: 17180 (Notify)
message ActionErrorCodeNotify {
  int32 IncId = 10;
  GameCtxPb GameCtx = 3;
  int32 Index = 1;
  ErrorCode ErrorCode = 12;
}

// MessageId: 20544 (Request)
message ActionFinishRequest {
  int32 PlayerId = 7;
  int32 IncId = 6;
  int32 StartIndex = 5;
  string ErrorMsg = 10;
}

// MessageId: 20342 (Response)
message ActionFinishResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 23586 (Request)
message GmLevelActionRequest {
  string JsonStr = 1;
}

// MessageId: 18458 (Response)
message GmLevelActionResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 18131 (Notify)
message OperationRestrictionNotify {
  string Params = 7;
  bool IsNull = 1;
}

enum rn_1 {
  rn__None = 0;
  rn__ActionOpenSystem = 1;
  rn__SoaringChallenge = 2;
  rn__FishingHandIn = 3;
}

message YZl {
  int32 HZl = 1;
  int32 DOLLARZl = 2;
  int32 WZl2 = 3;
  int32 Score = 4;
}

message uS_ {
  int32 aS_1 = 1;
}

message XZl2 {
  int32 QZl4 = 1;
}

message on_1 {
  oneof Message {
    XZl2 XZl = 3;
    YZl YZl = 4;
    uS_ uS_ = 5;
  }
  int32 KZl2 = 1;
  int32 IncId = 2;
}

// MessageId: 29102 (Notify)
message ActionOpenSystemBoardNotify {
  int32 PlayerId = 10;
  on_1 K4s = 8;
}

// MessageId: 28032 (Request)
message OpenSystemBoardResultRequest {
  int32 PlayerId = 2;
  int32 Result = 11;
  int32 IncId = 13;
}

// MessageId: 20819 (Response)
message OpenSystemBoardResultResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 16307 (Notify)
message TeleportDungeonNotify {
  int32 TeleportDungeonActionHostIdHandle = 2;
  int32 IncId = 15;
  int32 DungeonInstanceId = 1;
  bool IsFormTeleportAction = 11;
  bool InstType = 5;
  bool nDc2 = 8;
}

// MessageId: 17425 (Request)
message TeleportDungeonRequest {
  int32 TeleportDungeonActionHostIdHandle = 12;
  int32 IncId = 11;
  repeated int32 RoleIds = 5;
  bool ybs2 = 9;
  bool nDc2 = 2;
}

// MessageId: 23815 (Response)
message TeleportDungeonResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 15952 (Notify)
message ActionRelatedEntityInfoNotify {
  repeated ZZl ZZl = 11;
  repeated ee_1 ee_2 = 2;
}

message ZZl {
  int64 EntityId = 1;
  int32 StateTagId = 2;
}

message ee_1 {
  int64 EntityId = 1;
  bool te_2 = 2;
}

// MessageId: 24855 (Notify)
message Chc {
  int32 PlayerId = 8;
  int32 IncId = 2;
  GameCtxPb GameCtx = 4;
}

// MessageId: 17476 (Notify)
message soc {
  int32 PlayerId = 5;
  int32 IncId = 7;
}

enum GameCtxType {
  GameCtxType_Default = 0;
  GameCtxType_pvs = 1;
  GameCtxType_EntityInteractAction = 2;
  GameCtxType_EntityDynamicInteract = 3;
  GameCtxType_Evs = 4;
  GameCtxType_EntityStateChangeAction = 5;
  GameCtxType_EntityGroupAction = 6;
  GameCtxType_EntityTriggerAction = 7;
  GameCtxType_EntityLeaveTrigger = 8;
  GameCtxType_SceneItemDestructibleAction = 9;
  GameCtxType_TimeTrackControlAction = 10;
  GameCtxType_RefreshAction = 11;
  GameCtxType_SceneGameplay = 12;
  GameCtxType_BehaviorActiveAction = 13;
  GameCtxType_BehaviorAcceptAction = 14;
  GameCtxType_BehaviorFinishAction = 15;
  GameCtxType_ChildQuest_BehaviorTreeStartAction_EnterAction = 16;
  GameCtxType_ChildQuest_BehaviorTreeStartAction_FinishAction = 17;
  GameCtxType_QuestSucceed_BehaviorTreeStartAction_FinishAction = 18;
  GameCtxType_QuestFailed_BehaviorTreeStartAction_FinishAction = 19;
  GameCtxType_BehaviorTreeStartAction_EnterAction = 20;
  GameCtxType_kvs = 21;
  GameCtxType_Nvs = 22;
  GameCtxType_Fvs = 23;
  GameCtxType_Vvs2 = 24;
  GameCtxType_BehaviorTreeStartAction_Action = 25;
  GameCtxType_ExploreInteractAction = 26;
  GameCtxType_jvs = 27;
  GameCtxType_GmBehaviorListAction = 28;
  GameCtxType_GmPlayFlow = 29;
  GameCtxType_SceneItemLifeCycleComponentCreate = 30;
  GameCtxType_SceneItemLifeCycleComponentDetroy = 31;
  GameCtxType_GameCtxGm = 32;
  GameCtxType_FlowActionCtx = 33;
  GameCtxType_BehaviorTerminateAction = 34;
  GameCtxType_ChildQuestNodeFixAction = 35;
  GameCtxType_ConditionNodeFixAction = 36;
  GameCtxType_EntityFixAction = 37;
  GameCtxType_ConditionNode = 38;
  GameCtxType_EntityBeamReceiveAction = 39;
  GameCtxType_EntityGroupFailureAction = 40;
  GameCtxType_ChildQuestNodeCondition = 41;
  GameCtxType_EntityStateChangeConditionAction = 42;
  GameCtxType_RequestPlayerGameCurrStateBt = 43;
  GameCtxType_RequestEntityCurrState = 44;
  GameCtxType_TriggerConditionListeningAction = 45;
  GameCtxType_F7s = 46;
  GameCtxType_EntityVisibleCondition = 47;
  GameCtxType_FailedNodeTeleport = 48;
  GameCtxType_LeaveInstEscActionCtx = 49;
  GameCtxType_TrampleActiveActionCtx = 50;
  GameCtxType_TrampleDeActiveActionCtx = 51;
  GameCtxType_DefaultGameCtx = 52;
  GameCtxType_LevelPlayExploratoryCtx = 53;
  GameCtxType_RenjuCompleteActionCtx = 54;
  GameCtxType_JigsawFoundationMatchedActionCtx = 55;
  GameCtxType_CompositionFixAction = 56;
  GameCtxType_ES_ = 57;
  GameCtxType_HookLockPointActionCtx = 58;
  GameCtxType_ClientTriggerActionCtx = 59;
  GameCtxType_ExploreSkillCustomAction = 60;
  GameCtxType_LevelSequenceFrameEventAction = 61;
  GameCtxType_JigsawFoundationMatchedConditionActionCtx = 62;
  GameCtxType_CameraAlertComponentCreate = 63;
  GameCtxType_RenjuExitMatchedAction = 64;
  GameCtxType_RenjuExitUnMatchedAction = 65;
  GameCtxType_hsc = 66;
  GameCtxType_EffectAreaConditionListeningAction = 67;
  GameCtxType_OccupationInfoAction = 68;
  GameCtxType_EntityHeadInfoCondition = 69;
  GameCtxType_DOLLARb1 = 70;
}

message GameCtxPb {
  oneof LOs {
    BehaviorTreeCtxPb BehaviorTree = 2;
    EntityCtxPb Entity = 3;
    NormalInteractCtxPb NormalInteract = 4;
    DynamicInteractCtxPb DynamicInteract = 5;
    RandomInteractCtxPb RandomInteract = 6;
    StateChangeActionCtxPb StateChangeAction = 7;
    EntityGroupActionCtxPb EntityGroupAction = 8;
    EntityTriggerCtxPb EntityTrigger = 9;
    EntityLeaveTriggerCtxPb EntityLeaveTriggerCtx = 10;
    EntityDestructibleCtxPb EntityDestructible = 11;
    EntityTimelineTrackCtxPb EntityTimelineTrack = 12;
    LevelPlayOpenActionCtxPb LevelPlayOpenAction = 13;
    LevelPlayRewardActionCtxPb LevelPlayRewardAction = 14;
    QuestActiveActionCtxPb QuestActiveAction = 15;
    QuestAcceptActionCtxPb QuestAcceptAction = 16;
    QuestFinishActionCtxPb QuestFinishAction = 17;
    ChildQuestNodeEnterActionCtxPb ChildQuestNodeEnterAction = 18;
    ChildQuestNodeFinishActionCtxPb ChildQuestNodeFinishAction = 19;
    SuccessNodeActionCtxPb SuccessNodeAction = 20;
    FailedNodeActionCtxPb FailedNodeAction = 21;
    CompositionEnterActionCtxPb CompositionEnterAction = 22;
    EntityConditionListeningActionCtxPb EntityConditionListeningAction = 23;
    PlayFlowChildQuestNodeCtxPb PlayFlowChildQuestNode = 24;
    HandInItemChildQuestNodeCtxPb HandInItemChildQuestNode = 25;
    DoInteractChildQuestNodeCtxPb DoInteractChildQuestNode = 26;
    ActionGroupNodeActionCtxPb ActionGroupNodeAction = 27;
    ExploreSkillPullGiantCtxPb ExploreSkillPullGiantAction = 28;
    LevelPlayCtxPb LevelPlay = 29;
    GmLevelActionCtxPb GmLevelAction = 30;
    SceneItemLifeCycleComponentCreateCtxPb LifeCycleCreateAction = 31;
    SceneItemLifeCycleComponentDestroyCtxPb LifeCycleDestroyAction = 32;
    FlowActionCtxPb FlowAction = 33;
    DailyQuestTerminateActionCtxPb DailyQuestTerminateAction = 34;
    BeamReceiveAction EntityBeamReceiveAction = 35;
    aks zvs = 36;
    SceneItemStateChangeConditionAction EntityStateChangeConditionAction = 37;
    z7s1 F7s = 38;
    LeaveInstEscActionCtxPb LeaveInstEscActionCtx = 39;
    TrampleActivateAction TrampleActiveAction = 40;
    TrampleDeActiveAction TrampleDeActiveAction = 41;
    nn_2 aa_ = 42;
    sn_2 re_1 = 43;
    an_2 oe_ = 44;
    hn_1 ne_ = 45;
    ln_1 dpl = 46;
    _n_2 se_1 = 47;
    cn_2 ae_2 = 48;
    aw_2 IS_ = 49;
    Wb1 DOLLARb1 = 50;
  }
  int32 CtxType = 1;
}

message EntityCtxPb {
  int32 ConfigId = 1;
  int64 IncId = 2;
}

message NormalInteractCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 OptionIndex = 2;
}

message DynamicInteractCtxPb {
  EntityCtxPb EntityCtx = 1;
  string OptionGuid = 2;
}

message RandomInteractCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 OptionIndex = 2;
}

message StateChangeActionCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 StateIndex = 2;
}

message SceneItemStateChangeConditionAction {
  EntityCtxPb EntityCtx = 1;
  int32 StateIndex = 2;
  int32 ConditionIndex = 3;
}

message EntityGroupActionCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 TriggerIndex = 2;
  bool IsMatch = 3;
}

message aks {
  EntityCtxPb EntityCtx = 1;
}

message EntityTriggerCtxPb {
  EntityCtxPb EntityCtx = 1;
  int64 TriggerEntityIncId = 2;
}

message ln_1 {
  EntityCtxPb EntityCtx = 1;
  bool IsEnter = 2;
}

message EntityLeaveTriggerCtxPb {
  EntityCtxPb EntityCtx = 1;
  int64 TriggerEntityIncId = 2;
}

message EntityDestructibleCtxPb {
  EntityCtxPb EntityCtx = 1;
}

enum EntityTimelineEventType {
  EntityTimelineEventType_LeftIn = 0;
  EntityTimelineEventType_LeftOut = 1;
  EntityTimelineEventType_RightIn = 2;
  EntityTimelineEventType_RightOut = 3;
}

message EntityTimelineTrackCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 GroupIndex = 2;
  int32 ControlPoint = 3;
  int32 EventType = 4;
}

message EntityConditionListeningActionCtxPb {
  EntityCtxPb EntityCtx = 1;
  int32 EntityConditionListeningIndex = 2;
}

message ExploreSkillPullGiantCtxPb {
  EntityCtxPb EntityCtx = 1;
}

message _n_2 {
  EntityCtxPb EntityCtx = 1;
}

message GmLevelActionCtxPb {
  string JsonStr = 1;
}

message SceneItemLifeCycleComponentCreateCtxPb {
  EntityCtxPb EntityCtx = 1;
}

message SceneItemLifeCycleComponentDestroyCtxPb {
  EntityCtxPb EntityCtx = 1;
}

message TrampleActivateAction {
  EntityCtxPb EntityCtx = 1;
}

message TrampleDeActiveAction {
  EntityCtxPb EntityCtx = 1;
}

message nn_2 {
  EntityCtxPb EntityCtx = 1;
  int32 he_1 = 2;
}

message sn_2 {
  EntityCtxPb EntityCtx = 1;
  int32 le_2 = 2;
}

message an_2 {
  EntityCtxPb EntityCtx = 1;
  int32 le_2 = 2;
}

message cn_2 {
  EntityCtxPb EntityCtx = 1;
  int32 le_2 = 2;
  int32 ConditionIndex = 3;
}

message BehaviorTreeCtxPb {
  int64 IncId = 1;
  BtType BtType = 2;
  int32 BtId = 3;
  int32 NodeId = 4;
}

message LevelPlayCtxPb {
  int32 LevelPlayId = 1;
}

message LevelPlayOpenActionCtxPb {
  int32 LevelPlayId = 1;
}

message aw_2 {
  int32 LevelPlayId = 1;
}

message LevelPlayRewardActionCtxPb {
  int32 LevelPlayId = 1;
}

message QuestActiveActionCtxPb {
  int32 QuestId = 1;
}

message QuestAcceptActionCtxPb {
  int32 QuestId = 1;
}

message QuestFinishActionCtxPb {
  int32 QuestId = 1;
}

message DailyQuestTerminateActionCtxPb {
  int32 QuestId = 1;
}

message Wb1 {
  int32 QuestId = 1;
}

message LeaveInstEscActionCtxPb {
  int32 InstanceId = 1;
}

message ChildQuestNodeEnterActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message ChildQuestNodeFinishActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message SuccessNodeActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message FailedNodeActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message CompositionEnterActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message PlayFlowChildQuestNodeCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message HandInItemChildQuestNodeCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message DoInteractChildQuestNodeCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message ActionGroupNodeActionCtxPb {
  BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message FlowActionCtxPb {
  string FlowListName = 1;
  int32 FlowId = 2;
  int32 StateId = 3;
  int32 ActionId = 4;
}

enum BeamReceiveActionType {
  BeamReceiveActionType_BeginAction = 0;
  BeamReceiveActionType_CompleteAction = 1;
  BeamReceiveActionType_StopAction = 2;
}

message BeamReceiveAction {
  BeamReceiveActionType ReceiveType = 1;
  EntityCtxPb EntityCtx = 2;
}

message z7s1 {
  string FlowListName = 1;
  int32 FlowId = 2;
  int32 StateId = 3;
}

enum un_2 {
  un__Hooked = 0;
  un__ExitMidway = 1;
  un__ExitEndpoint = 2;
}

message hn_1 {
  EntityCtxPb EntityCtx = 1;
  int32 _e_ = 2;
}

message Kca {
  repeated SignReward SignInReward = 1;
  repeated SignReward DOLLARca = 2;
  repeated int32 Hca = 3;
  bool NowOpen = 5;
  int64 EndTime = 6;
  int64 NextRefreshTime = 7;
}

enum ActivityType {
  ActivityType_Parkour = 0;
  ActivityType_GatherActivity = 1;
  ActivityType_Sign = 2;
  ActivityType_TowerGuide = 3;
  ActivityType_NewBieCourse = 4;
  ActivityType_WorldNewJourney = 5;
  ActivityType_RougeActivity = 6;
  ActivityType_DoubleInstanceRewardActivity = 7;
  ActivityType_RoleTrialActivity = 8;
  ActivityType_Harvest = 9;
  ActivityType_NewRoleGuideActivity = 10;
  ActivityType_PhantomCollect = 11;
  ActivityType_DailyAdventureActivity = 12;
  ActivityType_LongShanMainActivity = 13;
  ActivityType_BossRushActivity = 14;
  ActivityType_TurnTableActivity = 15;
  ActivityType_PhotoMemoryActivity = 16;
  ActivityType_TrackMoonActivity = 17;
  ActivityType_CircumFluence = 18;
  ActivityType_TowerDefenceActivity = 19;
  ActivityType_TimePointRewardActivity = 20;
  ActivityType_TowerGuideNew = 21;
  ActivityType_TrackMoonPhase = 22;
  ActivityType_RiskHarvest = 23;
  ActivityType_CorniceMeeting = 24;
  ActivityType_BlackCoastTheme = 25;
  ActivityType_RogueWhiteCat = 26;
  ActivityType_ScratchCard = 27;
  ActivityType_PreheatSign = 28;
  ActivityType_MowTower = 29;
  ActivityType_ThroughTrain = 30;
  ActivityType_SprintSign = 31;
  ActivityType_MapTravelActivity = 32;
  ActivityType_FarmGold = 33;
  ActivityType_NewLordGym = 34;
  ActivityType_RoleSkinTrialActivity = 35;
  ActivityType_RogueWeekly = 36;
  ActivityType_FishingActivity = 37;
  ActivityType_TeamParkOurActivity = 38;
  ActivityType_SlashAndTowerLevelPlay = 39;
  ActivityType_BabelTower = 40;
  ActivityType_Avignon = 41;
  ActivityType_BetHorses = 42;
  ActivityType_Explore = 43;
  ActivityType_Abyss = 44;
  ActivityType_RogueRes = 45;
  ActivityType_H5CircumFluence = 46;
  ActivityType_DangoMonopoly = 47;
  ActivityType_CiacconaActivity = 48;
  ActivityType_ActivityLinkage = 49;
  ActivityType_RegressActivity = 50;
  ActivityType_ConsumptiveActivity = 51;
  ActivityType_PureUIActivity = 200;
}

message ParkourActivityChallenge {
  int32 ChallengeId = 1;
  int64 BeginTime = 2;
  int64 EndTime = 3;
}

message ParkourActivity {
  repeated ParkourActivityChallenge Challenges = 1;
}

message DoubleInstActivityReward {
  int32 GetDoubleInstRwdCount = 1;
}

enum GatherActivityTaskState {
  GatherActivityTaskState_GatherLock = 0;
  GatherActivityTaskState_GatherRunning = 1;
  GatherActivityTaskState_GatherInComplete = 2;
  GatherActivityTaskState_GatherDone = 3;
  GatherActivityTaskState_GatherTakeReward = 4;
}

message GatherTaskDoneInfo {
  int32 TaskId = 1;
  int32 State = 2;
}

message GatherActivityInfo {
  repeated GatherTaskDoneInfo GatherTaskDoneInfo = 1;
}

enum SignState {
  SignState_Z6n = 0;
  SignState_CMs = 1;
  SignState_ovs = 2;
}

message SignActivity {
  repeated int32 SignStateList = 1;
}

message HarvestPointReward {
  int32 Id = 1;
  int32 State = 2;
}

message HarvestLevelReward {
  int32 Id = 1;
  int32 StartTime = 2;
  bool Challenges = 3;
  int32 Points = 4;
  int32 Diff = 5;
  int32 State = 6;
}

message HarvestActivity {
  repeated HarvestPointReward HarvestPointRewards = 1;
  repeated HarvestLevelReward HarvestLevelRewards = 2;
}

message NewBieCourseActivity {
  repeated int32 HadTakeReward = 1;
}

message RoleTrialTask {
  int32 RoleId = 1;
  int32 ChallengeState = 2;
}

message RoleTrialInfoActivity {
  repeated RoleTrialTask RoleTrialTask = 1;
}

enum PhantomCollectRewardType {
  PhantomCollectRewardType_PhantomsCollect = 0;
  PhantomCollectRewardType_DataDock = 1;
  PhantomCollectRewardType_PhantomSideQuest = 2;
  PhantomCollectRewardType_Max = 3;
}

message PhantomCollectReward {
  oneof Data {
    PhantomCollectProgress Progress = 3;
  }
  int32 Type = 1;
  int32 State = 2;
}

message PhantomCollectProgress {
  repeated int32 Phantoms = 1;
}

message PhantomCollectActivity {
  repeated PhantomCollectReward PhantomCollectRewards = 1;
}

message ActivityRogueData {
  int64 BeginOpenTime = 1;
  int64 EndOpenTime = 2;
  RoguelikeSeason RoguelikeSeason = 3;
}

message RoguelikeTokenList {
  int32 Id = 1;
  bool IsReceive = 2;
}

message RoguelikeMemoryRewardItemData {
  int32 Id = 1;
  bool IsReceive = 2;
}

message RoguelikeSeason {
  int32 SeasonId = 1;
  int64 StartTime = 2;
  int64 EndTime = 3;
  repeated RoguelikeTokenList RoguelikeTokenList = 4;
  repeated RoguelikeMemoryRewardItemData SeasonRewardList = 5;
  int32 TokenItemCount = 6;
  int32 ue_ = 7;
  int32 de_1 = 8;
}

message ActivityRoleGiveData {
  bool IsGetReward = 1;
}

message ActivityCorniceMeetingData {
  int64 UnlockTime = 1;
  map<int32, ActivityCorniceMeetingLevelEntryData> LevelEntryData = 2;
}

message ActivityData {
  oneof Data {
    ParkourActivity ParkourActivity = 10;
    SignActivity SignActivity = 11;
    NewBieCourseActivity NewBieCourseActivity = 12;
    DoubleInstActivityReward DoubleInstActivityReward = 13;
    HarvestActivity HarvestActivity = 14;
    RoleTrialInfoActivity RoleTrialInfoActivity = 15;
    PhantomCollectActivity PhantomCollectActivity = 16;
    GatherActivityInfo GatherActivityInfo = 17;
    DailyAdventureActivityData DailyAdventureActivityData = 18;
    ActivityRogueData ActivityRogueData = 19;
    vks Kps = 20;
    ActivityTurnTableData ActivityTurnTableData = 21;
    Xps1 Xps = 22;
    ActivityMoonChasingData ActivityMoonChasingData = 23;
    xYs xYs = 24;
    Lzs pzs = 25;
    Kca Qca = 26;
    ActivityRoleGiveData ActivityRoleGiveData = 27;
    ActivityCorniceMeetingData ActivityCorniceMeetingData = 28;
    Se_2 Se_ = 29;
    ActivityBlackCoastData ActivityBlackCoastData = 31;
    Ee_2 Ee_1 = 32;
    Ie_ Ie_ = 34;
    Te_1 Te_2 = 35;
    be_2 be_ = 36;
    Twl Twl = 37;
    Le_1 Le_ = 38;
    we_ we_ = 39;
    Re_2 Re_ = 40;
    QS_ QS_ = 41;
    SN_3 SN_ = 43;
    JN_ JN_ = 44;
    EX_1 EX_ = 45;
    qJ_1 Wz_ = 46;
    ltc ltc = 47;
    vsc vsc = 48;
    ysc ysc = 49;
    Ssc1 Ssc = 50;
    Ywc DOLLARwc = 51;
    PAc1 LAc = 52;
    JNc1 JNc = 53;
    Ro1 Ro1 = 54;
    Qa1 Qa1 = 55;
    _d1 _d1 = 56;
  }
  int32 Id = 1;
  int32 Type = 2;
  int64 BeginShowTime = 3;
  int64 EndShowTime = 4;
  int64 BeginOpenTime = 5;
  int64 EndOpenTime = 6;
  bool IsUnlock = 7;
  repeated int32 CompletePreQuests = 8;
  bool IsFirstOpen = 9;
  repeated int32 Ce_ = 30;
  int32 ge_2 = 33;
  bool nk_ = 42;
}

// MessageId: 28575 (Request)
message ActivityRequest {
}

// MessageId: 21437 (Response)
message ActivityResponse {
  repeated ActivityData Activities = 8;
  ErrorCode ErrorCode = 14;
}

// MessageId: 26925 (Request)
message ActivityFirstReadRequest {
  int32 ActivityId = 13;
}

// MessageId: 25947 (Response)
message ActivityFirstReadResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 26498 (Notify)
message ActivityUpdateNotify {
  repeated ActivityData Activities = 13;
}

// MessageId: 25939 (Notify)
message ActivityDisableNotify {
  repeated int32 ActivityId = 10;
}

// MessageId: 16657 (Request)
message SignActivityRequest {
  int32 ActivityId = 8;
  int32 Index = 10;
}

// MessageId: 20828 (Response)
message SignActivityResponse {
  ErrorCode ErrorCode = 10;
  map<int32, int32> ItemMap = 3;
}

// MessageId: 23897 (Notify)
message SignActivitySignStateNotify {
  int32 ActivityId = 3;
  int32 Index = 6;
  int32 SignState = 5;
}

// MessageId: 28644 (Notify)
message SignActivityKeepTimeNotify {
  int32 ActivityId = 8;
  int64 KeepTime = 6;
}

// MessageId: 27337 (Request)
message HarvestActivityPointRequest {
  int32 ActivityId = 14;
  int32 Id = 7;
}

// MessageId: 23261 (Response)
message HarvestActivityPointResponse {
  ErrorCode ErrorCode = 10;
  map<int32, int32> ItemMap = 1;
}

// MessageId: 21140 (Request)
message HarvestActivityLevelRequest {
  int32 ActivityId = 13;
  int32 InstId = 10;
}

// MessageId: 29122 (Response)
message HarvestActivityLevelResponse {
  ErrorCode ErrorCode = 9;
  map<int32, int32> ItemMap = 10;
}

// MessageId: 18967 (Request)
message HarvestActivityLevelDiffRequest {
  int32 ActivityId = 1;
  int32 InstId = 13;
  int32 Diff = 8;
}

// MessageId: 17041 (Response)
message HarvestActivityLevelDiffResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 20997 (Notify)
message HarvestActivityPointNotify {
  int32 ActivityId = 7;
  repeated HarvestPointReward HarvestPointReward = 2;
}

// MessageId: 23729 (Notify)
message HarvestActivityLevelNotify {
  int32 ActivityId = 13;
  repeated HarvestLevelReward HarvestLevelRewards = 7;
}

// MessageId: 18053 (Request)
message HarvestActivityResultRequest {
}

// MessageId: 25249 (Response)
message HarvestActivityResultResponse {
}

// MessageId: 18677 (Notify)
message HarvestActivityResultNotify {
  bool Succ = 4;
  int32 Record = 9;
  int32 MaxRecord = 2;
  ErrorCode ErrorCode = 11;
}

// MessageId: 23047 (Request)
message PhantomCollectReceiveRequest {
  int32 ActivityId = 10;
  int32 Type = 15;
}

// MessageId: 24781 (Response)
message PhantomCollectReceiveResponse {
  ErrorCode ErrorCode = 7;
  map<int32, int32> ItemMap = 15;
}

// MessageId: 15796 (Notify)
message PhantomCollectUpdateNotify {
  int32 ActivityId = 10;
  PhantomCollectReward PhantomCollectReward = 11;
}

// MessageId: 18606 (Request)
message TurntableRunRequest {
  int32 ActivityId = 11;
}

// MessageId: 23531 (Response)
message TurntableRunResponse {
  ErrorCode ErrorCode = 8;
  int32 N6n = 5;
  bool nMs2 = 7;
  map<int32, int32> ItemMap = 13;
}

// MessageId: 25611 (Notify)
message nJl {
  SignReward Ae_1 = 9;
}

message ActivityTurnTableData {
  bool sMs2 = 1;
  int32 GroupId = 2;
  repeated int32 Rewards = 3;
  repeated SignReward xe_1 = 4;
}

// MessageId: 24078 (Request)
message TrackMoonActivityRewardRequest {
  int32 ActivityId = 10;
}

// MessageId: 19346 (Response)
message TrackMoonActivityRewardResponse {
  ErrorCode ErrorCode = 10;
}

message ActivityCorniceMeetingLevelEntryData {
  int32 MaxScore = 1;
  int32 RemainTime = 2;
  int64 UnlockTime = 3;
  repeated int32 RewardedMap = 4;
}

// MessageId: 22773 (Request)
message CorniceMeetingRewardRequest {
  int32 LevelPlayId = 15;
  int32 ScoreIndex = 7;
}

// MessageId: 25300 (Response)
message CorniceMeetingRewardResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 19989 (Notify)
message CorniceMeetingActivityDataNotify {
  int32 LevelPlayId = 1;
  int32 Score = 10;
  int32 RemainTime = 5;
  bool De_2 = 15;
  bool Be_1 = 12;
}

// MessageId: 20698 (Request)
message CorniceMeetingChallengeTransRequest {
  int32 LevelPlayId = 9;
}

// MessageId: 15350 (Response)
message CorniceMeetingChallengeTransResponse {
  ErrorCode ErrorCode = 15;
}

message Cn_1 {
  int32 Id = 1;
  repeated SignReward Tasks = 2;
}

message ActivityBlackCoastData {
  repeated Cn_1 StageData = 1;
  repeated int32 RewardIds = 2;
}

// MessageId: 15203 (Notify)
message ActivityBlackCoastDataNotify {
  repeated Cn_1 StageData = 5;
}

// MessageId: 28981 (Request)
message ActivityBlackCoastTaskRewardRequest {
  int32 TaskId = 8;
}

// MessageId: 18817 (Response)
message ActivityBlackCoastTaskRewardResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 24681 (Request)
message ActivityBlackCoastDataProgressRewardRequest {
  repeated int32 AllAvailableProgressRewardIds = 5;
  int32 ActivityId = 14;
}

// MessageId: 23167 (Response)
message ActivityBlackCoastDataProgressRewardResponse {
  repeated int32 RewardIds = 10;
  ErrorCode ErrorCode = 9;
}

message Ee_2 {
  int32 MaxEnergy = 1;
  repeated int32 SignStateList = 3;
  repeated RoleInstanceList RoleInstanceList = 5;
  repeated Ge_1 Ge_ = 6;
  repeated int32 BossRewardIds = 7;
  repeated AllLimitTimeReward AllLimitTimeReward = 8;
  map<int32, int32> Ve_ = 9;
  int64 je_1 = 10;
  int64 He_2 = 11;
  repeated vn_1 DOLLARe_ = 12;
  int32 PlayTime = 13;
  repeated int32 Qe_ = 14;
}

message AllLimitTimeReward {
  int32 SignState = 1;
  int32 CurProgress = 2;
  int32 Target = 3;
  int32 ConfigId = 4;
}

message RoleInstanceList {
  int32 InstId = 1;
  bool IsUnlock = 2;
  bool Xe_2 = 3;
}

message vn_1 {
  int32 InstId = 1;
  bool IsUnlock = 2;
  bool Xe_2 = 3;
  int64 UnlockTime = 4;
}

message Ge_1 {
  int32 Index = 1;
  int32 LevelPlayId = 2;
  int32 IsGetReward = 3;
  bool IsUnlock = 4;
  int64 UnlockTime = 5;
  int32 PlayTime = 6;
}

// MessageId: 26374 (Notify)
message DreamLinkActivityDataNotify {
  int32 ConfigId = 14;
  bool IsSuccess = 5;
  bool IsNewRecord = 2;
  int32 UseTime = 15;
}

// MessageId: 25497 (Notify)
message RoguelikeActivityDataNotify {
  int32 MapId = 7;
}

// MessageId: 25982 (Request)
message RoguelikeActivityDataRequest {
  int32 MapId = 8;
  bool zRl = 1;
}

// MessageId: 27146 (Response)
message RoguelikeActivityDataResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 16558 (Notify)
message fzl2 {
  bool Ye_1 = 2;
  int32 Yma = 11;
  int32 ze_2 = 9;
  int32 Je_2 = 4;
  int32 Ze_1 = 3;
  bool IsNewRecord = 15;
  int32 et_2 = 7;
  int32 CostTime = 5;
}

// MessageId: 25840 (Request)
message RoguelikeSetDungeonProgressRequest {
  int32 ActivityId = 4;
  int32 Value = 2;
}

// MessageId: 27172 (Response)
message RoguelikeSetDungeonProgressResponse {
  ErrorCode ErrorCode = 7;
}

// MessageId: 21667 (Notify)
message DreamLinkActivityDataUpdateNotify {
  int32 ActivityId = 8;
  Ee_2 Ee_1 = 9;
}

// MessageId: 28419 (Notify)
message DreamLinkActivityDataLimitTimeUpdateNotify {
  repeated AllLimitTimeReward AllLimitTimeReward = 15;
}

// MessageId: 22996 (Request)
message DreamLinkLimitTimeRewardRequest {
  int32 Index = 10;
}

// MessageId: 15709 (Response)
message DreamLinkLimitTimeRewardResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 24696 (Request)
message DreamLinkRoguelikeRoleInstStartRequest {
  int32 ActivityId = 3;
  int32 Index = 11;
}

// MessageId: 29845 (Response)
message DreamLinkRoguelikeRoleInstStartResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 21879 (Request)
message DreamLinkEnergyRewardRequest {
  int32 ActivityId = 12;
  int32 Index = 13;
}

// MessageId: 20814 (Response)
message DreamLinkEnergyRewardResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 20721 (Request)
message cXl {
  int32 ActivityId = 14;
  repeated int32 RoleList = 11;
}

// MessageId: 28580 (Response)
message uXl {
  ErrorCode ErrorCode = 3;
}

// MessageId: 25528 (Request)
message DreamLinkBossRewardRequest {
  int32 ActivityId = 13;
  int32 Index = 6;
}

// MessageId: 29222 (Response)
message DreamLinkBossRewardResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 29540 (Request)
message DreamLinkRunTaskRewardRequest {
  int32 ActivityId = 3;
  int32 Index = 6;
}

// MessageId: 17886 (Response)
message DreamLinkRunTaskRewardResponse {
  ErrorCode ErrorCode = 4;
}

message yn_1 {
  int32 Uol = 1;
  int64 UnlockTime = 2;
  map<int32, Sn_1> AreaStageRewardDataList = 3;
  map<int32, int32> tt_1 = 4;
}

message Sn_1 {
  int32 ItemId = 1;
  int32 Num = 2;
}

message ScratchTicketConditionData {
  int32 Id = 1;
  int32 Progress = 2;
  int32 FinishedAchievementNum = 3;
}

message Ie_ {
  repeated yn_1 it_2 = 1;
  repeated ScratchTicketConditionData ConditionData = 2;
}

// MessageId: 25213 (Notify)
message ScratchCardCountInfoNotify {
  repeated ScratchTicketConditionData ConditionData = 1;
}

// MessageId: 17352 (Request)
message SendScratchCardRewardRequest {
  int32 Uol = 2;
  int32 Index = 6;
}

// MessageId: 17070 (Response)
message SendScratchCardRewardResponse {
  int32 OpenType = 15;
  map<int32, Sn_1> ot_1 = 10;
  map<int32, int32> ItemMap = 14;
  map<int32, int32> tt_1 = 1;
  ErrorCode ErrorCode = 8;
}

// MessageId: 15996 (Request)
message SendScratchCardActivityInfoRequest {
  int32 ActivityId = 10;
}

// MessageId: 25319 (Response)
message SendScratchCardActivityInfoResponse {
  Ie_ Info = 11;
  ErrorCode ErrorCode = 2;
}

message Yyl {
  int32 yL = 1;
  int64 UnlockTime = 2;
  bool Rewarded = 3;
}

message Te_1 {
  repeated Yyl nt_ = 1;
}

message Le_1 {
  repeated SignReward st_1 = 1;
  bool at_3 = 2;
  repeated int32 ht_1 = 3;
  bool lt_2 = 4;
}

message ut_2 {
  int64 _t_ = 1;
  int64 ct_1 = 2;
  bool EL = 3;
}

// MessageId: 17985 (Request)
message RequestPreheatSignRewardRequest {
  int32 yL = 2;
  bool EL = 10;
}

// MessageId: 18934 (Response)
message RequestPreheatSignRewardResponse {
  ErrorCode ErrorCode = 12;
  ut_2 ut_1 = 4;
}

// MessageId: 23371 (Request)
message RequestPreheatSignSurveyInfoRequest {
  int32 yL = 8;
}

// MessageId: 28111 (Response)
message RequestPreheatSignSurveyInfoResponse {
  ut_2 ut_1 = 1;
  ErrorCode ErrorCode = 3;
}

enum In_1 {
  In__CanNoReward = 0;
  In__CanReward = 1;
  In__mLs = 2;
}

message Tn_1 {
  int32 cLl = 1;
  int64 UnlockTime = 2;
  bool IsUnlock = 3;
  int32 dt_2 = 4;
  int32 mt_1 = 9;
  map<int32, int32> ft_2 = 5;
  repeated int32 Dks = 6;
  repeated int32 pt_1 = 7;
  repeated int32 Ct_2 = 8;
}

message be_2 {
  repeated Tn_1 yLl = 1;
}

// MessageId: 21792 (Request)
message SettlementRequest {
}

// MessageId: 25430 (Response)
message SettlementResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 28391 (Notify)
message MowTowerFirstScoreNotify {
  int32 cLl = 13;
  int32 gt_1 = 9;
  int32 vt_1 = 4;
}

// MessageId: 20917 (Notify)
message bzl2 {
  int32 cLl = 15;
  int32 gt_1 = 5;
  int32 vt_1 = 8;
  int32 yt_2 = 1;
  int32 St_2 = 4;
  int32 AMs = 7;
}

// MessageId: 20249 (Notify)
message Kzl4 {
  repeated Tn_1 Mt_ = 5;
}

// MessageId: 22914 (Request)
message GetMowingTowerLevelRewardRequest {
  int32 N6n = 1;
}

// MessageId: 19534 (Response)
message GetMowingTowerLevelRewardResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 28135 (Request)
message ThroughTrainRequest {
  int32 ActivityId = 9;
}

// MessageId: 24640 (Response)
message ThroughTrainResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 27778 (Notify)
message ActivityDirectTrainNotify {
  int32 ActivityId = 5;
}

// MessageId: 22305 (Request)
message ThroughTrainFinishViewRequest {
  int32 ActivityId = 5;
}

// MessageId: 22318 (Response)
message ThroughTrainFinishViewResponse {
  ErrorCode ErrorCode = 8;
}

message Et_1 {
  int32 _9l = 1;
  int32 ChallengeState = 2;
}

message Re_2 {
  repeated Et_1 Et_1 = 1;
}

enum DN_1 {
  DN__Zero = 0;
}

message SN_3 {
  oneof BN {
    EN_ EN_ = 3;
  }
  int32 MN_1 = 1;
  int32 Score = 2;
  repeated kN_1 IN_ = 4;
  int32 TN_2 = 5;
  int32 bNa_ = 6;
  int32 MaxScore = 7;
  int32 CurWorldLevel = 8;
}

message kN_1 {
  int32 SignState = 1;
  int32 CurProgress = 2;
  int32 Target = 3;
  int32 ConfigId = 4;
}

// MessageId: 23839 (Request)
message sN_1 {
  int32 ActivityId = 4;
  int32 ConfigId = 2;
}

// MessageId: 28747 (Response)
message aN_2 {
  ErrorCode ErrorCode = 7;
}

message EN_ {
  int32 InstId = 1;
  int32 CurLayer = 2;
  int32 MaxLayer = 3;
  int32 I8_ = 4;
}

// MessageId: 26728 (Notify)
message hN_ {
  int32 CurLayer = 4;
  int32 MaxLayer = 3;
  int32 RoguelikeRoomTypeId = 2;
  int32 SkyBoxId = 11;
  int32 dL_ = 7;
}

enum qN_2 {
  qN__Normal = 0;
  qN__Special = 1;
  qN__Boss = 2;
}

// MessageId: 20696 (Request)
message lN_1 {
}

// MessageId: 15590 (Response)
message _N_1 {
  ErrorCode ErrorCode = 13;
}

// MessageId: 29486 (Notify)
message cN_2 {
  float X = 1;
  float Y = 14;
  float gqs2 = 6;
  float fqs = 5;
  repeated string cL_1 = 10;
  repeated string uL_1 = 15;
}

// MessageId: 26198 (Request)
message RogueWeeklyStartRequest {
  int32 CycleId = 7;
  repeated int32 Roles = 14;
}

// MessageId: 23785 (Response)
message RogueWeeklyStartResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 28438 (Request)
message dN_2 {
}

// MessageId: 19212 (Response)
message mN_2 {
  ErrorCode ErrorCode = 14;
}

// MessageId: 19555 (Notify)
message uN_2 {
  int32 CurLayer = 9;
  int32 MaxLayer = 12;
  int32 Score = 1;
}

// MessageId: 19689 (Notify)
message fN_2 {
  repeated int32 LN_2 = 1;
  map<int32, ON_> wN_ = 9;
}

message ON_ {
  repeated GN_2 RN_ = 1;
  int32 Type = 2;
}

enum FN_1 {
  FN__Unknow = 0;
  FN__Goods = 2;
  FN__CommonBuff = 9;
}

message GN_2 {
  oneof R5n {
    AN_3 AN_ = 4;
    PN_1 PN_ = 5;
  }
  int32 Index = 1;
  int32 Type = 2;
  int32 ConfigId = 3;
}

message AN_3 {
  bool IsNew = 1;
}

message PN_1 {
  bool IsNew = 1;
  bool O2s = 2;
  int32 xN_2 = 3;
  int32 UN_1 = 4;
}

// MessageId: 22890 (Request)
message gN_1 {
  int32 BindId = 15;
  int32 Index = 9;
}

// MessageId: 21942 (Response)
message CN_3 {
  ErrorCode ErrorCode = 6;
  repeated string ErrorParams = 2;
}

// MessageId: 25192 (Notify)
message yN_2 {
}

// MessageId: 16060 (Notify)
message aoc2 {
}

// MessageId: 21740 (Notify)
message S8_ {
  int32 MapId = 8;
}

// MessageId: 17633 (Request)
message M8_ {
  int32 MapId = 12;
  bool lUl = 9;
  bool T8_ = 2;
}

// MessageId: 18728 (Response)
message E8_ {
  ErrorCode ErrorCode = 5;
}

// MessageId: 22597 (Request)
message AW_1 {
  int32 ActivityId = 7;
}

// MessageId: 19681 (Response)
message PW_ {
  oneof BN {
    EN_ EN_ = 5;
  }
  ErrorCode ErrorCode = 1;
}

message vsc {
  repeated XUc1 XUc = 1;
  YUc YUc = 2;
}

message XUc1 {
  int32 UHn = 1;
  map<int32, int32> Mqs = 2;
  repeated int32 Msc2 = 3;
  repeated SignReward Esc = 4;
  repeated int32 zUc = 5;
  repeated int32 JUc1 = 6;
  int64 EndTime = 7;
  int32 Jc11 = 8;
}

message YUc {
  dnc2 dnc = 1;
  map<int32, int32> wsc = 2;
}

// MessageId: 26968 (Request)
message nnc2 {
  int32 SkillId = 15;
}

// MessageId: 27494 (Response)
message snc1 {
  ErrorCode ErrorCode = 15;
  int32 Level = 2;
}

// MessageId: 18079 (Notify)
message anc1 {
  int32 SkillId = 14;
}

// MessageId: 20898 (Notify)
message hnc3 {
  repeated int32 Msc2 = 13;
  repeated SignReward Esc = 1;
}

// MessageId: 29158 (Request)
message lnc1 {
  int32 UHn = 2;
  int32 Index = 8;
}

// MessageId: 21534 (Response)
message _nc {
  ErrorCode ErrorCode = 1;
}

// MessageId: 23742 (Notify)
message dnc2 {
  oneof VFc {
    GFc GFc = 3;
  }
}

message GFc {
  repeated SignReward bsc = 1;
  int32 FFc = 2;
  int64 EndTime = 3;
}

// MessageId: 20093 (Notify)
message mnc3 {
}

// MessageId: 29766 (Request)
message fnc2 {
  int32 v9n = 3;
}

// MessageId: 16050 (Response)
message gnc1 {
  ErrorCode ErrorCode = 1;
}

// MessageId: 16975 (Request)
message Cnc {
  repeated int32 NFc = 6;
}

// MessageId: 15729 (Response)
message pnc1 {
  ErrorCode ErrorCode = 6;
}

// MessageId: 25897 (Notify)
message zc11 {
  int32 UHn = 9;
  int32 Jc11 = 6;
}

message QS_ {
  repeated SignReward VM_ = 1;
  map<int32, int32> jM_2 = 2;
  int64 aM_ = 3;
  int64 hM_2 = 4;
  int32 HM_1 = 5;
}

// MessageId: 18463 (Notify)
message Py_2 {
  repeated SignReward EDOLLARs = 3;
}

// MessageId: 19569 (Notify)
message xy_ {
}

// MessageId: 26760 (Notify)
message Oy_2 {
  int32 HM_1 = 9;
}

// MessageId: 27827 (Request)
message Uy_2 {
  int32 TaskId = 14;
}

// MessageId: 21412 (Response)
message Dy_1 {
  ErrorCode ErrorCode = 1;
}

// MessageId: 27456 (Request)
message By_1 {
  repeated int32 DOLLARM_ = 9;
  int32 ActivityId = 8;
}

// MessageId: 18905 (Response)
message ky_ {
  ErrorCode ErrorCode = 13;
}

// MessageId: 20302 (Request)
message rk_ {
  int32 ActivityId = 13;
}

// MessageId: 15087 (Response)
message ok_ {
  ErrorCode ErrorCode = 5;
}

message VX_2 {
  int32 ELl = 1;
  int64 UnlockTime = 2;
  repeated int32 IX_2 = 3;
  repeated int32 TX_ = 4;
  repeated int32 Dks = 5;
  repeated int32 LX_2 = 6;
  int32 wX_ = 7;
  bool dMs = 8;
  repeated int32 ut1 = 9;
  repeated int32 dt11 = 10;
}

message jX_ {
  int32 RX_ = 1;
  bool AX_2 = 2;
}

message HX_2 {
  int32 PX_1 = 1;
  bool AX_2 = 2;
}

message EX_1 {
  repeated VX_2 xX_ = 1;
  repeated jX_ UX_ = 2;
  repeated HX_2 DX_1 = 3;
  repeated SignReward EDOLLARs = 4;
  repeated SignReward BX_2 = 5;
  int32 Ofc = 6;
}

// MessageId: 20458 (Notify)
message kfc {
  int32 Ofc = 1;
}

// MessageId: 27359 (Notify)
message sX_1 {
  repeated VX_2 xX_ = 15;
}

// MessageId: 19107 (Notify)
message MX_3 {
  int32 kX_ = 8;
}

// MessageId: 21310 (Notify)
message Fnc3 {
  int32 gG_ = 8;
  int32 kX_ = 7;
  repeated int32 Dks = 1;
  repeated int32 IX_2 = 6;
  int32 bX_1 = 15;
  int32 Nnc1 = 12;
}

// MessageId: 27821 (Notify)
message vX_1 {
  repeated jX_ UX_ = 7;
}

// MessageId: 17118 (Notify)
message aX_1 {
  repeated HX_2 DX_1 = 2;
}

// MessageId: 29538 (Notify)
message hX_1 {
  repeated SignReward EDOLLARs = 2;
}

// MessageId: 23720 (Notify)
message lX_1 {
  repeated SignReward EDOLLARs = 6;
}

// MessageId: 21769 (Notify)
message gX_1 {
  int32 rxs1 = 3;
  bool qX_ = 13;
  bool OX_ = 1;
  int64 PassTime = 5;
  repeated int32 dsc = 10;
  repeated int32 msc1 = 15;
  int32 UseTime = 11;
}

// MessageId: 27123 (Request)
message yX_2 {
  int32 GX_2 = 4;
  repeated int32 IX_2 = 10;
}

// MessageId: 23503 (Response)
message SX_2 {
  ErrorCode ErrorCode = 11;
}

// MessageId: 23094 (Request)
message _X_ {
  int32 TaskId = 1;
}

// MessageId: 16940 (Response)
message cX_2 {
  ErrorCode ErrorCode = 14;
}

// MessageId: 15281 (Request)
message uX_ {
  int32 TaskId = 14;
}

// MessageId: 27149 (Response)
message dX_2 {
  ErrorCode ErrorCode = 5;
}

// MessageId: 18588 (Request)
message mX_1 {
  int32 GX_2 = 14;
}

// MessageId: 18827 (Response)
message fX_ {
  ErrorCode ErrorCode = 1;
}

// MessageId: 21415 (Request)
message CX_1 {
}

// MessageId: 17580 (Response)
message pX_2 {
  ErrorCode ErrorCode = 13;
}

message ltc {
}

// MessageId: 27884 (Notify)
message stc {
}

// MessageId: 29494 (Request)
message atc {
  int32 TaskId = 10;
}

// MessageId: 28086 (Response)
message htc {
  ErrorCode ErrorCode = 4;
}

message Ywc {
  string Wwc = 1;
  int32 SMs = 2;
}

// MessageId: 21629 (Notify)
message Hwc {
  Ywc fks = 9;
}

message PAc1 {
  int32 cS_ = 1;
  int32 wAc3 = 2;
  int32 jVc = 3;
  repeated int32 RAc3 = 4;
  repeated xAc1 CJ_ = 5;
  map<int32, int64> zDc = 6;
  int64 A_1 = 7;
  map<int32, tg1> eg1 = 8;
}

message tg1 {
  repeated int32 ZNc2 = 1;
  int32 L_1 = 2;
  map<int32, int32> w_1 = 3;
}

enum DAc2 {
  DAc_NotCompleted = 0;
  DAc_Completed = 1;
  DAc_HasGet = 2;
}

message xAc1 {
  int32 gps1 = 1;
  int32 Y4n = 2;
  int32 nvs = 3;
  int32 j6n = 4;
}

// MessageId: 24382 (Request)
message vAc {
  int32 w6n = 4;
}

// MessageId: 27036 (Response)
message yAc1 {
  ErrorCode ErrorCode = 6;
  int32 bOc1 = 15;
  ROc1 LOc2 = 2;
  repeated int32 ZNc2 = 4;
  int32 P_1 = 5;
}

message ROc1 {
  int32 wOc1 = 1;
  repeated int32 LOc2 = 2;
}

// MessageId: 25226 (Request)
message SAc1 {
  int32 w6n = 7;
}

// MessageId: 27626 (Response)
message MAc1 {
  ErrorCode ErrorCode = 3;
  bool HVc2 = 14;
}

// MessageId: 25112 (Request)
message EAc {
  int32 w6n = 11;
  repeated int32 AAc2 = 1;
}

// MessageId: 18366 (Response)
message IAc2 {
  ErrorCode ErrorCode = 2;
}

// MessageId: 27418 (Request)
message TAc3 {
  int32 w6n = 11;
  repeated int32 B6n = 1;
}

// MessageId: 28529 (Response)
message bAc1 {
  ErrorCode ErrorCode = 3;
}

// MessageId: 20188 (Notify)
message Os12 {
  int32 w6n = 4;
  repeated xAc1 CJ_ = 11;
}

// MessageId: 29115 (Notify)
message qs1 {
  int32 w6n = 9;
  repeated int32 B6n = 8;
}

// MessageId: 20732 (Notify)
message YDc {
  int32 w6n = 7;
  repeated xAc1 CJ_ = 4;
}

// MessageId: 21746 (Notify)
message AUc {
  int32 w6n = 15;
  int64 DOLLARVc = 8;
  map<int32, int64> DUc = 7;
}

// MessageId: 21764 (Request)
message PUc {
  int32 w6n = 2;
}

// MessageId: 20014 (Response)
message xUc2 {
  ErrorCode ErrorCode = 6;
  int32 cS_ = 10;
  repeated int32 ZNc2 = 7;
  int64 A_1 = 3;
}

message Ff1 {
  int32 ItemId = 1;
  int32 UVn = 2;
  int32 qf1 = 3;
}

// MessageId: 25327 (Notify)
message Of1 {
  int32 Reason = 6;
  repeated Ff1 Gf1 = 15;
}

message JNc1 {
  repeated p3c e3c = 1;
  repeated v3c t3c = 2;
  repeated y3c i3c = 3;
  S3c1 r3c = 4;
  bool o3c = 5;
  bool n3c = 6;
  int64 _M_ = 7;
  int64 cM_2 = 8;
}

message p3c {
  int32 s3c2 = 1;
  bool CMs = 2;
  repeated M3c2 a3c = 3;
  repeated E3c h3c = 4;
}

message E3c {
  int32 l3c = 1;
  bool _3c = 2;
  bool c3c2 = 3;
}

message M3c2 {
  int32 u3c = 1;
  bool a3_ = 2;
  bool d3c = 3;
}

message v3c {
  int32 N6n = 1;
  bool m3c1 = 2;
  bool d3c = 3;
}

message S3c1 {
  int32 f3c = 1;
  int64 eb_1 = 2;
}

message y3c {
  int32 u3c = 1;
  bool d3c = 2;
}

// MessageId: 28050 (Request)
message ONc2 {
  int32 w6n = 11;
  int32 g3c = 7;
  int32 u3c = 2;
}

// MessageId: 29933 (Response)
message qNc1 {
  ErrorCode ErrorCode = 5;
}

// MessageId: 26376 (Request)
message GNc2 {
  int32 w6n = 5;
  int32 g3c = 14;
  int32 u3c = 1;
}

// MessageId: 29846 (Response)
message FNc1 {
  ErrorCode ErrorCode = 15;
}

// MessageId: 24672 (Request)
message NNc3 {
  int32 w6n = 5;
  int32 g3c = 8;
  int32 l3c = 3;
}

// MessageId: 22398 (Response)
message VNc {
  ErrorCode ErrorCode = 1;
}

// MessageId: 22147 (Request)
message jNc3 {
  int32 w6n = 2;
  int32 u3c = 3;
}

// MessageId: 22907 (Response)
message HNc1 {
  ErrorCode ErrorCode = 15;
  repeated int32 C3c1 = 10;
}

// MessageId: 19940 (Request)
message DOLLARNc {
  int32 w6n = 8;
  int32 N6n = 6;
}

// MessageId: 15489 (Response)
message WNc2 {
  ErrorCode ErrorCode = 15;
}

// MessageId: 29958 (Notify)
message QNc2 {
  int32 w6n = 15;
  repeated p3c e3c = 1;
}

// MessageId: 21556 (Notify)
message KNc3 {
  int32 w6n = 7;
  S3c1 r3c = 5;
}

// MessageId: 23150 (Notify)
message YNc1 {
  int32 w6n = 11;
  repeated y3c i3c = 5;
}

// MessageId: 29334 (Notify)
message XNc3 {
  int32 w6n = 12;
  repeated v3c t3c = 2;
}

// MessageId: 26787 (Notify)
message zNc1 {
  int32 w6n = 9;
  bool o3c = 11;
  bool n3c = 5;
}

enum ChallengeState {
  ChallengeState_Running = 0;
  ChallengeState_WaitTakeReward = 1;
  ChallengeState_Finish = 2;
}

// MessageId: 20509 (Request)
message TrialRoleRewardRequest {
  int32 RoleId = 10;
}

// MessageId: 21587 (Response)
message TrialRoleRewardResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 25911 (Notify)
message RoleTrialSettleNotify {
  ErrorCode ErrorCode = 9;
}

// MessageId: 26756 (Push)
message yJl {
}

enum DailyAdventureTaskState {
  DailyAdventureTaskState_DailyAdventureTaskRunning = 0;
  DailyAdventureTaskState_DailyAdventureTaskFinish = 1;
  DailyAdventureTaskState_DailyAdventureTaskTaken = 2;
}

message DailyAdventureActivityTask {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  int32 Status = 4;
}

message DailyAdventureActivityData {
  repeated DailyAdventureActivityTask DailyAdventureActivityTasks = 1;
  repeated int32 PtRewardTaken = 2;
}

// MessageId: 28554 (Notify)
message DailyAdventureTaskUpdateNotify {
  repeated DailyAdventureActivityTask DailyAdventureActivityTasks = 9;
  bool It_1 = 15;
}

// MessageId: 21189 (Request)
message DailyAdventurePtRewardRequest {
  int32 Id = 5;
}

// MessageId: 19912 (Response)
message DailyAdventurePtRewardResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 20519 (Request)
message DailyAdventureTaskRewardRequest {
  int32 Id = 7;
}

// MessageId: 26107 (Response)
message DailyAdventureTaskRewardResponse {
  ErrorCode ErrorCode = 8;
}

message Sks {
  int32 Id = 1;
  repeated Eks Tasks = 2;
}

message Eks {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  bool IsFinished = 4;
  bool IsTaken = 5;
  bool Unlock = 6;
}

message vks {
  repeated Sks StageData = 1;
}

// MessageId: 24110 (Notify)
message LongShanActivityDataNotify {
  repeated Sks StageData = 9;
}

// MessageId: 24144 (Request)
message LongShanTakeTaskRewardRequest {
  repeated int32 TaskIds = 13;
}

// MessageId: 25666 (Response)
message LongShanTakeTaskRewardResponse {
  ErrorCode ErrorCode = 3;
}

enum yks {
  yks_Incomplete = 0;
  yks_Claimable = 1;
  yks_Claimed = 2;
}

enum Iks {
  Iks_BuffEmpty = 0;
  Iks_BuffSelected = 1;
  Iks_BuffLocked = 2;
  Iks_BuffInactive = 3;
}

enum Tks {
  Tks_F6n = 0;
  Tks_SMs = 1;
}

message Xps1 {
  repeated Lks vMs = 1;
  repeated Rks pMs = 2;
  repeated int32 MMs1 = 3;
  repeated SignReward EDOLLARs = 4;
}

message Lks {
  int32 InstId = 1;
  int32 StartTime = 2;
  bool Challenges = 3;
  int32 Score = 4;
  repeated int32 EMs = 5;
  repeated Dks yMs = 6;
  int32 IMs2 = 7;
  repeated int32 SelectScoreBuffs = 8;
  repeated int32 Tt_2 = 9;
}

message Rks {
  int32 N6n = 1;
  int32 TMs1 = 2;
}

message Dks {
  int32 BuffId = 1;
  int32 q6n = 2;
  int32 G6n = 3;
}

// MessageId: 23728 (Request)
message BossRushGetRewardRequest {
  int32 ActivityId = 7;
  int32 N6n = 15;
  RewardType RewardType = 6;
}

// MessageId: 23899 (Response)
message BossRushGetRewardResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 21986 (Request)
message BossRushRequestSettlementRequest {
}

// MessageId: 21483 (Response)
message BossRushRequestSettlementResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 26113 (Notify)
message pfs {
  int32 ActivityId = 9;
  int32 InstId = 12;
  int32 LMs2 = 10;
  int32 RMs = 4;
  int32 DMs1 = 3;
  int32 AMs = 5;
  int32 bt_1 = 15;
}

// MessageId: 22505 (Notify)
message Mfs {
  int32 ActivityId = 10;
  repeated Lks vMs = 6;
  repeated Rks pMs = 13;
  repeated int32 MMs1 = 15;
}

// MessageId: 18279 (Notify)
message BossRushFailNotify {
}

// MessageId: 23320 (Request)
message RefreshBossRushBuffInGameRequest {
}

// MessageId: 16972 (Response)
message RefreshBossRushBuffInGameResponse {
  ErrorCode ErrorCode = 14;
  repeated int32 BuffIds = 8;
}

// MessageId: 28717 (Request)
message RequestBossRushChooseBuffInGameRequest {
  int32 Index = 3;
}

// MessageId: 23685 (Response)
message RequestBossRushChooseBuffInGameResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 29286 (Request)
message BossRushGetLevelRewardRequest {
  int32 Pal2 = 7;
  int32 Index = 9;
}

// MessageId: 21800 (Response)
message BossRushGetLevelRewardResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 21799 (Notify)
message zD_2 {
  repeated SignReward EDOLLARs = 4;
}

// MessageId: 25322 (Request)
message JD_ {
  int32 TaskId = 5;
}

// MessageId: 15853 (Response)
message ZD_1 {
  ErrorCode ErrorCode = 13;
}

// MessageId: 27132 (Notify)
message eB_2 {
  int32 ActivityId = 4;
  int32 InstId = 11;
  repeated int32 tB_2 = 2;
}

message SignReward {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  int32 Status = 4;
  map<int32, int32> Zt_2 = 5;
}

message ActivityMoonChasingData {
  repeated SignReward SignInReward = 1;
}

enum TaskState {
  TaskState_ActivityTaskRunning = 0;
  TaskState_ActivityTaskFinish = 1;
  TaskState_ActivityTaskTaken = 2;
}

enum TimeTypeState {
  TimeTypeState_TimeLimited = 0;
  TimeTypeState_Permanent = 1;
}

enum u0a {
  u0a_None = 0;
  u0a_WithActivity = 1;
  u0a_WithGuideQuest = 2;
}

message xYs {
  repeated OYs Rewards = 1;
}

message OYs {
  int32 Id = 1;
  int64 bYs1 = 2;
  bool Rewarded = 3;
  bool CanGetReward = 4;
}

// MessageId: 29139 (Request)
message TimePointGetRewardRequest {
  int32 Id = 14;
}

// MessageId: 20983 (Response)
message TimePointGetRewardResponse {
  ErrorCode ErrorCode = 3;
}

message Lzs {
  repeated Rzs Mzs = 1;
  repeated int32 Szs = 2;
  int32 Yma = 3;
  bool xic = 4;
}

message Rzs {
  int32 Id = 1;
  int32 Score = 2;
  bool Rewarded = 3;
  bool Ezs = 4;
  int64 UnlockTime = 5;
  int32 MaxScore = 6;
  int32 PassTime = 7;
}

message Azs {
  int32 Id = 1;
  int32 Level = 2;
  int32 Exp = 3;
}

// MessageId: 21520 (Notify)
message TowerDefenseActivityInfoUpdateNotify {
  Lzs Izs = 3;
}

// MessageId: 16448 (Notify)
message TowerDefenseInstanceInfoUpdateNotify {
  repeated Rzs Mzs = 9;
}

// MessageId: 22962 (Notify)
message TowerDefensePhantomInfoUpdateNotify {
  repeated Azs Phantoms = 3;
}

// MessageId: 22184 (Request)
message TowerDefenseInstanceRewardRequest {
  repeated int32 Ids = 6;
}

// MessageId: 24131 (Response)
message TowerDefenseInstanceRewardResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 22376 (Request)
message TowerDefenseScoreRewardRequest {
  repeated int32 Ids = 7;
}

// MessageId: 20516 (Response)
message TowerDefenseScoreRewardResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 20538 (Notify)
message TowerDefenseBattleEndNotify {
  bool Success = 15;
  int32 Score = 11;
  int32 MaxScore = 8;
  int32 InstId = 9;
  int32 PassTime = 12;
  int32 Lt_1 = 6;
  repeated Vic Uic = 10;
}

message Vic {
  repeated jic Dic = 1;
  int32 RoleId = 2;
  int32 PlayerId = 3;
  int32 tbs1 = 5;
}

message jic {
  int32 Id = 1;
  int32 Score = 2;
  int32 Bic = 3;
}

message Mta {
  int32 RoleId = 1;
  Azs Phantom = 2;
}

// MessageId: 27118 (Notify)
message _ta {
  repeated Mta RoleList = 8;
}

// MessageId: 25015 (Notify)
message JKl {
  int32 PlayerId = 4;
  int32 RoleId = 7;
  int64 wt_3 = 13;
}

// MessageId: 16192 (Notify)
message ZKl {
  int32 PlayerId = 2;
  int64 wt_3 = 10;
}

// MessageId: 24523 (Request)
message Lic {
  int32 Id = 4;
}

// MessageId: 29435 (Response)
message wic1 {
  ErrorCode ErrorCode = 10;
  repeated Hic kic = 7;
  repeated Hic qic = 12;
  bool xic = 13;
}

// MessageId: 28546 (Request)
message Ric {
  bool xic = 15;
}

// MessageId: 22606 (Response)
message Aic {
  ErrorCode ErrorCode = 13;
}

message DOLLARic {
  repeated Wic2 Oic = 1;
  int32 PassTime = 2;
  int32 nIs = 4;
  int32 Score = 3;
}

message Wic2 {
  repeated Qic RoleList = 1;
  string Name = 2;
  int32 PlayerId = 4;
}

message Qic {
  int32 eI_1 = 1;
  int32 Ebs = 2;
  int32 oxs = 3;
}

message Kic {
  repeated Hic Gic = 1;
  bool xic = 2;
  int32 PlayerId = 3;
  string Name = 4;
}

message Hic {
  int32 ChallengeId = 1;
  bool Fic = 2;
  DOLLARic Nic = 3;
}

// MessageId: 25554 (Request)
message tnc2 {
  int32 Id = 12;
}

// MessageId: 18931 (Response)
message inc2 {
  repeated Hic qic = 8;
}

enum dU_ {
  dU__RiskHarvestCanNoReward = 0;
  dU__RiskHarvestCanReward = 1;
  dU__RiskHarvestRewarded = 2;
}

message DOLLAR9_ {
  int32 j9_ = 1;
  int32 cU_ = 2;
}

message bn_2 {
  int32 Id = 1;
  int64 UnlockTime = 2;
  bool IsUnlock = 3;
  int32 Score = 4;
  bool Rewarded = 5;
  bool Rt_1 = 6;
  repeated DOLLAR9_ H9_ = 7;
}

message Ln_2 {
  int32 Id = 1;
  int32 Progress = 2;
  repeated wn_2 At_1 = 3;
}

message wn_2 {
  int32 Id = 1;
  int32 Count = 2;
}

message Se_2 {
  repeated bn_2 xt_3 = 1;
  repeated int32 Pt_2 = 2;
  repeated int32 Ut_1 = 3;
  repeated int32 Dt_1 = 4;
  repeated int32 Bt_2 = 5;
}

// MessageId: 26124 (Notify)
message SyncProtocolRiskHarvestEndNotify {
  int32 Id = 2;
  int32 Yma = 8;
  int32 ze_2 = 5;
  int32 kt_2 = 13;
  bool Rt_1 = 9;
  int32 uU_ = 7;
}

// MessageId: 27498 (Notify)
message SyncProtocolRiskHarvestInstUpdateNotify {
  repeated bn_2 xt_3 = 14;
}

// MessageId: 27658 (Notify)
message SyncProtocolRiskHarvestArtifactNotify {
  Ln_2 qt_1 = 8;
}

// MessageId: 16983 (Notify)
message SyncProtocolRiskHarvestBuffUpdateNotify {
  Ln_2 qt_1 = 6;
  repeated int32 Ot_2 = 15;
  repeated int32 Gt_2 = 3;
}

// MessageId: 18643 (Notify)
message SyncProtocolRiskHarvestBuffUnlockNotify {
  repeated int32 Ft_1 = 11;
}

// MessageId: 17219 (Notify)
message SyncProtocolRiskHarvestActivityUpdateNotify {
  Se_2 Izs = 15;
}

// MessageId: 17304 (Request)
message MowingRiskHarvestInstRewardRequest {
  int32 Id = 9;
}

// MessageId: 21255 (Response)
message MowingRiskHarvestInstRewardResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 18172 (Request)
message MowingRiskHarvestScoreRewardRequest {
  int32 Id = 7;
}

// MessageId: 26950 (Response)
message MowingRiskHarvestScoreRewardResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 16408 (Request)
message xKl {
  int32 Id = 4;
}

// MessageId: 29872 (Response)
message PKl {
  ErrorCode ErrorCode = 14;
}

// MessageId: 27116 (Request)
message UKl {
  int32 Id = 7;
}

// MessageId: 16187 (Response)
message DKl {
  ErrorCode ErrorCode = 3;
}

// MessageId: 19001 (Request)
message MowingRiskHarvestSettleRequest {
}

// MessageId: 23138 (Response)
message MowingRiskHarvestSettleResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 15946 (Request)
message lU_ {
  int32 Id = 13;
  int32 Index = 14;
}

// MessageId: 23747 (Response)
message _U_ {
  ErrorCode ErrorCode = 11;
}

message Rn_2 {
  int32 InstId = 1;
  int32 StartTime = 2;
  bool Challenges = 3;
  int32 Points = 4;
  bool Rwl = 5;
  int32 Difficulty = 6;
}

message Twl {
  repeated int32 Lwl = 1;
  repeated Rn_2 Nt_ = 2;
}

// MessageId: 15811 (Request)
message wJl1 {
  int32 ActivityId = 14;
  int32 InstId = 5;
  int32 Diff = 6;
}

// MessageId: 19423 (Response)
message qJl2 {
  ErrorCode ErrorCode = 13;
}

// MessageId: 22009 (Notify)
message RJl {
  bool Succ = 2;
  int32 Record = 11;
  int32 MaxRecord = 15;
  ErrorCode ErrorCode = 3;
}

// MessageId: 19435 (Notify)
message AJl {
  int32 ActivityId = 15;
  Rn_2 Nt_ = 5;
}

// MessageId: 17159 (Request)
message FarmGoldPointRequest {
  int32 ActivityId = 10;
  int32 Id = 12;
}

// MessageId: 24569 (Response)
message FarmGoldPointResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 24950 (Request)
message FarmGoldLevelPlayRequest {
  int32 ActivityId = 8;
  int32 InstId = 14;
}

// MessageId: 25005 (Response)
message FarmGoldLevelPlayResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 15496 (Request)
message ExitDungeonRequest {
}

// MessageId: 23201 (Response)
message ExitDungeonResponse {
  ErrorCode ErrorCode = 6;
}

message we_ {
  repeated SignReward SignInReward = 1;
  repeated int32 Vt_2 = 2;
  bool jt_3 = 3;
  int32 Ht_2 = 4;
  repeated int32 DOLLARt_ = 5;
  repeated An_1 Wt_2 = 6;
}

message An_1 {
  int32 Qt_2 = 1;
  int32 Kt_1 = 2;
  repeated int32 Xt_2 = 3;
}

// MessageId: 15501 (Notify)
message sJl {
  oneof Data {
    SignReward SignReward = 4;
    int32 Yt_1 = 14;
    int32 zt_1 = 9;
    An_1 Jt_1 = 7;
  }
}

// MessageId: 18278 (Request)
message TakeTaskFinalRewardRequest {
}

// MessageId: 21755 (Response)
message TakeTaskFinalRewardResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 29062 (Request)
message MapTravelLevelUpRequest {
}

// MessageId: 16230 (Response)
message MapTravelLevelUpResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 16176 (Request)
message TakeTravelTaskRewardRequest {
  int32 TaskId = 7;
}

// MessageId: 22373 (Response)
message TakeTravelTaskRewardResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 23827 (Request)
message TakeSoarChallengeRewardRequest {
  int32 TaskId = 6;
}

// MessageId: 24310 (Response)
message TakeSoarChallengeRewardResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 25674 (Request)
message RoleSkinTrailInstanceRewardRequest {
  int32 _9l = 14;
}

// MessageId: 22889 (Response)
message RoleSkinTrailInstanceRewardResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 27409 (Notify)
message vZl {
  ErrorCode ErrorCode = 8;
}

// MessageId: 16812 (Push)
message RoleSkinTrialUiEndPush {
}

message h3_ {
  int32 lG_ = 1;
  int32 Score = 2;
  int32 ZN_1 = 3;
  int32 StartTime = 4;
  int32 sDOLLAR_ = 5;
}

message JN_ {
  repeated h3_ e3_ = 1;
  ActivityMoonChasingData t3_ = 2;
}

// MessageId: 28860 (Request)
message KN_3 {
  int32 ActivityId = 3;
  int32 N6n = 11;
}

// MessageId: 28269 (Response)
message XN_3 {
  ErrorCode ErrorCode = 7;
}

// MessageId: 19439 (Notify)
message YN_3 {
  SignReward SignReward = 14;
}

message l3_ {
  int32 PlayerId = 1;
  string Name = 2;
  int32 HeadId = 3;
  int32 ZN_1 = 4;
  int32 i3_ = 5;
  bool r3_ = 6;
  int32 o3_ = 7;
  int32 n3_ = 8;
  int32 s3_ = 9;
}

// MessageId: 24386 (Notify)
message zN_2 {
  int32 lG_ = 7;
  repeated l3_ a3_ = 11;
}

message OJ_2 {
  int32 Qz_2 = 1;
  int32 Kz_1 = 2;
  int32 Xz_2 = 3;
  int32 Yz_1 = 4;
  int32 YZ_2 = 5;
  string zZ_1 = 6;
  int32 sJ_1 = 7;
  int32 Io1 = 8;
}

message GJ_1 {
  int32 Id = 1;
  int32 iMs1 = 2;
  int32 YZ_2 = 3;
}

message FJ_ {
  int64 BeginTime = 1;
  int64 EndTime = 2;
}

message NJ_ {
  int32 Id = 1;
  repeated GJ_1 zza_ = 2;
  FJ_ Jz_ = 3;
  FJ_ Zz_ = 4;
  repeated int32 eJ_1 = 5;
  int64 JZ_1 = 6;
  string zZb_1 = 7;
  FJ_ Zf1 = 8;
}

message VJ_1 {
  int32 ZZ_2 = 1;
  FJ_ eec = 2;
  repeated NJ_ tJ_ = 3;
  repeated int32 iJ_2 = 4;
}

message jJ_1 {
  int32 rJ_ = 1;
  int32 oJ_1 = 2;
  repeated OJ_2 eic = 3;
  int32 aJ_2 = 4;
}

enum P6c {
  P6c_cJ_ = 0;
  P6c_Top1 = 1;
  P6c_Top50 = 2;
  P6c_UnRank = 3;
}

message HJ_2 {
  int32 PlayerId = 1;
  int32 lJ_ = 2;
  string Name = 3;
  int32 _J_ = 4;
  int32 aJ_2 = 6;
  int32 cJ_ = 7;
  bool hJ_1 = 8;
}

enum DOLLARJ_ {
  DOLLARJ__Undone = 0;
  DOLLARJ__TaskFinish = 1;
  DOLLARJ__Received = 2;
}

message WJ_ {
  int32 Id = 1;
  int32 H6n = 2;
  int32 cqs1 = 3;
  int32 j6n = 4;
  bool bxs = 6;
}

message qJ_1 {
  int32 w6n = 1;
  FJ_ uJ_ = 2;
  repeated VJ_1 dJ_ = 3;
  jJ_1 jRs = 4;
  repeated WJ_ CJ_ = 5;
  repeated int64 Nc1 = 6;
}

// MessageId: 16866 (Request)
message Mz_ {
  int32 w6n = 9;
  int32 mJ_1 = 6;
}

// MessageId: 19323 (Response)
message Ez_2 {
  ErrorCode ErrorCode = 14;
  NJ_ fJ_ = 12;
}

// MessageId: 16033 (Request)
message Iz_2 {
  int32 w6n = 10;
}

// MessageId: 19520 (Response)
message Tz_2 {
  ErrorCode ErrorCode = 12;
  int32 w6n = 10;
  FJ_ uJ_ = 9;
  repeated VJ_1 dJ_ = 3;
}

// MessageId: 20133 (Request)
message bz_1 {
  int32 w6n = 9;
}

// MessageId: 15839 (Response)
message Lz_ {
  ErrorCode ErrorCode = 10;
  jJ_1 jRs = 15;
}

// MessageId: 16992 (Request)
message wz_ {
  int32 w6n = 5;
}

// MessageId: 24450 (Response)
message Rz_2 {
  ErrorCode ErrorCode = 8;
  repeated HJ_2 jRs = 3;
  int32 H6n = 9;
  int32 b6c = 11;
}

// MessageId: 27105 (Request)
message Az_ {
  int32 w6n = 7;
  int32 mJ_1 = 3;
  int32 Kz_1 = 1;
  int32 gJ_2 = 11;
  int32 _J_ = 10;
  string zZ_1 = 5;
}

// MessageId: 15102 (Response)
message Pz_ {
  ErrorCode ErrorCode = 12;
  jJ_1 jRs = 8;
}

// MessageId: 15141 (Request)
message Vwc {
  int32 w6n = 13;
  int32 mJ_1 = 14;
  int32 Kz_1 = 1;
}

// MessageId: 25560 (Response)
message jwc {
  ErrorCode ErrorCode = 4;
  jJ_1 jRs = 11;
}

// MessageId: 17574 (Notify)
message xz_1 {
  jJ_1 jRs = 8;
}

// MessageId: 15261 (Request)
message Uz_2 {
  int32 w6n = 14;
}

// MessageId: 15539 (Response)
message Dz_ {
  ErrorCode ErrorCode = 3;
}

// MessageId: 24296 (Notify)
message Ztc {
  repeated WJ_ CJ_ = 13;
}

// MessageId: 19239 (Request)
message Bz_2 {
  int32 gps1 = 4;
}

// MessageId: 23332 (Response)
message DOLLARz_ {
  ErrorCode ErrorCode = 6;
}

// MessageId: 15220 (Request)
message KZ_2 {
  int32 w6n = 1;
  int32 mJ_1 = 7;
}

// MessageId: 16778 (Response)
message XZ_3 {
  ErrorCode ErrorCode = 2;
  int32 w6n = 15;
  int32 mJ_1 = 11;
  string zZ_1 = 12;
  repeated GJ_1 zz_ = 14;
  int64 JZ_1 = 4;
}

// MessageId: 18293 (Notify)
message zwc {
  int32 w6n = 3;
  int32 mJ_1 = 1;
  repeated int32 eJ_1 = 2;
  int32 Qwc = 12;
  int32 Kwc = 5;
}

message QJ_2 {
  int32 Kz_1 = 1;
  int32 iMs1 = 2;
  int32 pJ_1 = 3;
  int32 vJ_2 = 4;
  int64 EntityId = 5;
  int32 Xwc = 6;
}

enum KJ_1 {
  KJ__TJ_ = 0;
  KJ__LJ_ = 1;
  KJ__bJ_ = 2;
  KJ__wJ_ = 3;
}

message XJ_ {
  int32 Kz_1 = 1;
  int32 yJ_1 = 2;
  int32 SJ_2 = 3;
  repeated int32 MJ_2 = 4;
}

message YJ_2 {
  repeated int32 EJ_2 = 1;
  int32 IJ_1 = 2;
}

message zJ_1 {
  int32 Kz_1 = 1;
  int32 SkillId = 2;
}

message JJ_2 {
  int32 Kz_1 = 1;
  int32 vJ_2 = 2;
}

message bFc {
  int32 kJ_2 = 1;
  int32 D8n = 2;
}

message ZJ_2 {
  repeated JJ_2 R5n = 1;
}

message eZ_1 {
  oneof R5n {
    XJ_ TJ_ = 2;
    YJ_2 bJ_ = 3;
    zJ_1 LJ_ = 4;
    ZJ_2 wJ_ = 5;
  }
  int32 n3s = 1;
  int32 Index = 6;
  repeated bFc bFc = 7;
}

message tZ_1 {
  int32 Kz_1 = 1;
  repeated eZ_1 RJ_ = 2;
}

message RUc {
  int32 Kz_1 = 1;
  int32 D8n = 2;
  int32 pJ_1 = 3;
}

message iZ_1 {
  int32 AJ_1 = 1;
  repeated int32 PJ_2 = 2;
  repeated tZ_1 xJ_ = 3;
  bool bUc = 4;
  repeated RUc LUc = 5;
  rZ_1 j7n = 6;
}

message rZ_1 {
  int32 w6n = 1;
  int32 mJ_1 = 2;
  repeated int32 eJ_1 = 3;
  int32 GM1 = 4;
}

// MessageId: 16899 (Request)
message kz_3 {
  int32 w6n = 7;
  int32 mJ_1 = 11;
  int32 wUc1 = 6;
}

// MessageId: 21073 (Response)
message qz_1 {
  ErrorCode ErrorCode = 1;
  iZ_1 UJ_ = 13;
  repeated QJ_2 zz_ = 5;
  bool DJ_ = 7;
}

// MessageId: 15367 (Request)
message IUc {
  int32 w6n = 5;
  int32 mJ_1 = 9;
}

// MessageId: 24005 (Response)
message TUc {
  ErrorCode ErrorCode = 1;
  int32 w6n = 10;
  int32 mJ_1 = 8;
  repeated QJ_2 zz_ = 6;
  repeated iZ_1 BJ_ = 4;
}

// MessageId: 24748 (Notify)
message T6c {
  ErrorCode ErrorCode = 12;
  int32 w6n = 13;
  int32 mJ_1 = 8;
  int32 L6c = 15;
  int32 R6c = 5;
  int32 YZ_2 = 7;
  int32 DS_1 = 14;
  int32 w6c = 11;
  int32 A6c = 4;
  jc12 Vc1 = 3;
}

// MessageId: 23358 (Notify)
message qM12 {
  rZ_1 j7n = 1;
}

message jc12 {
  int32 ZZ_2 = 1;
  repeated int32 Kz_1 = 2;
}

// MessageId: 24487 (Request)
message Vz_ {
  int32 w6n = 7;
  int32 mJ_1 = 11;
  int32 kJ_2 = 15;
  int32 mTs = 8;
}

// MessageId: 16885 (Response)
message jz_2 {
  ErrorCode ErrorCode = 12;
}

enum gs1 {
  gs1_MatchStart = 0;
  gs1_us1 = 1;
  gs1_MatchRoundDice = 3;
  gs1_DangoRoundStart = 2;
  gs1_DangoMove = 4;
  gs1_DangoSkill = 5;
  gs1_DangoChangeHigh = 6;
  gs1_ms1 = 7;
  gs1_MC1 = 8;
  gs1_Kp1 = 9;
}

message Cs1 {
  int32 mJ_1 = 1;
}

message ps1 {
  int32 mJ_1 = 1;
  int32 AJ_1 = 2;
}

message vs1 {
  int32 Kz_1 = 1;
}

message ys1 {
  repeated RUc _s1 = 1;
}

message Ss11 {
  int32 Kz_1 = 1;
}

message EC12 {
  int32 Kz_1 = 1;
}

message Xp1 {
  repeated int32 Kz_1 = 1;
}

message Ms1 {
  oneof R5n {
    Cs1 cs1 = 3;
    ps1 us1 = 4;
    vs1 ds1 = 5;
    ys1 _s1 = 6;
    XJ_ TJ_ = 7;
    zJ_1 LJ_ = 8;
    ZJ_2 wJ_ = 9;
    Ss11 ms1 = 10;
    EC12 MC1 = 11;
    Xp1 Kp1 = 12;
  }
  int32 mTs = 1;
  int32 n3s = 2;
  repeated bFc bFc = 13;
}

message Es1 {
  int32 AJ_1 = 1;
  repeated Ms1 fs1 = 2;
  bool bUc = 3;
  rZ_1 j7n = 4;
}

// MessageId: 24578 (Request)
message ss12 {
  int32 w6n = 11;
  int32 mJ_1 = 5;
}

// MessageId: 20975 (Response)
message as1 {
  ErrorCode ErrorCode = 11;
  int32 w6n = 10;
  int32 mJ_1 = 12;
  repeated QJ_2 zz_ = 5;
  repeated Es1 BJ_ = 7;
  bool Cf1 = 6;
}

// MessageId: 26931 (Request)
message hs1 {
  int32 w6n = 13;
  int32 mJ_1 = 8;
  int32 wUc1 = 4;
}

// MessageId: 16178 (Response)
message ls1 {
  ErrorCode ErrorCode = 7;
  Es1 BJ_ = 9;
  repeated QJ_2 zz_ = 4;
  bool DJ_ = 6;
}

// MessageId: 29667 (Request)
message eh12 {
  int32 w6n = 5;
  int32 mJ_1 = 10;
}

// MessageId: 23520 (Response)
message th1 {
  ErrorCode ErrorCode = 3;
  repeated QJ_2 zz_ = 5;
}

message ysc {
  ActivityMoonChasingData n3_ = 1;
  repeated int32 bcc = 2;
}

// MessageId: 17865 (Request)
message Mcc {
  int32 ActivityId = 9;
  int32 TaskId = 1;
}

// MessageId: 27375 (Response)
message Ecc {
  ErrorCode ErrorCode = 8;
}

// MessageId: 16416 (Notify)
message Icc {
  oneof R5n {
    SignReward SignReward = 11;
    int32 bcc = 4;
  }
}

// MessageId: 22090 (Request)
message To1 {
  int32 w6n = 8;
  int32 Lo1 = 3;
}

// MessageId: 17226 (Response)
message bo12 {
  ErrorCode ErrorCode = 2;
}

message Po1 {
  int32 ItemId = 1;
  int32 Count = 2;
}

message xo1 {
  int32 wo1 = 1;
  int64 EndTime = 2;
  repeated Po1 nBs = 3;
  bool Ao1 = 4;
}

message Ro1 {
  int32 w6n = 1;
  repeated xo1 R5n = 2;
}

enum Ja11 {
  Ja1_TaskReward = 0;
  Ja1_za1 = 1;
  Ja1_SignReward = 2;
}

message tv1 {
  int32 Id = 1;
  int32 H6n = 2;
}

message Qa1 {
  repeated SignReward EDOLLARs = 1;
  repeated SignReward DOLLARca = 2;
  repeated int32 Hca = 3;
  int32 Ka1 = 4;
  int64 EndTime = 6;
  int64 yDs = 7;
  int32 Xa1 = 8;
  int32 Ya12 = 9;
  repeated int32 za11 = 10;
  repeated tv1 Zp1 = 13;
  bool Vu1 = 11;
  bool ju12 = 12;
}

// MessageId: 19044 (Request)
message ja12 {
  repeated int32 BVn = 12;
  int32 w6n = 3;
}

// MessageId: 25299 (Response)
message Ha1 {
  ErrorCode ErrorCode = 4;
  repeated int32 BVn = 7;
}

// MessageId: 26837 (Request)
message DOLLARa1 {
  int32 k6n = 15;
  int32 TaskId = 12;
  int32 w6n = 2;
}

// MessageId: 18998 (Response)
message Wa1 {
  ErrorCode ErrorCode = 15;
}

// MessageId: 16707 (Request)
message zp1 {
  int32 ev1 = 1;
}

// MessageId: 23229 (Response)
message Jp1 {
  ErrorCode ErrorCode = 13;
}

enum fd1 {
  fd1_Unknown = 0;
  fd1_Single = 1;
  fd1_Cycle = 2;
}

message gd1 {
  int32 Current = 1;
  int32 j6n = 2;
}

message Cd12 {
  int32 mLs1 = 1;
  int32 cd11 = 2;
  int32 ud11 = 3;
}

message pd12 {
  int32 Id = 1;
  int32 h5n = 2;
  gd1 dd1 = 3;
  Cd12 DS_1 = 4;
}

message _d1 {
  int32 w6n = 2;
  repeated pd12 cMs = 3;
}

// MessageId: 16517 (Request)
message hd1 {
  int32 w6n = 10;
  int32 TaskId = 9;
}

// MessageId: 21056 (Response)
message ld12 {
  ErrorCode ErrorCode = 13;
  pd12 md1 = 4;
}

// MessageId: 21458 (Notify)
message ag1 {
  pd12 pd1 = 8;
}

// MessageId: 23706 (Request)
message V01 {
}

// MessageId: 29100 (Response)
message j01 {
  ErrorCode ErrorCode = 11;
  _d1 _d1 = 6;
}

enum DetectionType {
  DetectionType_NormalMonster = 0;
  DetectionType_Dungeon = 1;
  DetectionType_SilentArea = 2;
}

message AdventreTask {
  int32 Id = 1;
  int32 State = 2;
  int32 AdventreProgress = 3;
}

enum AdventreTaskSate {
  AdventreTaskSate_UnFinish = 0;
  AdventreTaskSate_Finish = 1;
  AdventreTaskSate_Received = 2;
}

message AdventureManualData {
  repeated AdventreTask AdventreTask = 1;
  int32 NowChapter = 2;
  int32 ReceivedChapter = 3;
}

message AdventureItemData {
  int32 ItemId = 1;
  int32 ItemNum = 2;
}

message AdventureRewardData {
  int32 DropId = 1;
  repeated AdventureItemData Items = 2;
}

message DetectionTarget {
  int32 Id = 1;
  int32 Type = 2;
  bool UnlockState = 3;
  int64 RefresherTime = 4;
  int32 DetectionId = 5;
  int32 IsTrace = 6;
}

message DetectionUnlock {
  repeated int32 MonsterDetectionIds = 1;
  repeated int32 DungeonDetectionIds = 2;
  repeated int32 SilentAreaDetectionIds = 3;
}

message SelectDetectionTarget {
  int32 DetectionId = 1;
  int32 Type = 2;
  int32 Id = 3;
  int32 IsTrace = 4;
}

// MessageId: 29980 (Request)
message AdventureManualDataRequest {
  int32 PlayerId = 11;
}

// MessageId: 23539 (Response)
message AdventureManualDataResponse {
  ErrorCode ErrorCode = 10;
  AdventureManualData AdventureManualData = 15;
}

// MessageId: 25239 (Request)
message GetAdventureRewardRequest {
  int32 Id = 4;
}

// MessageId: 28953 (Response)
message GetChapterRewardResponse {
  ErrorCode ErrorCode = 3;
  int32 Id = 10;
}

// MessageId: 22817 (Request)
message ChapterRewardRequest {
  int32 Chapter = 4;
}

// MessageId: 19479 (Response)
message ChapterRewardResponse {
  ErrorCode ErrorCode = 5;
  int32 Chapter = 4;
}

// MessageId: 23642 (Request)
message DetectionRequest {
  int32 DetectionType = 5;
  repeated int32 DetectionId = 3;
  int32 DetectionConfId = 15;
}

// MessageId: 19002 (Response)
message DetectionResponse {
  ErrorCode ErrorCode = 10;
  repeated DetectionTarget DetectionTarget = 8;
  int32 DetectionConfId = 9;
}

// MessageId: 16659 (Notify)
message AdventureUpdateNotify {
  repeated AdventureManualData AdventureManualData = 5;
}

// MessageId: 24445 (Request)
message AdventureManualRequest {
  int32 PlayerId = 14;
}

enum SlientFirstAwardState {
  SlientFirstAwardState_NotUnlock = 0;
  SlientFirstAwardState_NotFinish = 1;
  SlientFirstAwardState_Xe_ = 2;
  SlientFirstAwardState_ovs = 3;
}

// MessageId: 16733 (Response)
message AdventureManualResponse {
  ErrorCode ErrorCode = 5;
  AdventureManualData AdventureManualData = 12;
  repeated DetectionTarget DetectionTarget = 15;
  repeated AdventureRewardData AdventureRewardData = 2;
  DetectionUnlock DetectionUnlocks = 3;
  SelectDetectionTarget NowSelectDetectionTarget = 14;
  map<int32, int32> SlientFirstAwardMap = 9;
  repeated xn_1 ei_2 = 7;
  repeated xn_1 ti_ = 1;
  repeated Pn_2 ii_ = 4;
  repeated Pn_2 ri_2 = 13;
}

message Pn_2 {
  int32 Id = 1;
  int32 oi_ = 2;
  int64 ni_ = 3;
  int64 si_ = 4;
}

message xn_1 {
  int32 Id = 1;
  int64 ai_ = 2;
  int64 hi_1 = 3;
}

// MessageId: 16261 (Request)
message ReceivedSilentFirstAwardRequest {
  int32 Id = 11;
}

// MessageId: 21565 (Response)
message ReceivedSilentFirstAwardResponse {
  ErrorCode ErrorCode = 15;
  repeated string ErrorParams = 14;
  map<int32, int32> ItemMap = 9;
}

// MessageId: 19540 (Notify)
message SilentFirstAwardNotify {
  int32 Id = 2;
}

// MessageId: 18762 (Notify)
message UpdateMonsterUnlockNotify {
  DetectionUnlock DetectionUnlocks = 8;
}

// MessageId: 22328 (Request)
message SelectDetectionTargetRequest {
  SelectDetectionTarget SelectDetectionTarget = 2;
  bool IsCancelSelect = 1;
}

// MessageId: 21399 (Response)
message SelectDetectionTargetResponse {
  ErrorCode ErrorCode = 9;
  SelectDetectionTarget SelectDetectionTarget = 8;
}

// MessageId: 28775 (Notify)
message FollowDetectionTargetUpdateNotify {
  repeated DetectionTarget DetectionTarget = 9;
}

// MessageId: 22092 (Request)
message MonsterDetectionInfoRequest {
  repeated DetectionTarget Params = 6;
}

// MessageId: 18231 (Response)
message MonsterDetectionInfoResponse {
  repeated DetectionTarget DetectionTarget = 12;
}

// MessageId: 27138 (Request)
message NormalMonsterManualInfoRequest {
  int32 DetectionId = 2;
}

// MessageId: 18871 (Response)
message NormalMonsterManualInfoResponse {
  ErrorCode ErrorCode = 11;
  repeated DetectionTarget DetectionTarget = 14;
}

message UnlockDetectionLabelInfo {
  repeated sint32 UnlockedGuideIds = 1;
  repeated sint32 UnlockedDetectionTextIds = 2;
}

// MessageId: 21242 (Request)
message GetDetectionLabelInfoRequest {
}

// MessageId: 17354 (Response)
message GetDetectionLabelInfoResponse {
  UnlockDetectionLabelInfo UnlockLabelInfo = 12;
}

// MessageId: 16194 (Notify)
message AddUnlockedGuideNotify {
  repeated sint32 UnlockedGuideIds = 10;
}

// MessageId: 20115 (Notify)
message AddUnlockedDetectionTextNotify {
  repeated sint32 UnlockedDetectionTextIds = 1;
}

// MessageId: 20529 (Notify)
message nZl1 {
  repeated Pn_2 ii_ = 4;
  repeated Pn_2 ri_2 = 6;
}

// MessageId: 19234 (Notify)
message Za12 {
  DetectionTarget ih11 = 14;
}

// MessageId: 19617 (Notify)
message AdviceSettingNotify {
  bool IsShow = 10;
}

// MessageId: 25376 (Request)
message AdviceSetRequest {
  bool IsShow = 6;
}

// MessageId: 21919 (Response)
message AdviceSetResponse {
  bool IsShow = 6;
  ErrorCode ErrorCode = 8;
}

message PbAdvice {
  int64 Id = 1;
  int32 AreaId = 2;
  repeated PbAdviceContent Contents = 3;
  int32 UpVote = 4;
}

message AdviceComponentPb {
  PbAdvice Advice = 1;
  int32 PlayerId = 2;
  string PlayerName = 3;
}

// MessageId: 29530 (Notify)
message AdviceContentUpdateNotify {
  int64 Id = 11;
  repeated PbAdviceContent Contents = 1;
}

// MessageId: 16134 (Notify)
message AdviceVoteUpdateNotify {
  int64 Id = 10;
  int32 UpVote = 14;
}

enum PbAdviceContentType {
  PbAdviceContentType_Sentence = 0;
  PbAdviceContentType_Conjunction = 1;
  PbAdviceContentType_Expression = 2;
  PbAdviceContentType_c8n = 3;
}

message PbAdviceContent {
  int32 Type = 1;
  int32 Id = 2;
  int32 Word = 3;
}

// MessageId: 17882 (Request)
message AdviceRequest {
}

// MessageId: 29600 (Response)
message AdviceResponse {
  repeated PbAdvice Advices = 6;
  repeated int64 UpVoteIds = 4;
  ErrorCode ErrorCode = 5;
}

// MessageId: 22896 (Notify)
message AdviceUpdateNotify {
  repeated int64 UpVoteIds = 3;
}

// MessageId: 25933 (Request)
message AdviceCreateRequest {
  Vector Pos = 10;
  Rotator Rot = 14;
  repeated PbAdviceContent Contents = 1;
}

// MessageId: 16055 (Response)
message AdviceCreateResponse {
  PbAdvice Advice = 4;
  ErrorCode ErrorCode = 7;
}

// MessageId: 20731 (Request)
message AdviceModifyRequest {
  int64 Id = 7;
  repeated PbAdviceContent Contents = 4;
}

// MessageId: 18910 (Response)
message AdviceModifyResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 29760 (Request)
message AdviceDeleteRequest {
  int64 Id = 1;
}

// MessageId: 17051 (Response)
message AdviceDeleteResponse {
  ErrorCode ErrorCode = 15;
}

enum PbAdviceVoteType {
  PbAdviceVoteType_Up = 0;
  PbAdviceVoteType_Cancel = 1;
}

// MessageId: 16062 (Request)
message AdviceVoteRequest {
  int64 Id = 14;
  int32 Type = 2;
}

// MessageId: 27593 (Response)
message AdviceVoteResponse {
  ErrorCode ErrorCode = 12;
}


message AiHateEntity {
  int64 EntityId = 1;
  int32 HatredValue = 2;
}


message Int2Long {
  int32 First = 1;
  int64 Second = 2;
}


message iNs {
  int32 First = 1;
  bool Second = 2;
}


message rNs {
  repeated BlackboardParam AiBlackboards = 1;
  repeated AiHateEntity HateList = 2;
  repeated Int2Long AiBlackboardCd = 3;
}


message nNs {
  int64 EntityId = 1;
  rNs AiInfo = 2;
  int32 PlayerId = 3;
}


// MessageId: 17927 (Request)
message AiInformationRequest {
  rNs AiInfo = 11;
}


// MessageId: 25801 (Push)
message AiInformationPush {
  rNs AiInfo = 3;
}


// MessageId: 25089 (Response)
message AiInformationResponse {
  ErrorCode ErrorCode = 10;
}


// MessageId: 24848 (Notify)
message AiInformationNotify {
  repeated Int2Long AiBlackboardCd = 10;
}


// MessageId: 25867 (Request)
message AiBlackboardsRequest {
  repeated BlackboardParam AiBlackboards = 8;
}


// MessageId: 16898 (Push)
message AiBlackboardsPush {
  repeated BlackboardParam AiBlackboards = 11;
}


// MessageId: 15615 (Response)
message AiBlackboardsResponse {
  ErrorCode ErrorCode = 4;
}


// MessageId: 20018 (Request)
message AiBlackboardCdRequest {
  repeated Int2Long AiBlackboardCdModify = 4;
  repeated iNs AiBlackboardCdComplete = 9;
}


// MessageId: 25094 (Push)
message AiBlackboardCdPush {
  repeated Int2Long AiBlackboardCdModify = 6;
  repeated iNs AiBlackboardCdComplete = 1;
}


// MessageId: 25872 (Response)
message AiBlackboardCdResponse {
  ErrorCode ErrorCode = 4;
}


// MessageId: 25895 (Notify)
message AiBlackboardCdNotify {
  repeated int32 AiBlackboardCdDel = 7;
  repeated Int2Long AiBlackboardCdModify = 15;
  repeated iNs AiBlackboardCdComplete = 10;
}


// MessageId: 16920 (Request)
message AiHateRequest {
  repeated AiHateEntity HateList = 10;
}


// MessageId: 19855 (Push)
message AiHatePush {
  repeated AiHateEntity HateList = 1;
}


// MessageId: 18147 (Response)
message AiHateResponse {
  ErrorCode ErrorCode = 14;
}


// MessageId: 18378 (Notify)
message AiHateNotify {
  repeated AiHateEntity HateList = 13;
}


// MessageId: 15024 (Request)
message AiControlSwitchRequest {
  int64 EntityId = 6;
}


// MessageId: 26216 (Response)
message AiControlSwitchResponse {
  ErrorCode ErrorCode = 2;
}


// MessageId: 15293 (Notify)
message AiControlSwitchNotify {
  repeated nNs AiControlSwitchInfos = 14;
}


// MessageId: 27989 (Notify)
message PreAiControlSwitchNotify {
  repeated int64 EntityIds = 6;
}

enum BlackboardParamType {
  BlackboardParamType_BlackboardParamType_None = 0;
  BlackboardParamType_BlackboardParamType_Int = 1;
  BlackboardParamType_BlackboardParamType_IntArray = 2;
  BlackboardParamType_BlackboardParamType_Long = 3;
  BlackboardParamType_BlackboardParamType_LongArray = 4;
  BlackboardParamType_BlackboardParamType_Boolean = 5;
  BlackboardParamType_BlackboardParamType_String = 6;
  BlackboardParamType_BlackboardParamType_StringArray = 7;
  BlackboardParamType_BlackboardParamType_Float = 8;
  BlackboardParamType_BlackboardParamType_FloatArray = 9;
  BlackboardParamType_BlackboardParamType_Vector = 10;
  BlackboardParamType_BlackboardParamType_VectorArray = 11;
  BlackboardParamType_BlackboardParamType_Rotator = 12;
  BlackboardParamType_BlackboardParamType_RotatorArray = 13;
  BlackboardParamType_BlackboardParamType_Entity = 14;
  BlackboardParamType_BlackboardParamType_EntityArray = 15;
}

message IntArrayBlackboard {
  repeated int32 Values = 1;
}

message LongArrayBlackboard {
  repeated int64 Values = 1;
}

message StringArrayBlackboard {
  repeated string Values = 1;
}

message FloatArrayBlackboard {
  repeated float Values = 1;
}

message VectorArrayBlackboard {
  repeated Vector Values = 1;
}

message RotatorArrayBlackboard {
  repeated Rotator Values = 1;
}

message BlackboardParam {
  oneof Value {
    int32 IntValue = 3;
    IntArrayBlackboard IntValues = 4;
    int64 LongValue = 5;
    LongArrayBlackboard LongValues = 6;
    bool BooleanValue = 7;
    string StringValue = 8;
    StringArrayBlackboard StringValues = 9;
    float FloatValue = 10;
    FloatArrayBlackboard FloatValues = 11;
    Vector VectorValue = 12;
    VectorArrayBlackboard VectorValues = 13;
    Rotator RotatorValue = 14;
    RotatorArrayBlackboard RotatorValues = 15;
  }
  string Key = 1;
  int32 Type = 2;
}

// MessageId: 25244 (Request)
message WorldBlackboardRequest {
  repeated BlackboardParam Params = 9;
}

// MessageId: 28622 (Response)
message WorldBlackboardResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 21016 (Notify)
message WorldBlackboardNotify {
  repeated BlackboardParam Params = 4;
}

// MessageId: 23614 (Request)
message EntityBlackboardRequest {
  int64 EntityId = 9;
  repeated BlackboardParam Params = 11;
}

// MessageId: 18124 (Response)
message EntityBlackboardResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 19608 (Notify)
message EntityBlackboardNotify {
  int64 EntityId = 4;
  repeated BlackboardParam Params = 14;
}

// MessageId: 15481 (Notify)
message UpdateAlertDataByServerNotify {
  repeated Un_1 li_2 = 7;
  repeated int32 _i_ = 6;
}

// MessageId: 17868 (Request)
message LeftDataList {
  int32 AreaId = 11;
  bool HideBone = 12;
}

// MessageId: 21751 (Response)
message ezl2 {
  ErrorCode ErrorCode = 14;
}

message Un_1 {
  int32 AreaId = 1;
  float ci_1 = 2;
  float ui_ = 3;
  bool di_1 = 4;
  bool mi_ = 5;
}

// MessageId: 26800 (Notify)
message KuroSdkReviewNotify {
  int32 Id = 1;
  int32 Delay = 3;
  int32 Type = 11;
}

// MessageId: 26254 (Request)
message EnterAreaRequest {
  int32 Id = 1;
  int32 NKa = 4;
}

// MessageId: 16766 (Response)
message EnterAreaResponse {
  ErrorCode ErrorCode = 14;
  int32 Id = 13;
}

message AudioState {
  int32 TreeOwnerId = 1;
  int64 TreeIncId = 2;
  string GroupType = 3;
  string State = 4;
}

// MessageId: 21732 (Notify)
message GameAudioUpdateNotify {
  repeated AudioState AudioState = 7;
}

enum BanChatType {
  BanChatType_None = 0;
  BanChatType_All = 1;
  BanChatType_Friend = 2;
  BanChatType_Foreign = 3;
  BanChatType_Team = 4;
}

// MessageId: 21843 (Notify)
message BanChatNotify {
  int64 BanEndTime = 4;
  int32 BanChatType = 13;
}

message BanLogoutInfo {
  int32 Reason = 1;
  int64 BanEndTime = 2;
}

message ReportChatInfo {
  string ChatMessage = 1;
}

message ReportTargetInfo {
  string Name = 1;
  string Signature = 2;
}

// MessageId: 20205 (Request)
message ReportPlayerRequest {
  oneof vNs2 {
    ReportChatInfo ChatInfo = 1;
    
  }
  oneof vNs1 {
    ReportTargetInfo TargetInfo = 13;
  }
  int32 TargetPlayerId = 10;
  int32 ReportReason = 5;
  string ReportMessage = 6;
  int32 ReportSource = 8;
}

// MessageId: 25034 (Response)
message ReportPlayerResponse {
  ErrorCode ErrorCode = 7;
  int32 ReportCount = 14;
}

// MessageId: 29791 (Notify)
message PlayerRenameNotify {
  string Name = 2;
}

message CardShowEntry {
  int32 CardId = 1;
  bool IsRead = 2;
}

// MessageId: 29267 (Notify)
message BasicInfoNotify {
  int32 Id = 10;
  repeated PlayerAttr Attributes = 7;
  repeated MingSuGenInfo MingSuGenInfos = 2;
  repeated DragonPoolInfo DragonPoolInfos = 3;
  repeated RoleShowEntry RoleShowList = 8;
  int32 CurCardId = 1;
  int32 Birthday = 6;
  repeated CardShowEntry CardUnlockList = 14;
  int32 RandomSeed = 4;
  bool DisplayBirthDay = 13;
  int64 Zha = 5;
  string ela = 11;
}

// MessageId: 15346 (Request)
message ModifyNameRequest {
  string Name = 13;
}

// MessageId: 26494 (Response)
message ModifyNameResponse {
  string Name = 1;
  ErrorCode ErrorCode = 10;
  int64 Zha = 12;
  string ela = 15;
}

// MessageId: 27844 (Request)
message ModifySignatureRequest {
  string Signature = 4;
}

// MessageId: 24056 (Response)
message ModifySignatureResponse {
  string Signature = 12;
  ErrorCode ErrorCode = 5;
}

// MessageId: 22417 (Request)
message ChangeHeadPhotoRequest {
  int32 HeadPhotoId = 10;
}

// MessageId: 15434 (Response)
message ChangeHeadPhotoResponse {
  int32 HeadPhotoId = 9;
  ErrorCode ErrorCode = 14;
}

// MessageId: 19699 (Notify)
message UnlockHeadPhotoNotify {
  int32 HeadPhotoId = 9;
}

// MessageId: 27931 (Notify)
message UnlockHeadFrameNotify {
  int32 HeadFrameId = 4;
}

enum NetStatusType {
  NetStatusType_Wifi = 0;
  NetStatusType_Stream = 1;
  NetStatusType_Wired = 2;
  NetStatusType_Other = 3;
}

enum ClientDeviceLevel {
  ClientDeviceLevel_Low = 0;
  ClientDeviceLevel_Medium = 1;
  ClientDeviceLevel_High = 2;
}

message ClientBasicInfo {
  string Platform = 1;
  string DeviceId = 2;
  int32 NetStatus = 3;
  string Model = 4;
  string CPU = 5;
  int32 DeviceLevel = 6;
  int32 Language = 7;
  string DistinctId = 8;
  string MacAddress = 9;
  string Fll = 10;
  string fi_ = 11;
}

// MessageId: 18408 (Request)
message ClientBasicInfoRequest {
  ClientBasicInfo ClientBasicInfo = 6;
}

// MessageId: 21656 (Response)
message ClientBasicInfoResponse {
}

// MessageId: 26011 (Request)
message PlayerBasicInfoGetRequest {
  int32 Id = 3;
}

// MessageId: 16751 (Response)
message PlayerBasicInfoGetResponse {
  PlayerDetails Info = 7;
  ErrorCode ErrorCode = 13;
}

// MessageId: 28754 (Request)
message BirthdayInitRequest {
  int32 Birthday = 13;
}

// MessageId: 20704 (Response)
message BirthdayInitResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 18405 (Request)
message RoleShowListUpdateRequest {
  repeated int32 RoleList = 5;
}

// MessageId: 19446 (Response)
message RoleShowListUpdateResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 27425 (Notify)
message HeadIdUpdateNotify {
  int32 HeadId = 12;
}

// MessageId: 16543 (Notify)
message RoleShowListUpdateNotify {
  repeated RoleShowEntry RoleShowList = 6;
}

// MessageId: 24543 (Request)
message ChangeCardRequest {
  int32 CardId = 6;
}

// MessageId: 29506 (Response)
message ChangeCardResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 26975 (Request)
message ReadCardRequest {
  int32 CardId = 4;
}

// MessageId: 17001 (Response)
message ReadCardResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 26491 (Notify)
message UnlockCardNotify {
  int32 CardId = 2;
}

// MessageId: 16208 (Request)
message BirthdayShowSetRequest {
  bool DOLLAR7n = 11;
}

// MessageId: 19637 (Response)
message BirthdayShowSetResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 28639 (Notify)
message SignatureUpdateNotify {
  string Signature = 3;
}

// MessageId: 18142 (Notify)
message ServerCommandNotify {
  string Command = 1;
}

// MessageId: 23960 (Notify)
message PlayerNameUpdateNotify {
  string Name = 6;
  int64 Zha = 15;
}

// MessageId: 20094 (Request)
message SearchPlayerBasicInfoBySdkIdRequest {
  string SdkOnlineId = 3;
}

// MessageId: 29259 (Response)
message SearchPlayerBasicInfoBySdkIdResponse {
  PlayerDetails Info = 8;
  ErrorCode ErrorCode = 9;
}

// MessageId: 20892 (Request)
message PlayerCreatePsnSessionRequest {
  string Session = 8;
}

// MessageId: 28055 (Response)
message PlayerCreatePsnSessionResponse {
}

// MessageId: 24718 (Notify)
message PlayerPsnSessionNotify {
  string Session = 4;
  int32 PlayerId = 12;
}

// MessageId: 16799 (Request)
message UpdatePlayStationBlockAccountRequest {
  repeated string BlockedIds = 15;
}

// MessageId: 27234 (Response)
message UpdatePlayStationBlockAccountResponse {
}

// MessageId: 15919 (Request)
message PlayerHeadDataRequest {
}

// MessageId: 24516 (Response)
message PlayerHeadDataResponse {
  repeated int32 pi_ = 14;
}

// MessageId: 16407 (Notify)
message UnLockPlayerHeadDataNotify {
  repeated int32 Ci_2 = 5;
}

// MessageId: 17167 (Request)
message WebSignRequest {
}

// MessageId: 27868 (Response)
message WebSignResponse {
  string NoticeSign = 14;
}

enum PlayerAttrType {
  PlayerAttrType_Int32 = 0;
  PlayerAttrType_String = 1;
}

enum PlayerAttrKey {
  PlayerAttrKey_Level = 0;
  PlayerAttrKey_Exp = 1;
  PlayerAttrKey_Coin = 2;
  PlayerAttrKey_RareCoin = 3;
  PlayerAttrKey_HeadPhoto = 4;
  PlayerAttrKey_HeadFrame = 5;
  PlayerAttrKey_AreaId = 6;
  PlayerAttrKey_Name = 7;
  PlayerAttrKey_Sign = 8;
  PlayerAttrKey_Sex = 9;
  PlayerAttrKey_OriginWorldLevel = 10;
  PlayerAttrKey_CurWorldLevel = 11;
  PlayerAttrKey_WorldLevelTimeStamp = 12;
  PlayerAttrKey_CashCoin = 13;
  PlayerAttrKey_WorldPermission = 14;
  PlayerAttrKey_PlayerTitle = 15;
}

message PlayerAttr {
  oneof Value {
    int32 Int32Value = 3;
    string StringValue = 4;
  }
  PlayerAttrKey Key = 1;
  PlayerAttrType ValueType = 2;
}

// MessageId: 23148 (Notify)
message PlayerAttrNotify {
  repeated PlayerAttr Attributes = 15;
}

// MessageId: 23002 (Request)
message HandInMingSuRequest {
  int32 DragonPoolId = 4;
  int64 InteractEntityId = 15;
}

// MessageId: 22078 (Response)
message HandInMingSuResponse {
  ErrorCode ErrorCode = 10;
  int32 DragonPoolId = 8;
  int32 Level = 11;
  int32 ActiveStatus = 14;
  int32 InjectedCoreItemCount = 1;
}

message MingSuGenInfo {
  int64 CreatureGenId = 1;
}

message DragonPoolInfo {
  int32 DragonPoolId = 1;
  int32 ActiveStatus = 2;
  int32 Level = 3;
  int32 InjectedCoreItemCount = 4;
}

// MessageId: 29891 (Request)
message ActiveDragonPoolRequest {
  int32 DragonPoolId = 10;
}

// MessageId: 27211 (Response)
message ActiveDragonPoolResponse {
  ErrorCode ErrorCode = 15;
  int32 DragonPoolId = 12;
  int32 ActiveStatus = 5;
}

// MessageId: 15476 (Request)
message DragonPoolConfRequest {
  int32 DragonPoolId = 4;
}

message ItemEntry {
  int32 ItemId = 1;
  int32 ItemCount = 2;
}

message ItemDict {
  repeated ItemEntry Items = 1;
}

message DragonPoolDropItems {
  int32 DragonPoolId = 1;
  repeated int32 QSs = 2;
  repeated ItemDict DropItems = 3;
}

// MessageId: 24420 (Response)
message DragonPoolConfResponse {
  ErrorCode ErrorCode = 6;
  DragonPoolDropItems DragonPoolDropItems = 5;
}

// MessageId: 25954 (Request)
message MingSuHandRewardRequest {
  int32 DragonPoolId = 13;
  int64 InteractEntityId = 11;
}

// MessageId: 28664 (Response)
message MingSuHandRewardResponse {
  ErrorCode ErrorCode = 5;
  int32 LevelGain = 1;
}

// MessageId: 29460 (Request)
message DarkCoastDeliveryRequest {
  int32 DragonPoolId = 15;
}

// MessageId: 17838 (Response)
message DarkCoastDeliveryResponse {
  ErrorCode ErrorCode = 11;
  DragonPoolDropItems DragonPoolDropItems = 15;
  repeated int32 DefeatedGuard = 10;
  repeated int32 ReceivedGuardReward = 1;
  int32 LevelGain = 14;
}

message YT1 {
  int64 XT1 = 1;
}

enum BattlePassType {
  BattlePassType_Free = 0;
  BattlePassType_Pay = 1;
}

enum BattlePassPayStatus {
  BattlePassPayStatus_NoPaid = 0;
  BattlePassPayStatus_Paid = 1;
  BattlePassPayStatus_Advanced = 2;
}

message PbBattlePassReward {
  int32 Level = 1;
  int32 ItemId = 2;
  int32 Type = 3;
}

message PbBattlePassRecurringReward {
  int32 Type = 1;
  int32 ItemId = 2;
  int32 Count = 3;
}

message PbBattlePass {
  bool InTimeRange = 1;
  int32 Id = 2;
  int32 Level = 3;
  int32 Exp = 4;
  int32 WeeklyTotalExp = 5;
  int32 PayStatus = 6;
  repeated PbBattlePassReward TakenRewards = 7;
  int64 BeginTime = 8;
  int64 EndTime = 9;
  repeated PbBattlePassRecurringReward RecurringRewards = 10;
  bool HadEnter = 11;
}

// MessageId: 15561 (Request)
message BattlePassRequest {
}

// MessageId: 25967 (Response)
message BattlePassResponse {
  PbBattlePass BattlePass = 9;
  ErrorCode ErrorCode = 13;
}

// MessageId: 23298 (Notify)
message BattlePassPaidNotify {
  int32 PayStatus = 8;
}

// MessageId: 21969 (Request)
message BattlePassTakeRewardRequest {
  int32 Type = 9;
  int32 Level = 1;
  int32 ItemId = 8;
}

// MessageId: 15733 (Response)
message BattlePassTakeRewardResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 26051 (Request)
message BattlePassRecurringTakeRequest {
  int32 Type = 11;
  int32 ItemId = 8;
}

// MessageId: 17846 (Response)
message BattlePassRecurringTakeResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 26489 (Request)
message BattlePassTakeAllRewardRequest {
}

// MessageId: 23025 (Response)
message BattlePassTakeAllRewardResponse {
  repeated PbBattlePassReward TakenRewards = 15;
  repeated PbBattlePassRecurringReward RecurringRewards = 13;
  ErrorCode ErrorCode = 8;
}

// MessageId: 16129 (Notify)
message BattlePassExpUpdateNotify {
  int32 Level = 3;
  int32 Exp = 12;
  int32 WeeklyTotalExp = 7;
  repeated PbBattlePassRecurringReward RecurringRewards = 15;
}

message PbBattlePassTask {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  bool IsFinished = 4;
  bool IsTaken = 5;
}

// MessageId: 29168 (Request)
message BattlePassTaskRequest {
}

// MessageId: 29442 (Response)
message BattlePassTaskResponse {
  int64 DayEnd = 12;
  int64 WeekEnd = 1;
  repeated PbBattlePassTask Tasks = 15;
  ErrorCode ErrorCode = 4;
}

// MessageId: 22870 (Notify)
message BattlePassTaskUpdateNotify {
  repeated PbBattlePassTask Tasks = 12;
}

// MessageId: 18403 (Request)
message BattlePassTaskTakeRequest {
  repeated int32 Ids = 12;
}

// MessageId: 22197 (Response)
message BattlePassTaskTakeResponse {
  repeated int32 Ids = 8;
  ErrorCode ErrorCode = 14;
}

// MessageId: 20146 (Push)
message BattlePassEnterPush {
}

// MessageId: 20752 (Request)
message BattlePassLevelUpRequest {
  int32 Level = 4;
}

// MessageId: 17455 (Response)
message BattlePassLevelUpResponse {
  ErrorCode ErrorCode = 3;
}

enum BtType {
  BtType_BtTypeInvalid = 0;
  BtType_BtTypeQuest = 1;
  BtType_BtTypeLevelPlay = 2;
  BtType_BtTypeInst = 3;
}

enum NodeStatus {
  NodeStatus_NotActive = 0;
  NodeStatus_BeforeActivate = 1;
  NodeStatus_Activate = 2;
  NodeStatus_Completing = 3;
  NodeStatus_CompletedSuccess = 4;
  NodeStatus_CompletedFailed = 5;
  NodeStatus_Suspend = 6;
  NodeStatus_Destroy = 7;
}

enum FailReason {
  FailReason_DefaultFail = 0;
  FailReason_AutoFail = 1;
  FailReason_EntityStateFail = 2;
  FailReason_TimeoutFail = 3;
  FailReason_LeaveInstFail = 4;
  FailReason_InstFail = 5;
  FailReason_CharacterDieFail = 6;
  FailReason_EntityDieFail = 7;
  FailReason_OutRangeFail = 8;
  FailReason_GiveUpFail = 9;
  FailReason_SneakTimeoutFail = 10;
  FailReason_TransferFail = 11;
  FailReason_PlayerMotionState = 12;
  FailReason_NpcTraceOutRange = 13;
  FailReason_NpcTraceAlertFull = 14;
  FailReason_DataLayerFail = 15;
  FailReason_PlayerLevelPlayMoveStateFail = 16;
  FailReason_CompareVarFail = 17;
  FailReason_TimeRange = 18;
  FailReason_ClearCabinFail = 19;
}

message qNs {
  oneof GNs {
    ChildQuestNodeInfo ChildQuestNodeInfo = 2;
  }
  int32 Status = 1;
}

message TreeInfo {
  int32 TreeOwnerId = 1;
  int64 TreeIncId = 2;
  BtType BtType = 3;
  int32 BlackboardId = 4;
  map<int32, qNs> Nodes = 5;
  map<string, VarDefinePb> Vars = 6;
  repeated TimerInfoPb TimerInfos = 7;
  int32 SuspendType = 8;
  repeated OccupationPbInfo OccupationInfo = 9;
  map<string, string> AudioState = 10;
  bool cDOLLARs = 11;
  repeated SightTarget SightTarget = 12;
  int32 fL1 = 13;
}

// MessageId: 21878 (Notify)
message BehaviorTreeInfoNotify {
  repeated TreeInfo TreeInfos = 8;
}

// MessageId: 17084 (Notify)
message BehaviorTreeDeleteNotify {
  repeated int64 TreeIncIds = 8;
}

enum ChildQuestNodeStatus {
  ChildQuestNodeStatus_NotActive = 0;
  ChildQuestNodeStatus_Enter = 1;
  ChildQuestNodeStatus_EnterAction = 2;
  ChildQuestNodeStatus_Progress = 3;
  ChildQuestNodeStatus_Finished = 4;
  ChildQuestNodeStatus_FinishAction = 5;
  ChildQuestNodeStatus_Fail = 6;
}

message ChildQuestNodeProgress {
  oneof Progress {
    KillProgress Kill = 1;
    GetItemProgress GetItem = 2;
    MonsterCreatorProgress MonsterCreator = 3;
    UseItemProgress UseItem = 4;
    int32 levelPlayCount = 5;
    InteractProgress Interact = 6;
    CompleteInstProgress CompleteInst = 7;
    EntityStateProgress EntityStateList = 8;
  }
}

message EntityStateProgress {
  repeated int32 EntityId = 1;
}

message ChildQuestNodeInfo {
  int32 Status = 1;
  ChildQuestNodeProgress Progress = 2;
}

message KillProgress {
  repeated int32 MonId = 1;
  int32 PrefabNum = 2;
  int32 CurrNum = 3;
  int32 TotalNum = 4;
}

message InteractProgress {
  repeated int32 NpcId = 1;
}

message GetItemProgress {
  repeated GetItemCount Info = 1;
}

message GetItemCount {
  int32 ItemId = 1;
  int32 Count = 2;
}

enum SpawnMonsterStepType {
  SpawnMonsterStepType_Prepare = 0;
  SpawnMonsterStepType_Active = 1;
  SpawnMonsterStepType_Refreshed = 2;
  SpawnMonsterStepType_End = 3;
}

message zNs {
  enum ENUMS {
    ENUMS_NotCreate = 0;
    ENUMS_Alive = 1;
    ENUMS_Death = 2;
  }


}
message SceneMonsterCreatedMonsterInfo {
  int32 PrefabId = 1;
  int32 MapId = 2;
  int64 BaseLife = 3;
  int32 State = 4;
}

message MonsterCreatorProgress {
  repeated MonsterCreatorProgressSlot Slots = 1;
  int32 TotalNum = 2;
}

message MonsterCreatorProgressSlot {
  int32 WaveId = 1;
  repeated int32 KillMonIds = 2;
  int32 CurrentWaveEndTime = 3;
  int32 SpawnStepType = 4;
  int32 CreatorEntityConfigId = 5;
  repeated SceneMonsterCreatedMonsterInfo MonsterInfo = 6;
}

message UseItemProgress {
  int32 ItemId = 1;
  int32 Count = 2;
}

message CompleteInstProgress {
  int32 InstId = 1;
  int32 Count = 2;
}

enum SuccessNodeStatus {
  SuccessNodeStatus_NotActive = 0;
  SuccessNodeStatus_Enter = 1;
  SuccessNodeStatus_Action = 2;
}

enum FailedNodeStatus {
  FailedNodeStatus_NotActive = 0;
  FailedNodeStatus_Enter = 1;
  FailedNodeStatus_Action = 2;
}

// MessageId: 19745 (Notify)
message UpdateNodeProgressNotify {
  int32 TreeOwnerId = 12;
  int64 TreeIncId = 5;
  int32 NodeId = 13;
  ChildQuestNodeProgress Progress = 3;
}

// MessageId: 28791 (Notify)
message UpdateChildQuestNodeStatusNotify {
  int32 TreeOwnerId = 4;
  int64 TreeIncId = 6;
  int32 NodeId = 7;
  ChildQuestNodeStatus Status = 2;
}

// MessageId: 26656 (Notify)
message UpdateNodeStatusNotify {
  int32 TreeOwnerId = 14;
  int64 TreeIncId = 10;
  int32 NodeId = 3;
  NodeStatus Status = 5;
}

// MessageId: 19003 (Request)
message SubmitNodeRequest {
  int32 TreeOwnerId = 2;
  int64 TreeIncId = 9;
  int32 NodeId = 15;
}

// MessageId: 21694 (Response)
message SubmitNodeResponse {
  int32 TreeOwnerId = 11;
  int64 TreeIncId = 3;
  int32 NodeId = 7;
  int32 ErrorId = 8;
}

// MessageId: 15283 (Request)
message PhotographShotRequest {
  int32 TreeOwnerId = 3;
  int64 TreeIncId = 13;
  int32 NodeId = 14;
  repeated int32 EntityIds = 4;
}

// MessageId: 29391 (Response)
message PhotographShotResponse {
  int32 ErrorId = 11;
}

enum PbHandInItemType {
  PbHandInItemType_ItemIds = 0;
  PbHandInItemType_H9n = 1;
}

message PbHandInItemInfo {
  int32 IncId = 1;
  int32 Num = 2;
  int32 ItemId = 3;
}

message PbHandInItem {
  repeated PbHandInItemInfo HandItemInfo = 1;
  int32 Count = 2;
  int32 PbHandInItemType = 3;
}

// MessageId: 24784 (Request)
message HandInItemRequest {
  int32 TreeOwnerId = 6;
  int64 TreeIncId = 15;
  int32 NodeId = 9;
  repeated PbHandInItem HandInItem = 14;
}

// MessageId: 29734 (Response)
message HandInItemResponse {
  int32 ErrorId = 4;
}

enum n3s {
  n3s_CEs = 0;
  n3s_SendNpcMail = 1;
}

enum TimerSetType {
  TimerSetType_Add = 0;
  TimerSetType_Sub = 1;
  TimerSetType_Set = 2;
}

// MessageId: 25348 (Request)
message BtSetTimerInfoRequest {
  int32 TreeOwnerId = 3;
  int64 TreeIncId = 9;
  string TimerType = 10;
  int32 SetType = 1;
  int32 Second = 5;
  int32 NodeId = 6;
}

// MessageId: 19990 (Response)
message BtSetTimerInfoResponse {
  int32 ErrorId = 12;
}

message OccupationPbInfo {
  string ResourceName = 1;
  int32 NodeId = 2;
  int64 IncId = 3;
}

enum SuspendType {
  SuspendType_Occupation = 0;
  SuspendType_Online = 1;
  SuspendType_ScreenOccupation = 2;
}

// MessageId: 15093 (Notify)
message BtSuspendNotify {
  int32 TreeOwnerId = 15;
  int64 TreeIncId = 9;
  int32 NodeId = 12;
  repeated OccupationPbInfo OccupationInfo = 2;
  int32 SuspendType = 1;
  bool cDOLLARs = 6;
}

// MessageId: 28932 (Notify)
message OccupationInfoNotify {
  repeated OccupationPbInfo OccupationInfo = 14;
}

// MessageId: 16229 (Notify)
message AddOccupationInfoNotify {
  repeated OccupationPbInfo OccupationInfo = 7;
}

// MessageId: 29940 (Notify)
message RemoveOccupationInfoNotify {
  repeated string GEs = 8;
}

enum a3s {
  a3s_Z6n = 0;
  a3s_CMs = 1;
}

// MessageId: 19658 (Notify)
message TimeOccupationNotify {
  int32 OEs = 8;
}

// MessageId: 26774 (Request)
message BtForcedOccupationRequest {
  int64 TreeIncId = 13;
}

// MessageId: 18289 (Response)
message BtForcedOccupationResponse {
  int32 ErrorId = 8;
}

// MessageId: 21002 (Request)
message BtGiveUpRequest {
  int32 TreeOwnerId = 8;
  int64 TreeIncId = 3;
  int32 NodeId = 15;
}

// MessageId: 15275 (Response)
message BtGiveUpResponse {
  int32 ErrorId = 1;
}

// MessageId: 20563 (Notify)
message BtRollbackNotify {
  int32 TreeOwnerId = 5;
  int64 TreeIncId = 4;
  int32 kEs = 7;
  int32 NEs2 = 14;
}

// MessageId: 29245 (Request)
message BtRollbackRequest {
  int32 TreeOwnerId = 2;
  int64 TreeIncId = 12;
  int32 p9n = 15;
}

// MessageId: 16437 (Response)
message BtRollbackResponse {
  int32 ErrorId = 6;
}

// MessageId: 22504 (Notify)
message BtRollbackStartNotify {
  int32 TreeOwnerId = 6;
  int64 TreeIncId = 8;
  bool IsRollbackSubLevel = 14;
  bool IsRollbackPos = 11;
}

// MessageId: 27756 (Notify)
message RollbackInfoNotify {
  int32 TreeOwnerId = 15;
  int64 TreeIncId = 14;
  TreeInfo TreeInfo = 8;
}

// MessageId: 15211 (Notify)
message QuestRangeFailWarningTreeIdNotify {
  int64 TreeIncId = 8;
}

// MessageId: 15452 (Notify)
message HideCancelRangeFailWaringEffectNotify {
  int64 TreeIncId = 6;
}

// MessageId: 22248 (Request)
message SneakRequest {
  int32 TreeOwnerId = 14;
  int64 TreeIncId = 12;
  int32 NodeId = 2;
  bool IsStart = 13;
}

// MessageId: 23177 (Response)
message SneakResponse {
  int32 ErrorId = 14;
}

// MessageId: 21577 (Request)
message SneakTimeRequest {
  int32 TreeOwnerId = 2;
  int64 TreeIncId = 7;
}

// MessageId: 22101 (Response)
message SneakTimeResponse {
  int32 ErrorId = 13;
}

// MessageId: 22346 (Notify)
message SneakNotify {
  int32 TreeOwnerId = 5;
  int64 TreeIncId = 14;
  int32 NodeId = 12;
  int64 EndTime = 9;
}

message TimerInfoPb {
  string TimerType = 1;
  int32 NodeId = 2;
  int64 EndTime = 3;
  int64 HE_ = 4;
}

// MessageId: 15832 (Notify)
message UpdateTimerInfoNotify {
  int32 TreeOwnerId = 15;
  int64 TreeIncId = 1;
  TimerInfoPb HEs = 11;
}

// MessageId: 24316 (Request)
message TimerEndRequest {
  int32 TreeOwnerId = 1;
  int64 TreeIncId = 11;
  string TimerType = 12;
}

// MessageId: 15528 (Response)
message TimerEndResponse {
  int32 ErrorId = 15;
}

enum UiGamePlayType {
  UiGamePlayType_Cipher = 0;
  UiGamePlayType_SignalBreak = 1;
  UiGamePlayType_SundialPuzzle = 2;
  UiGamePlayType_MorseCode = 3;
  UiGamePlayType_SignalDevice = 4;
  UiGamePlayType_LifePoint = 5;
}

// MessageId: 28624 (Request)
message UiGamePlayRequest {
  int32 Type = 11;
  string GamePlayKey = 3;
}

// MessageId: 23957 (Response)
message UiGamePlayResponse {
  int32 ErrorId = 5;
}

// MessageId: 16538 (Request)
message NpcTraceFailedRequest {
  int32 TreeOwnerId = 6;
  int64 TreeIncId = 15;
  int32 NodeId = 12;
}

// MessageId: 18428 (Response)
message NpcTraceFailedResponse {
  int32 ErrorId = 1;
}

// MessageId: 17892 (Notify)
message BtVarUpdateNotify {
  int32 TreeOwnerId = 14;
  int64 TreeIncId = 10;
  string VarName = 6;
  VarDefinePb VarDefine = 5;
}

message FuncInfo {
  int32 FuncId = 1;
  bool Challenges = 2;
}

// MessageId: 19318 (Notify)
message UpdateFunctionOpenLockByBehaviorTreeNotify {
  repeated FuncInfo FuncInfo = 5;
}

// MessageId: 26660 (Request)
message SubmitAwakeAndLoadEntityNodeRequest {
  int32 TreeOwnerId = 1;
  int64 TreeIncId = 14;
  int32 NodeId = 12;
}

// MessageId: 21021 (Response)
message SubmitAwakeAndLoadEntityNodeResponse {
  ErrorCode ErrorCode = 13;
}

enum DungeonTeleportType {
  DungeonTeleportType_Invalid = 0;
  DungeonTeleportType_TeleportDungeon = 1;
}

message Bn_1 {
  repeated int32 Ei_2 = 1;
}

message kn_2 {
  oneof K4s {
    Bn_1 Ii_2 = 3;
  }
  int32 Type = 1;
  bool IsEnable = 2;
}

// MessageId: 27292 (Notify)
message UpdateForbidDungeonNotify {
  repeated kn_2 FuncInfo = 15;
}

// MessageId: 20573 (Request)
message OXl {
  int32 TreeOwnerId = 4;
  int64 TreeIncId = 2;
  int32 NodeId = 14;
  int32 Points = 13;
}

// MessageId: 29058 (Response)
message GXl {
  ErrorCode ErrorCode = 3;
}

// MessageId: 17420 (Notify)
message ServerEndQuestIdNotify {
  int32 QuestId = 1;
  int64 TreeIncId = 12;
  repeated int64 Ti_2 = 5;
}

// MessageId: 21825 (Request)
message ServerEndQuestIdRequest {
  int32 QuestId = 8;
}

// MessageId: 19735 (Response)
message ServerEndQuestIdResponse {
  ErrorCode ErrorCode = 5;
}

// MessageId: 24302 (Notify)
message wy_1 {
  int32 TreeOwnerId = 15;
  int64 TreeIncId = 10;
  repeated SightTarget SightTarget = 14;
}

message SightTarget {
  oneof Ow {
    int32 EntityId = 3;
  }
  oneof Bw {
    Vector CIl = 4;
  }
  AttachTarget AttachTarget = 1;
  int32 TargetEntityId = 2;
}

// MessageId: 28385 (Notify)
message Alc {
  int32 xlc = 4;
}

// MessageId: 29691 (Notify)
message Plc {
  int32 xlc = 3;
}

enum SourceType {
  SourceType_UnDefine = 0;
  SourceType_SourceEntity = 3;
  SourceType_SourceQuest = 4;
}

enum EntityConfigType {
  EntityConfigType_OldEntity = 0;
  EntityConfigType_Level = 1;
  EntityConfigType_Global = 2;
  EntityConfigType_Character = 3;
  EntityConfigType_Template = 4;
  EntityConfigType_Prefab = 5;
}

message FightBuffInformation {
  int32 HandleId = 1;
  int64 BuffId = 2;
  int32 Level = 3;
  int32 StackCount = 4;
  int64 InstigatorId = 5;
  int64 EntityId = 6;
  int32 ApplyType = 7;
  float Duration = 8;
  float LeftDuration = 9;
  repeated FightBuffEffectContext Context = 10;
  bool IsActive = 11;
  int32 ServerId = 12;
  int64 MessageId = 13;
}

message EntityPb {
  oneof d3s {
    int32 Camp = 20;
  }
  int64 Id = 1;
  int32 ConfigId = 2;
  EntityConfigType ConfigType = 3;
  EEntityType EntityType = 4;
  Vector Pos = 5;
  Rotator Rot = 6;
  Vector InitPos = 7;
  LivingStatus LivingStatus = 8;
  bool IsVisible = 9;
  int32 PlayerId = 10;
  repeated EntityComponentPb ComponentPbs = 11;
  int32 DurabilityValue = 12;
  int32 EntityState = 13;
  Vector InitLinearVelocity = 14;
  bool IsPosAbnormal = 15;
  int32 PrefabId = 17;
  int64 PrefabIncId = 18;
  int32 SubEntityType = 19;
  int64 OwnerIncId = 21;
  Vector YE_2 = 22;
  int32 RoleSkinId = 23;
  bool IsActorVisible = 24;
  int32 SoarWingSkinId = 25;
  int32 ParaglidingSkinId = 26;
  bool IsSnapLocation = 27;
}

message EntityComponentPb {
  oneof ComponentPb {
    AttributeComponentPb AttributeComponent = 1;
    TagComponentPb TagComponent = 2;
    TriggerComponentPb TriggerComponent = 3;
    SummonerComponentPb SummonerComponent = 4;
    PartComponentPb PartComponent = 5;
    VisionSkillComponentPb VisionSkillComponent = 6;
    AnimationStateComponentPb AnimationStateComponent = 7;
    BlackboardParamComponentPb BlackboardParamComponent = 8;
    SysBuffComponentPb SysBuffComponent = 10;
    ClientDataComponentPb ClientDataComponent = 11;
    MonsterWeaponComponentPb MonsterWeaponComponentPb = 12;
    MonsterAiComponentPb MonsterAiComponentPb = 13;
    FightBuffComponentPb FightBuffComponent = 15;
    NearbyTrackingComponentPb NearbyTrackingComponentPb = 16;
    DropComponentPb DropComponentPb = 17;
    MonsterCaptureComponentPb MonsterCaptureComponent = 18;
    LogicStateComponentPb LogicStateComponentPb = 19;
    AdviceComponentPb AdviceComponentPb = 20;
    LiftComponentPb LiftComponentPb = 21;
    InteractComponentPb InteractComponent = 22;
    EquipComponentPb EquipComponent = 23;
    BeControlledComponentPb BeControlledComponentPb = 24;
    ConcomitantsComponentPb ConcomitantsComponentPb = 25;
    TimelineTrackComponentPb TimelineTrackComponentPb = 26;
    SummonsComponentPb SummonsComponentPb = 27;
    EntityFsmComponentPb EntityFsmComponentPb = 28;
    BoardPb BoardPb = 29;
    PlacementItemPb PlacementItemPb = 30;
    StateTagComponentPb StateTagComponentPb = 31;
    MonsterGachaDataPb MonsterGachaDataPb = 32;
    FanComponentPb FanComponentPb = 33;
    NpcPb NpcPb = 34;
    BubbleComponentPb BubbleComponent = 35;
    PatrolComponentPb PatrolComponent = 36;
    RangeComponentPb RangeComponent = 37;
    PassiveSkillComponentPb PassiveSkillComponentPb = 38;
    PassiveGaSkillComponentPb PassiveGaSkillComponentPb = 39;
    DynAttachComponentPb DynAttachComponentPb = 40;
    EntityVarComponentPb EntityVarComponentPb = 41;
    FollowShooterComponentPb FollowShooterComponentPb = 42;
    StateComponentPb StateComponentPb = 43;
    BulletComponentPb BulletComponentPb = 44;
    BuffProducerComponentPb BuffProducerComponentPb = 45;
    BuffConsumerComponentPb BuffConsumerComponentPb = 46;
    AutonomousComponentPb AutonomousComponentPb = 47;
    ShieldComponentPb ShieldComponentPb = 48;
    NPCPerformGroupComponentPb NPCPerformGroupComponentPb = 49;
    Ri_1 Ri_1 = 50;
    JigsawBaseComponentPb JigsawBaseComponentPb = 51;
    RoleRecordComponentPb RoleRecordComponentPb = 52;
    FollowerComponentPb FollowerComponentPb = 53;
    AttributesIdsComponentPb AttributesIdsComponentPb = 54;
    Di_2 Di_ = 55;
    Bi_ Bi_ = 56;
    WeaponSkinComponentPb WeaponSkinComponentPb = 57;
    CharacterAttachComponentPb CharacterAttachComponentPb = 58;
    PatrolInfoComponentPb PatrolInfoComponentPb = 59;
    AnimalPerformComponentPb AnimalPerformComponentPb = 60;
    NpcDriveVehicleComponentPb NpcDriveVehicleComponentPb = 61;
    GrapplingHookPointComponentPb GrapplingHookPointComponentPb = 62;
    Mx_2 Mx_ = 63;
    R8_ R8_ = 64;
    GravityFlipComponent GravityFlipComponent = 65;
    ERc ERc = 66;
  }
}

message MonsterAiComponentPb {
  int32 WeaponId = 1;
  int64 HatredGroupId = 2;
  int32 AiTeamInitId = 3;
  int64 CombatMessageId = 4;
}

message MonsterWeaponComponentPb {
  int32 WeaponId = 1;
}

message Bi_ {
  int64 ConstateId = 1;
}

enum EntranceState {
  EntranceState_NotUnlock = 0;
  EntranceState_Unlockable = 1;
  EntranceState_Unlocked = 2;
  EntranceState_Closed = 3;
}

message RangeComponentPb {
  repeated int32 PlayerCount = 1;
  repeated int64 rIs = 2;
}

message w3s {
  int32 State = 1;
}

message ClientDataComponentPb {
  bool IsStaticInit = 1;
  int64 OwnerId = 2;
  int32 GroupId = 3;
}

message AttributeComponentPb {
  int32 HardnessModeId = 2;
  int32 RageModeId = 3;
  repeated AttrData AttrData = 4;
}

message TagComponentPb {
  repeated GameplayTagData GameplayTags = 1;
  repeated int32 EntityCommonTags = 2;
  bool InitGameplayTag = 3;
}

message TriggerComponentPb {
  int32 TriggerCount = 1;
  int32 ExitTriggerCount = 2;
  int64 ConstateId = 3;
}

message StateTagComponentPb {
  int32 StateTagId = 1;
}

message VisionSkillComponentPb {
  repeated VisionSkillInformation VisionSkillInfos = 1;
}

message EntityVarComponentPb {
  map<string, VarDefinePb> Vars = 1;
}

message BoneVisibleData {
  string sWn = 1;
  bool HideBone = 2;
}

message AnimationStateComponentPb {
  repeated int32 AnimationStates = 1;
  repeated int32 SpecialStates = 2;
  repeated BoneVisibleData BoneVisibleDatas = 3;
  repeated int32 AnimationTags = 4;
}

message LogicStateComponentPb {
  int32 PositionState = 1;
  int32 MoveState = 2;
  int32 DirectionState = 3;
  int32 PositionSubState = 4;
}

message LiftComponentPb {
  int32 Location = 1;
}

message BlackboardParamComponentPb {
  repeated BlackboardParam BlackboardParams = 1;
}

message SysBuffComponentPb {
  repeated SysBuffInformation SysBuffInfos = 1;
}

message SysBuffInformation {
  int32 ServerId = 1;
  int64 BuffId = 2;
  int32 Level = 3;
  int64 MessageId = 4;
  int64 InstigatorId = 5;
  float Duration = 6;
  int32 StackCount = 7;
  int32 ApplyType = 8;
  bool IsIterable = 9;
}

message FightBuffComponentPb {
  repeated FightBuffInformation FightBuffInfos = 1;
  repeated BuffEffectCd ListBuffEffectCd = 2;
}

message NearbyTrackingComponentPb {
  bool IsEnable = 1;
}

message DropComponentPb {
  int32 ItemId = 1;
  int32 ShowPlanId = 2;
  int32 ItemCount = 3;
  int32 MapId = 4;
}

message MonsterCaptureComponentPb {
  int32 TemplateId = 1;
  int32 EntityId = 2;
  int32 MonsterId = 3;
}

message BubbleInfo {
  string ActionGuid = 1;
  GameCtxPb GameCtx = 2;
}

message BubbleComponentPb {
  repeated BubbleInfo BubbleInfos = 1;
}

message RoleRecordComponentPb {
  bool IsAutoRole = 1;
  int64 ConstateId = 2;
}

message DynamicInteractInfo {
  string OptionGuid = 1;
  GameCtxPb GameCtx = 2;
  string Text = 3;
  bool XCa = 4;
}

message InteractComponentPb {
  repeated DynamicInteractInfo DynamicInteractInfos = 1;
  repeated int32 RandomInteractIndex = 2;
  bool Interacting = 3;
}

message AutonomousComponentPb {
  int32 AutonomousId = 1;
  repeated On_2 ji_ = 2;
}

message BeControlledComponentPb {
  int64 PlayerEntityId = 1;
  int32 RelationId = 2;
  bool IsShow = 3;
  int32 BIs = 4;
  int64 ConstateId = 5;
}

message Di_2 {
  int32 RelationId = 1;
  int32 BIs = 2;
}

message DynAttachComponentPb {
  int32 PbDynAttachEntityConfigId = 1;
  string PbDynAttachEntityActorKey = 2;
  Vector Pos = 3;
  Rotator Rot = 4;
  string PbDynAttachRefActorKey = 5;
}

message ConcomitantsComponentPb {
  int64 VisionEntityId = 1;
  repeated int64 CustomEntityIds = 2;
  int64 PhantomRoleId = 3;
}

message TimelineTrackControlDataPb {
  int32 ControlPoint = 1;
}

message TimelineTrackComponentPb {
  int32 Index = 1;
  repeated TimelineTrackControlDataPb ControlDatas = 2;
}

message BoardPb {
  repeated OccupiedBoardGridInfo OccupiedGridList = 1;
  repeated BoardGridDynamicConfig DynamicGridConfigs = 2;
  bool Hi_2 = 3;
}

message CrystalMonsterSlotInfo {
  repeated int32 EntityIds = 1;
  int32 MonsterType = 2;
}

message CrystalMonsterInfoPb {
  repeated CrystalMonsterSlotInfo SlotInfoList = 1;
}

message MonsterGachaDataPb {
  repeated CrystalMonsterInfoPb MonsterCrystalInfoList = 1;
}

message FanComponentPb {
  int32 NumOfTurns = 1;
}

message PassiveSkillItemPb {
  CombatCommon CombatCommon = 1;
  int64 SkillId = 2;
}

message PassiveSkillComponentPb {
  repeated PassiveSkillItemPb PassiveSkillItemPbList = 1;
}

message CharacterSkillComponentPb {
  UseSkillInformation UseSkillInfo = 1;
  int32 MontageIndex = 2;
  int32 QIs = 3;
  string XIs = 4;
  float SpeedRatio = 5;
  int64 MessageId = 6;
  int64 MontageContext = 7;
}

message SkillComponentPb {
  int32 SkillId = 1;
  int64 ConstateId = 2;
}

message PassiveGaSkillComponentPb {
  repeated CharacterSkillComponentPb YIs = 1;
  repeated SkillComponentPb SkillComponentPb = 2;
}

message UseSkillInformation {
  CombatCommon CombatCommon = 1;
  int64 Id = 2;
  int32 SkillId = 3;
  MovementInformation MovementInformation = 4;
  Vector Location = 5;
  int64 TargetId = 6;
  float TimeStamp = 7;
  bool IsSpecialSkill = 8;
  int32 Duration = 9;
  int32 SkillInterruptLevel = 10;
  int32 FightState = 11;
}

message StateComponentPb {
  int64 ConstateId = 1;
}

message BuffProducerComponentPb {
  int64 ConstateId = 1;
}

message BuffConsumerComponentPb {
  int64 ConstateId = 1;
}

message BulletComponentPb {
  int64 ConstateId = 1;
}

// MessageId: 21615 (Notify)
message EntityAddNotify {
  repeated EntityPb EntityPbs = 1;
  bool RemoveTagIds = 11;
}

// MessageId: 24313 (Notify)
message EntityRemoveNotify {
  repeated EntityRemoveInfo RemoveInfos = 14;
  bool IsRemove = 4;
}

// MessageId: 15797 (Notify)
message AddPreloadEntitiesNotify {
  repeated int64 EntityIds = 13;
}

message K3s {
  int32 Type = 1;
  int32 tTs = 2;
  string Name = 3;
}

enum Q3s {
  Q3s_NotDelay = 0;
  Q3s_qKn = 1;
}

message VarDefinePb {
  oneof Value {
    bool Boolean = 2;
    int64 Int = 3;
    string String = 4;
    float Float = 5;
    int32 Entity = 6;
    int32 Quest = 7;
    int32 QuestState = 8;
    Vector Pos = 9;
    int64 Prefab = 10;
  }
  int32 VarType = 1;
}

message X3s {
  VarDefinePb Value = 1;
}

message Y3s {
  string Name = 1;
}

message J3s {
  string Name = 1;
}

message z3s1 {
  oneof Z3s2 {
    X3s _Ts = 2;
    Y3s uTs = 3;
    J3s cTs = 4;
  }
  int32 SourceType = 1;
}

message NpcPb {
  int32 SplineEntityId = 2;
  int32 SpawnEntityId = 3;
}

// MessageId: 25879 (Notify)
message nes1 {
  int32 Id = 15;
  int32 mTs = 9;
}

// MessageId: 23336 (Push)
message TestSpawnTemplateEntityPush {
  int64 Id = 5;
  int32 ConfigId = 13;
  Vector Pos = 11;
  Rotator Rot = 2;
  int32 Level = 6;
  int32 mKn = 3;
}

enum LivingStatus {
  LivingStatus_Alive = 0;
  LivingStatus_Dead = 1;
  LivingStatus_Init = 2;
}

enum EntityState {
  EntityState_Default = 0;
  EntityState_Sleep = 1;
  EntityState_Born = 2;
  EntityState_Other = 3;
}

// MessageId: 26813 (Notify)
message EntranceStateNotify {
  int64 Id = 13;
  int32 State = 7;
}

// MessageId: 20646 (Request)
message EntityBuffProducerRequest {
  int64 BuffConsumerId = 10;
}

// MessageId: 27316 (Response)
message EntityBuffProducerResponse {
  ErrorCode ErrorCode = 12;
}

enum BuffOperateType {
  BuffOperateType_AddBuff = 0;
  BuffOperateType_RemoveBuff = 1;
  BuffOperateType_UndoBuff = 2;
}

// MessageId: 28532 (Request)
message EntityBuffProducerOperateRequest {
  int32 OpType = 11;
  int64 OpEntityId = 1;
}

// MessageId: 26062 (Response)
message EntityBuffProducerOperateResponse {
  ErrorCode ErrorCode = 13;
  int32 OpType = 14;
  int64 OpEntityId = 8;
}

// MessageId: 24337 (Request)
message LogicStateInitRequest {
  CombatCommon CombatCommon = 5;
  int64 EntityId = 7;
  LogicStateComponentPb InitData = 10;
  int64 ih11 = 1;
}

// MessageId: 27260 (Push)
message LogicStateInitPush {
  CombatCommon CombatCommon = 13;
  int64 EntityId = 3;
  LogicStateComponentPb InitData = 8;
  int64 ih11 = 1;
}

// MessageId: 22632 (Response)
message LogicStateInitResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 16750 (Notify)
message LogicStateInitNotify {
  CombatCommon CombatCommon = 9;
  int64 EntityId = 3;
  LogicStateComponentPb InitData = 7;
}

// MessageId: 16331 (Request)
message SwitchLogicStateRequest {
  LogicStateComponentPb States = 12;
  int64 ih11 = 7;
}

// MessageId: 19901 (Push)
message SwitchLogicStatePush {
  LogicStateComponentPb States = 13;
  int64 ih11 = 6;
}

// MessageId: 25347 (Response)
message SwitchLogicStateResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 25458 (Notify)
message SwitchLogicStateNotify {
  LogicStateComponentPb States = 4;
}

// MessageId: 24312 (Request)
message EntityActiveRequest {
  int64 EntityId = 10;
}

// MessageId: 18860 (Response)
message EntityActiveResponse {
  ErrorCode ErrorCode = 12;
  repeated EntityComponentPb ComponentPbs = 5;
  bool IsVisible = 13;
  Vector Pos = 1;
  Rotator Rot = 9;
}

// MessageId: 19293 (Request)
message AnimationGameplayTagRequest {
  int32 AddTagIds = 2;
  bool RemoveTagIds = 5;
}

// MessageId: 22438 (Push)
message AnimationGameplayTagPush {
  int32 AddTagIds = 14;
  bool RemoveTagIds = 13;
}

// MessageId: 27436 (Response)
message AnimationGameplayTagResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 21549 (Notify)
message AnimationGameplayTagNotify {
  int32 AddTagIds = 3;
  bool RemoveTagIds = 4;
}

// MessageId: 17340 (Request)
message AnimalDieRequest {
  int64 EntityId = 15;
  Vector Pos = 2;
}

// MessageId: 15843 (Response)
message AnimalDieResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 18169 (Notify)
message AnimalDieNotify {
  int64 EntityId = 9;
  int32 PlayerId = 8;
}

// MessageId: 27979 (Request)
message AnimalDestroyRequest {
  int64 EntityId = 15;
}

// MessageId: 26378 (Response)
message AnimalDestroyResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 17397 (Request)
message AnimalDropRequest {
  int64 EntityId = 10;
}

// MessageId: 26993 (Response)
message AnimalDropResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 18112 (Notify)
message EntityStateReadyNotify {
  int64 EntityId = 5;
  int32 TagId = 3;
  bool Ready = 1;
}

// MessageId: 16721 (Request)
message EntityInteractRequest {
  int64 EntityId = 1;
  int32 OptionIndex = 8;
  int64 VisionEntityId = 6;
}

// MessageId: 15986 (Response)
message EntityInteractResponse {
  ErrorCode ErrorCode = 14;
  bool Interacting = 3;
}

// MessageId: 21337 (Request)
message EntityRandomInteractRequest {
  int64 EntityId = 9;
  int32 OptionIndex = 10;
}

// MessageId: 22231 (Response)
message EntityRandomInteractResponse {
  ErrorCode ErrorCode = 4;
  bool Interacting = 5;
}

// MessageId: 26385 (Request)
message EntityDynamicInteractRequest {
  int64 EntityId = 3;
  string OptionGuid = 14;
}

// MessageId: 20323 (Response)
message EntityDynamicInteractResponse {
  ErrorCode ErrorCode = 13;
  bool Interacting = 7;
}

// MessageId: 25233 (Notify)
message EntityAddDynamicInteractNotify {
  int64 EntityId = 10;
  string OptionGuid = 1;
  GameCtxPb GameCtx = 4;
  string Text = 2;
  bool XCa = 7;
}

// MessageId: 19472 (Notify)
message EntityChangeDynamicInteractTextNotify {
  int64 EntityId = 12;
  string OptionGuid = 7;
  string Text = 10;
}

// MessageId: 25760 (Notify)
message EntityRemoveDynamicInteractNotify {
  int64 EntityId = 13;
  string OptionGuid = 3;
}

// MessageId: 22849 (Notify)
message EntityInteractingNotify {
  int64 EntityId = 7;
  bool IsInteracting = 2;
}

// MessageId: 15666 (Notify)
message EntityAddBubbleNotify {
  int64 EntityId = 14;
  string ActionGuid = 4;
}

// MessageId: 19190 (Notify)
message EntityRemoveBubbleNotify {
  int64 EntityId = 6;
  string ActionGuid = 13;
}

// MessageId: 26554 (Notify)
message EntityNameChangedNotify {
  int64 EntityId = 15;
  string ConditionalName = 9;
  string ConditionFunctionPath = 2;
  string ConditionSecondName = 10;
}

// MessageId: 25734 (Request)
message EntityPosAbnormalRequest {
  int64 EntityId = 9;
  bool IsAbnormal = 8;
}

// MessageId: 20415 (Response)
message EntityPosAbnormalResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 18350 (Request)
message EntityAdsorbRequest {
  int32 EntityId = 3;
}

// MessageId: 16845 (Response)
message EntityAdsorbResponse {
  ErrorCode ErrorCode = 12;
}

enum Fn_3 {
  Fn__SceneAdsorb = 0;
  Fn__PlayerAdsorb = 1;
}

// MessageId: 22017 (Request)
message QXl {
  int32 Type = 12;
  int32 IsMulti = 11;
  int32 SkillId = 14;
  int64 oL = 3;
  repeated int64 nL = 15;
}

// MessageId: 24614 (Response)
message KXl {
  ErrorCode ErrorCode = 9;
}

// MessageId: 26095 (Request)
message BoneVisibleChangeRequest {
  BoneVisibleData BoneVisibleData = 12;
}

// MessageId: 15399 (Push)
message BoneVisibleChangePush {
  BoneVisibleData BoneVisibleData = 7;
}

// MessageId: 20417 (Response)
message BoneVisibleChangeResponse {
  ErrorCode ErrorCode = 5;
}

// MessageId: 29595 (Notify)
message BoneVisibleChangeNotify {
  BoneVisibleData BoneVisibleData = 14;
}

message EquipComponentPb {
  int32 WeaponId = 1;
  int32 WeaponBreachLevel = 2;
}

message WeaponSkinComponentPb {
  int32 WeaponSkinId = 1;
}

message CharacterAttachComponentPb {
  repeated CharacterAttachInfo PbCombinePartInfoList = 1;
  int64 PbCombineTargetServerId = 2;
}

// MessageId: 17281 (Notify)
message EntityEquipChangeNotify {
  int64 EntityId = 14;
  EquipComponentPb EquipComponent = 13;
}

// MessageId: 29114 (Notify)
message EntityEquipSkinChangeNotify {
  int64 EntityId = 12;
  WeaponSkinComponentPb WeaponSkinComponentPb = 13;
}

// MessageId: 17801 (Request)
message EntityStaticHookMoveRequest {
  oneof Target {
    int64 PbCombineTargetServerId = 11;
    Vector CIl = 5;
  }
  int64 EntityId = 8;
}

// MessageId: 19473 (Push)
message EntityStaticHookMovePush {
  oneof Target {
    int64 PbCombineTargetServerId = 3;
    Vector CIl = 10;
  }
  int64 EntityId = 8;
}

// MessageId: 26505 (Response)
message EntityStaticHookMoveResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 22513 (Notify)
message EntityStaticHookMoveNotify {
  oneof Target {
    int64 PbCombineTargetServerId = 7;
    Vector CIl = 12;
  }
  int64 EntityId = 5;
}

// MessageId: 27082 (Notify)
message SilenceNpcNotify {
}

enum ELogicStateType {
  ELogicStateType_CharPositionState = 0;
  ELogicStateType_CharMoveState = 1;
  ELogicStateType_CharDirectionState = 2;
  ELogicStateType_CharPositionSubState = 3;
}

enum ECharPositionState {
  ECharPositionState_Ground = 0;
  ECharPositionState_Climb = 1;
  ECharPositionState_Air = 2;
  ECharPositionState_Water = 3;
  ECharPositionState_Ski = 4;
  ECharPositionState_Ride = 5;
}

enum ECharPositionSubState {
  ECharPositionSubState_None = 0;
  ECharPositionSubState_WaterSurface = 1;
}

enum ECharMoveState {
  ECharMoveState_MoveStateOther = 0;
  ECharMoveState_MoveStateStand = 1;
  ECharMoveState_MoveStateWalk = 2;
  ECharMoveState_MoveStateWalkStop = 3;
  ECharMoveState_MoveStateRun = 4;
  ECharMoveState_MoveStateRunStop = 5;
  ECharMoveState_MoveStateSprint = 6;
  ECharMoveState_MoveStateSprintStop = 7;
  ECharMoveState_MoveStateDodge = 8;
  ECharMoveState_MoveStateLandRoll = 9;
  ECharMoveState_MoveStateKnockDown = 10;
  ECharMoveState_MoveStateParry = 11;
  ECharMoveState_MoveStateSoftKnock = 12;
  ECharMoveState_MoveStateHeavyKnock = 13;
  ECharMoveState_MoveStateNormalClimb = 14;
  ECharMoveState_MoveStateFastClimb = 15;
  ECharMoveState_MoveStateGlide = 16;
  ECharMoveState_MoveStateKnockUp = 17;
  ECharMoveState_MoveStateFastSwim = 18;
  ECharMoveState_MoveStateNormalSwim = 19;
  ECharMoveState_MoveStateSwing = 20;
  ECharMoveState_MoveStateCaptured = 21;
  ECharMoveState_MoveStateSlide = 22;
  ECharMoveState_MoveStateFlying = 23;
  ECharMoveState_MoveStateEnterClimb = 24;
  ECharMoveState_MoveStateExitClimb = 25;
  ECharMoveState_MoveStateNormalSki = 26;
  ECharMoveState_MoveStateStandUp = 27;
  ECharMoveState_MoveStateSoar = 28;
  ECharMoveState_MoveRoll = 29;
  ECharMoveState_MoveKite = 30;
  ECharMoveState_MoveGongduola = 31;
  ECharMoveState_MoveVehicle = 32;
}

// MessageId: 17943 (Request)
message EntityPatrolStartRequest {
  int64 EntityId = 10;
  bool Dir = 11;
}

// MessageId: 24421 (Response)
message EntityPatrolStartResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 22325 (Request)
message EntityPatrolStopRequest {
  int64 EntityId = 10;
}

// MessageId: 24877 (Response)
message EntityPatrolStopResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 21855 (Request)
message EntityPatrolChangeDirRequest {
  int64 EntityId = 13;
  bool Dir = 1;
}

// MessageId: 16304 (Response)
message EntityPatrolChangeDirResponse {
  ErrorCode ErrorCode = 5;
}

message PatrolComponentPb {
  bool Dir = 1;
}

// MessageId: 21831 (Request)
message VfxNpcPatrolFinishRequest {
  int64 EntityId = 2;
}

// MessageId: 15464 (Response)
message VfxNpcPatrolFinishResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 21580 (Request)
message EntitySendEventRequest {
  int64 EntityId = 15;
  string EventKey = 11;
}

// MessageId: 20410 (Response)
message EntitySendEventResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 27527 (Request)
message EntityBeamReceiveRequest {
  int64 EntityId = 6;
  BeamReceiveActionType ReceiveType = 10;
}

// MessageId: 23316 (Response)
message EntityBeamReceiveResponse {
  ErrorCode ErrorCode = 6;
  int64 EntityId = 9;
  BeamReceiveActionType ReceiveType = 5;
}

// MessageId: 25831 (Request)
message GenerateNPCRequest {
  int64 EntityId = 15;
  int32 PbDataId = 2;
  bool InRange = 12;
}

// MessageId: 27356 (Response)
message GenerateNPCResponse {
  ErrorCode ErrorCode = 10;
}

enum AttachTarget {
  AttachTarget_AttachTargetNone = 0;
  AttachTarget_AttachTargetEntity = 1;
  AttachTarget_AttachTargetActorPath = 2;
}

message AttachEntity {
  int32 TargetPbDataId = 1;
  string ActorRefKey = 2;
}

// MessageId: 16843 (Request)
message EntityAttachRequest {
  oneof Target {
    AttachEntity AttachEntity = 8;
    string PbDynAttachRefActorKey = 14;
  }
  int64 EntityId = 11;
  Vector Pos = 13;
  Rotator Rot = 1;
  AttachTarget AttachTarget = 7;
}

// MessageId: 24879 (Response)
message EntityAttachResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 22955 (Notify)
message EntityAttachChangeNotify {
  oneof Target {
    AttachEntity AttachEntity = 7;
    string PbDynAttachRefActorKey = 15;
  }
  int64 EntityId = 13;
  Vector Pos = 1;
  Rotator Rot = 2;
  AttachTarget AttachTarget = 5;
}

// MessageId: 25604 (Request)
message MonsterStandByTagsRequest {
  int64 EntityId = 8;
  int32 SplineId = 2;
  int32 Index = 10;
  int32 TagId = 15;
}

// MessageId: 23757 (Response)
message MonsterStandByTagsResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 19185 (Notify)
message EntityUpdateVarNotify {
  int64 EntityId = 13;
  string VarName = 11;
  VarDefinePb VarDefine = 10;
}

// MessageId: 16856 (Request)
message EntityPositionRequest {
  int32 ConfigId = 14;
  int32 DungeonInstanceId = 10;
}

// MessageId: 15270 (Response)
message EntityPositionResponse {
  ErrorCode ErrorCode = 6;
  Vector Pos = 11;
}

message ShieldInfoPb {
  int32 Handle = 1;
  int32 ConfigId = 2;
  int32 ShieldValue = 3;
  int32 Priority = 4;
  int32 BuffHandle = 5;
  bool IsValid = 6;
}

message ShieldComponentPb {
  repeated ShieldInfoPb ShieldInfoPbList = 1;
  int32 ShieldValueTotal = 2;
}

message NPCPerformGroupComponentPb {
  string Type = 1;
  string State = 2;
}

// MessageId: 29146 (Notify)
message SetPerformStateNotify {
  int64 EntityId = 6;
  string Type = 4;
  string State = 13;
}

message Ri_1 {
  repeated int64 Xi_ = 1;
}

// MessageId: 16984 (Notify)
message AttributeTagsChangedNotify {
  int64 EntityId = 11;
  int32 AttributeId = 2;
  bool RemoveTagIds = 6;
}

message AttributesIdsComponentPb {
  repeated int32 PbSceneItemAttributeIds = 1;
}

// MessageId: 22415 (Request)
message VehicleManipulateRequest {
  oneof BH {
    int32 EI_1 = 12;
  }
  int64 EntityId = 7;
  int32 TeleportDungeonActionHostIdHandle = 10;
  bool IsEntering = 1;
  int32 Seat = 14;
}

// MessageId: 21804 (Response)
message VehicleManipulateResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 26122 (Notify)
message VehicleUpdateEntityNotify {
  int64 EntityId = 5;
  int64 VehicleCreatureId = 13;
  int32 Seat = 15;
  bool IsEntering = 1;
  int32 Zi_ = 4;
}

enum Nn_1 {
  Nn__ExitVehicleTypeLaunch = 0;
  Nn__ExitVehicleTypeNormal = 1;
  Nn__ExitVehicleTypeDelayShow = 2;
}

// MessageId: 18357 (Notify)
message VehicleUpdateNotify {
  int32 PlayerId = 7;
  int64 EntityId = 4;
  int32 Seat = 9;
  int32 Zi_ = 15;
}

message VehiclePlayerData {
  int64 EntityId = 1;
  int32 Seat = 2;
}

// MessageId: 28100 (Request)
message ChangeVehicleRideSharingRequest {
  int32 RoleId = 14;
  int32 Seat = 9;
}

// MessageId: 16496 (Response)
message ChangeVehicleRideSharingResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 28300 (Request)
message RemoveRideSharingPassengerRequest {
  int32 RoleId = 1;
}

// MessageId: 18305 (Response)
message RemoveRideSharingPassengerResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 24378 (Notify)
message UpdateVehicleRideSharingNotify {
  int32 PlayerId = 15;
  int32 RoleId = 11;
  int32 Seat = 4;
  int64 EntityId = 1;
}

// MessageId: 28550 (Request)
message DOLLARJl {
  int64 EntityId = 7;
  int32 IQl = 6;
  int32 TQl = 3;
  Vector Pos = 8;
}

// MessageId: 18892 (Response)
message WJl2 {
  ErrorCode ErrorCode = 11;
}

// MessageId: 29858 (Notify)
message QJl1 {
  int64 EntityId = 9;
  int32 IQl = 13;
  int32 TQl = 12;
  Vector Pos = 7;
}

message PatrolInfoComponentPb {
  bool SceneAiEnabled = 1;
  PatrolInfoPb PatrolInfo = 2;
}

message PatrolInfoPb {
  oneof Data {
    SmartObjectComponent SmartObjectComponent = 1;
  }
}

message SmartObjectComponent {
  int32 LastPassIndex = 1;
}

// MessageId: 21351 (Notify)
message Dzl1 {
  int64 EntityId = 8;
  PatrolInfoPb AiInfo = 1;
}

// MessageId: 22667 (Notify)
message Bzl1 {
  int64 EntityId = 8;
}

// MessageId: 23044 (Notify)
message qzl1 {
  int64 EntityId = 1;
  int32 LastPassIndex = 12;
}

message AnimalPerformComponentPb {
  repeated int32 AnimalInitialPartIds = 1;
}

enum jn_2 {
  jn__SlotCollected = 0;
  jn__SlotRefreshed = 1;
}

// MessageId: 22956 (Notify)
message eJl {
  int32 rr_1 = 5;
  int64 EntityId = 1;
  int32 PartIndex = 12;
}

message NpcDriveVehicleComponentPb {
  int64 VehicleCreatureId = 1;
  int32 Seat = 2;
}

// MessageId: 27785 (Request)
message tJl {
  int32 TeleportDungeonActionHostIdHandle = 14;
  int64 EntityId = 1;
  string Key = 5;
}

// MessageId: 26817 (Response)
message iJl {
  ErrorCode ErrorCode = 4;
}

// MessageId: 16669 (Request)
message EntityCameraAlertStateChangeRequest {
  int64 EntityId = 12;
  bool j2l = 9;
}

// MessageId: 19038 (Response)
message EntityCameraAlertStateChangeResponse {
  ErrorCode ErrorCode = 11;
  int64 EntityId = 6;
  bool j2l = 2;
}

// MessageId: 15132 (Request)
message tZl1 {
  int32 TeleportDungeonActionHostIdHandle = 1;
  int64 EntityId = 15;
  int32 Points = 5;
}

// MessageId: 26153 (Response)
message iZl3 {
  ErrorCode ErrorCode = 12;
}

message GrapplingHookPointComponentPb {
  bool HookLockPointDisabled = 1;
}

// MessageId: 17470 (Request)
message osc {
  int32 lT_1 = 15;
  int32 g5n = 10;
  string Dt12 = 11;
}

// MessageId: 21705 (Response)
message ssc2 {
  ErrorCode ErrorCode = 3;
}

// MessageId: 16424 (Notify)
message asc {
  int64 EntityId = 14;
  Vector Pos = 7;
  Rotator Rot = 13;
  bool Avl = 1;
  Vector ZE_ = 9;
}

message ERc {
  oneof DRc {
    kRc TRc = 11;
  }
  int32 dTs = 1;
  IRc IRc = 2;
}

message IRc {
  oneof ORc {
    int32 bRc1 = 1;
  }
  oneof qRc {
    int32 LRc = 2;
  }
  oneof GRc {
    bool wRc = 3;
  }
  oneof FRc {
    int32 RRc = 4;
  }
  oneof NRc {
    bool ARc = 5;
  }
}

enum PRc1 {
  PRc_MoveStatusStop = 0;
  PRc_MoveStatusMoving = 1;
  PRc_MoveStatusInterrupt = 2;
}

// MessageId: 16420 (Notify)
message yRc {
  oneof DRc {
    kRc TRc = 3;
  }
  int64 F4n = 5;
  int32 dTs = 2;
  IRc IRc = 6;
  int32 PRc1 = 8;
}

// MessageId: 29751 (Request)
message SRc {
  int64 F4n = 5;
  int32 dTs = 12;
  bool xRc = 2;
}

// MessageId: 18595 (Response)
message MRc {
  ErrorCode ErrorCode = 9;
}

// MessageId: 27646 (Request)
message CRc {
  oneof VRc {
    IRc IRc = 7;
  }
  int64 F4n = 5;
  int32 dTs = 6;
  int32 PRc1 = 12;
  kRc DRc = 14;
}

// MessageId: 15865 (Response)
message pRc2 {
  ErrorCode ErrorCode = 6;
}

message kRc {
  float URc1 = 1;
  Vector BRc2 = 2;
}

message VisionSkillInformation {
  int32 SkillId = 1;
  int32 Level = 2;
  repeated int32 StoneIds = 3;
  int32 Quality = 4;
}

// MessageId: 23450 (Notify)
message VisionSkillChangeNotify {
  int64 EntityId = 8;
  repeated VisionSkillInformation VisionSkillInfos = 2;
  int64 VisionEntityId = 12;
}

message PartComponentPb {
  repeated PartInformation PartLifeInfos = 1;
}

// MessageId: 19432 (Request)
message PartComponentInitRequest {
  int64 EntityId = 9;
  PartComponentPb PartComponent = 1;
}

// MessageId: 17717 (Response)
message PartComponentInitResponse {
}

// MessageId: 18394 (Notify)
message PartComponentInitNotify {
  int64 EntityId = 9;
  PartComponentPb PartComponent = 5;
}

message PartInformation {
  int32 PartIndex = 1;
  float eWn = 2;
  float LifeMax = 3;
  bool Activated = 4;
  int32 PartTag = 5;
}

message PartUpdateInfo {
  int32 PartIndex = 1;
  bool Activated = 2;
  bool Reset = 3;
}

// MessageId: 28183 (Request)
message PartUpdateRequest {
  int64 EntityId = 9;
  repeated PartUpdateInfo PartUpdateInfos = 3;
}

// MessageId: 22957 (Push)
message PartUpdatePush {
  int64 EntityId = 9;
  repeated PartUpdateInfo PartUpdateInfos = 5;
}

// MessageId: 15819 (Response)
message PartUpdateResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 23664 (Notify)
message PartUpdateNotify {
  int64 EntityId = 11;
  repeated PartInformation PartInfos = 8;
}

enum ApplyGEType {
  ApplyGEType_Common = 0;
  ApplyGEType_UseExtraTime = 1;
}

// MessageId: 21119 (Request)
message ApplyGameplayEffectRequest {
  oneof Time {
    float Duration = 12;
  }
  int32 Handle = 1;
  int64 Id = 7;
  int32 Level = 9;
  int64 InstigatorId = 8;
  int32 ApplyType = 2;
  int32 ServerId = 14;
  int32 StackCount = 3;
  bool IsActive = 5;
}

// MessageId: 18338 (Push)
message ApplyGameplayEffectPush {
  oneof Time {
    float Duration = 4;
  }
  int32 Handle = 10;
  int64 Id = 7;
  int32 Level = 3;
  int64 InstigatorId = 12;
  int32 ApplyType = 5;
  int32 ServerId = 6;
  int32 StackCount = 8;
  bool IsActive = 1;
}

// MessageId: 19159 (Response)
message ApplyGameplayEffectResponse {
  ErrorCode ErrorCode = 7;
}

// MessageId: 17967 (Notify)
message ApplyGameplayEffectNotify {
  oneof Cfs1 {
    float Duration = 5;
  }
  oneof Time {
    float LeftDuration = 15;
  }
  int32 Handle = 10;
  int64 Id = 7;
  int32 Level = 6;
  int64 EntityId = 4;
  int64 InstigatorId = 8;
  int32 ApplyType = 2;
  bool IsActive = 13;
  int32 ServerId = 1;
  int32 StackCount = 12;
}

// MessageId: 24137 (Request)
message RemoveGameplayEffectRequest {
  int32 Handle = 10;
  int64 EntityId = 4;
  bool IsPrematureRemoval = 1;
}

// MessageId: 20235 (Push)
message RemoveGameplayEffectPush {
  int32 Handle = 10;
  int64 EntityId = 4;
  bool IsPrematureRemoval = 6;
}

// MessageId: 25227 (Response)
message RemoveGameplayEffectResponse {
  ErrorCode ErrorCode = 5;
  int32 Handle = 15;
}

// MessageId: 19080 (Notify)
message RemoveGameplayEffectNotify {
  int32 Handle = 2;
  int64 EntityId = 10;
}

// MessageId: 28780 (Request)
message OrderApplyBuffRequest {
  oneof Time {
    float Duration = 4;
  }
  int64 Id = 7;
  int32 Level = 9;
  int64 InstigatorId = 6;
  int32 ApplyType = 5;
  int32 ServerId = 15;
  int32 StackCount = 13;
  bool IsIterable = 8;
  YT1 YT1 = 11;
}

// MessageId: 16829 (Response)
message OrderApplyBuffResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 19961 (Request)
message OrderRemoveBuffRequest {
  int64 Id = 10;
  int32 StackCount = 15;
}

// MessageId: 23003 (Response)
message OrderRemoveBuffResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 20162 (Notify)
message OrderApplyBuffNotify {
  oneof Time {
    float Duration = 13;
  }
  int64 Id = 8;
  int32 Level = 10;
  int64 InstigatorId = 4;
  int32 ApplyType = 2;
  int32 ServerId = 1;
  int32 StackCount = 11;
  bool IsIterable = 6;
}

// MessageId: 24692 (Notify)
message OrderRemoveBuffNotify {
  int64 Id = 9;
  int32 StackCount = 14;
}

// MessageId: 19181 (Notify)
message ApplyBuffS2cRequestNotify {
  oneof Time {
    float Duration = 10;
  }
  int64 Id = 5;
  int32 Level = 6;
  int64 InstigatorId = 7;
  int32 ApplyType = 1;
  int32 ServerId = 4;
  int32 StackCount = 9;
  bool IsIterable = 14;
  int32 Reason = 15;
}

// MessageId: 17119 (Push)
message ApplyBuffS2cResponsePush {
  ErrorCode ErrorCode = 6;
  int32 Handle = 4;
  bool IsActive = 1;
}

// MessageId: 24953 (Notify)
message RemoveBuffS2cRequestNotify {
  int32 Handle = 12;
  int32 StackCount = 9;
  int32 Reason = 4;
}

// MessageId: 25518 (Push)
message RemoveBuffS2cResponsePush {
  ErrorCode ErrorCode = 12;
}

// MessageId: 18310 (Notify)
message RemoveBuffByIdS2cRequestNotify {
  int64 BuffId = 11;
  int32 StackCount = 15;
  int32 Reason = 14;
}

// MessageId: 20114 (Push)
message RemoveBuffByIdS2cResponsePush {
  ErrorCode ErrorCode = 12;
}

// MessageId: 23726 (Notify)
message BroadcastAddBuffFailedNotify {
  int64 BuffId = 8;
  int32 StackCount = 15;
  int64 InstigatorId = 1;
  YT1 YT1 = 3;
}

// MessageId: 27205 (Request)
message ActivateBuffRequest {
  int32 Handle = 8;
  bool On = 15;
}

// MessageId: 15323 (Push)
message ActiveBuffPush {
  int32 Handle = 1;
  bool On = 6;
}

// MessageId: 19682 (Response)
message ActivateBuffResponse {
  ErrorCode ErrorCode = 6;
}

// MessageId: 19543 (Notify)
message ActivateBuffNotify {
  int32 Handle = 5;
  bool On = 2;
}

// MessageId: 16586 (Request)
message OrderRemoveBuffByTagsRequest {
  repeated int32 TagIds = 7;
}

// MessageId: 21393 (Response)
message OrderRemoveBuffByTagsResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 25927 (Notify)
message OrderRemoveBuffByTagsNotify {
  repeated int32 TagIds = 3;
}

message AttributeEventEffectData {
  repeated int32 TriggeredActiveHandles = 1;
}

message FightBuffEffectContext {
  oneof dFs1 {
    float LeftCooldown = 1;
  }
  oneof Effect {
    AttributeEventEffectData AttributeEventEffectData = 6;
  }
  
}

// MessageId: 22749 (Request)
message BuffEffectExecuteRequest {
  int32 Index = 13;
  FightBuffEffectContext Context = 3;
}

// MessageId: 25901 (Response)
message BuffEffectExecuteResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 24691 (Request)
message BuffStackCountRequest {
  int32 HandleId = 6;
  int32 NewStackCount = 10;
  bool IsPrematureRemoval = 2;
  int64 InstigatorId = 9;
}

// MessageId: 20343 (Push)
message BuffStackCountPush {
  int32 HandleId = 13;
  int32 NewStackCount = 7;
  bool IsPrematureRemoval = 9;
  int64 InstigatorId = 1;
}

// MessageId: 20373 (Response)
message BuffStackCountResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 15682 (Notify)
message BuffStackCountNotify {
  oneof cFs2 {
    float Duration = 10;
  }
  oneof gFs {
    float LeftDuration = 5;
  }
  int32 HandleId = 1;
  int32 NewStackCount = 8;
  int64 InstigatorId = 4;
}

message BuffEffectCd {
  int64 BuffId = 1;
  repeated int32 ListCdRemaining = 2;
}

// MessageId: 23408 (Request)
message BuffEffectRequest {
  int32 HandleId = 4;
  int32 Index = 6;
}

// MessageId: 25486 (Push)
message BuffEffectPush {
  int32 HandleId = 7;
  int32 Index = 12;
}

// MessageId: 21805 (Response)
message BuffEffectResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 27025 (Notify)
message W7l {
  oneof cFs2 {
    float Duration = 3;
  }
  oneof gFs {
    float LeftDuration = 13;
  }
  int32 HandleId = 8;
}

// MessageId: 29203 (Request)
message ChangeStateRequest {
  int32 FsmId = 10;
  int32 FromState = 15;
  int32 ToState = 13;
}

// MessageId: 19104 (Response)
message ChangeStateResponse {
  int32 FsmId = 10;
  DErrorResult Error = 9;
  int32 OTs = 7;
}

// MessageId: 26176 (Notify)
message ChangeStateNotify {
  int32 FsmId = 7;
  int32 FromState = 10;
  int32 ToState = 9;
}

// MessageId: 21318 (Request)
message ChangeStateConfirmRequest {
  int32 FsmId = 12;
  int32 State = 2;
}

// MessageId: 16532 (Push)
message ChangeStateConfirmPush {
  int32 FsmId = 7;
  int32 State = 9;
}

// MessageId: 22072 (Response)
message ChangeStateConfirmResponse {
  int32 FsmId = 8;
  int32 State = 9;
  DErrorResult Error = 14;
}

// MessageId: 28321 (Notify)
message ChangeStateConfirmNotify {
  int32 FsmId = 9;
  int32 State = 14;
}

message DFsm {
  int32 FsmId = 1;
  int32 CurrentState = 2;
  int32 Flag = 3;
  int32 kTs = 6;
}

message EntityFsmComponentPb {
  repeated DFsm Fsms = 1;
  int32 HashCode = 2;
  int32 CommonHashCode = 3;
  repeated DFsmBlackBoard BlackBoard = 4;
  FsmCustomBlackboardDatas FsmCustomBlackboardDatas = 5;
}

enum EFsmStateFlag {
  EFsmStateFlag_Changed = 0;
  EFsmStateFlag_Confirmed = 1;
}

// MessageId: 26741 (Request)
message FsmConditionPassRequest {
  int32 FsmId = 5;
  int32 FromState = 7;
  int32 ToState = 13;
  int32 ConditionIndex = 11;
  bool Value = 15;
}

// MessageId: 29448 (Response)
message FsmConditionPassResponse {
  int32 FsmId = 4;
  DErrorResult Error = 2;
}

// MessageId: 20128 (Notify)
message FsmResetNotify {
  EntityFsmComponentPb EntityFsmComponentPb = 2;
}

// MessageId: 15366 (Notify)
message FsmBlackboardNotify {
  repeated DFsmBlackBoard FsmBlackBoards = 3;
}

message FsmCustomBlackboardDatas {
  repeated DFsmBlackboardCustom BlackboardIntValues = 1;
}

// MessageId: 25156 (Notify)
message FsmCustomBlackboardNotify {
  FsmCustomBlackboardDatas FsmCustomBlackboardDatas = 12;
}

message DFsmBlackBoard {
  int32 Key = 1;
  int32 Value = 2;
}

message DFsmBlackboardCustom {
  string Key = 1;
  int32 Value = 2;
}

// MessageId: 25124 (Request)
message GmEntityFsmGroupInfoRequest {
  int64 EntityId = 6;
}

// MessageId: 20325 (Response)
message GmEntityFsmGroupInfoResponse {
  int64 EntityId = 12;
  repeated GmEntityFsmMachineInfo GmEntityFsmMachineInfos = 13;
}

message GmEntityFsmMachineInfo {
  int32 StateIndex = 1;
  repeated GmEntityFsmStateInfo GmEntityFsmStateInfos = 2;
}

message GmEntityFsmStateInfo {
  int32 StateIndex = 1;
  repeated GmEntityFsmTransitionInfo GmEntityFsmTransitionInfos = 2;
}

message GmEntityFsmTransitionInfo {
  int32 ToStateIndex = 1;
  repeated bool GmEntityFsmConditions = 2;
}

enum IFs {
  IFs_BT_Enter = 0;
  IFs_BT_Exit = 1;
  IFs_BT_BindStart = 2;
  IFs_BT_BindEnd = 3;
  IFs_BT_Task = 4;
}

// MessageId: 15048 (Request)
message FsmStateBehaviorRequest {
  int32 FsmId = 4;
  int32 State = 9;
  int32 Index = 8;
  int32 Type = 13;
}

// MessageId: 15930 (Response)
message FsmStateBehaviorResponse {
  int32 FsmId = 11;
  int32 State = 14;
  ErrorCode ErrorCode = 1;
}

// MessageId: 27700 (Request)
message PlayMontageTaskAndRequest {
  string MontageName = 14;
  int32 MontagePathHash = 15;
  float SpeedRatio = 11;
  string StartSection = 13;
  float StartTimeSeconds = 8;
}

// MessageId: 16404 (Push)
message PlayMontageTaskAndPush {
  string MontageName = 6;
  int32 MontagePathHash = 4;
  float SpeedRatio = 13;
  string StartSection = 12;
  float StartTimeSeconds = 11;
}

// MessageId: 28949 (Response)
message PlayMontageTaskAndResponse {
  ErrorCode ErrorCode = 5;
}

message BoardGridDynamicConfig {
  sint32 RowIndex = 1;
  sint32 ColumnIndex = 2;
  sint64 Flags = 3;
}

message PlacementItemPb {
  int32 LocatedBoardEntityConfigId = 1;
}

message BoardGridPositionInfo {
  int32 Row = 1;
  int32 Column = 2;
  int32 RotAngle = 3;
}

message OccupiedBoardGridInfo {
  BoardGridPositionInfo Pos = 1;
  int32 OccupyingEntityConfigId = 2;
  int32 EntityConfigType = 3;
}

message PositionAndRotate {
  Vector Pos = 1;
  Rotator Rot = 2;
}

// MessageId: 29648 (Notify)
message RemovePlacementFromBoardNotify {
  int32 EntityConfigType = 15;
  OccupiedBoardGridInfo GridInfo = 12;
}

// MessageId: 19059 (Notify)
message AddPlacementNotify {
  OccupiedBoardGridInfo GridInfo = 10;
  int32 EntityConfigType = 14;
}

message PlacementInfoChangeInfo {
  PlacementItemPb PlacementItemPb = 1;
  int64 PlacementEntityId = 2;
}

// MessageId: 22780 (Notify)
message PlacementInfoChangeNotify {
  repeated PlacementInfoChangeInfo ChangedList = 15;
}

// MessageId: 16370 (Request)
message PlaceItemOnBoardRequest {
  oneof DFs2 {
    PositionAndRotate PosRot = 14;
  }
  int64 TargetBoardEntityId = 5;
  int64 PlacementEntityId = 6;
  int32 ToPlace = 7;
  BoardGridPositionInfo PosOnBoard = 9;
}

// MessageId: 26871 (Response)
message PlaceItemOnBoardResponse {
  ErrorCode ErrorCode = 11;
  int32 ToPlace = 14;
}

// MessageId: 23160 (Notify)
message PlaceItemOnBoardNotify {
  int64 TargetBoardEntityId = 7;
  int64 PlacementEntityId = 8;
  int32 ToPlace = 5;
  BoardGridPositionInfo PosOnBoard = 9;
}

// MessageId: 25051 (Request)
message CommitBoardRequest {
  int64 BoardEntityId = 11;
}

// MessageId: 24973 (Response)
message CommitBoardResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 25647 (Notify)
message CommitBoardSuccessNotify {
  int64 BoardEntityId = 3;
}

// MessageId: 28013 (Request)
message MovePlacementRequest {
  oneof DFs2 {
    PositionAndRotate PosRot = 14;
  }
  int64 TargetBoardEntityId = 5;
  int64 PlacementEntityId = 11;
  BoardGridPositionInfo PosOnBoard = 13;
}

// MessageId: 21758 (Response)
message MovePlacementResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 21906 (Notify)
message MovePlacementNotify {
  oneof DFs2 {
    PositionAndRotate PosRot = 15;
  }
  int64 TargetBoardEntityId = 14;
  int64 PlacementEntityId = 5;
  BoardGridPositionInfo PosOnBoard = 11;
}

// MessageId: 15904 (Notify)
message BoardGridDynamicConfigChangeNotify {
  int64 BoardEntityId = 8;
  repeated BoardGridDynamicConfig ChangedConfigs = 14;
}

// MessageId: 26663 (Notify)
message BoardCanMovePlacementNotify {
  int64 BoardEntityId = 5;
  bool Hi_2 = 1;
}

// MessageId: 16617 (Request)
message DOLLARKl {
  int64 EntityId = 14;
}

// MessageId: 25090 (Response)
message WKl {
  ErrorCode ErrorCode = 12;
}

message JigsawBaseComponentPb {
  int32 Round = 1;
  int32 EntityId = 2;
  int32 hr_2 = 3;
}

// MessageId: 22509 (Request)
message ResetTicTacToeGameRequest {
  int64 EntityId = 12;
}

// MessageId: 22891 (Response)
message ResetTicTacToeGameResponse {
  ErrorCode ErrorCode = 9;
}

enum ESummonType {
  ESummonType_ESummonTypeDefault = 0;
  ESummonType_ESummonTypeConcomitantVision = 1;
  ESummonType_ESummonTypeConcomitantCustom = 2;
  ESummonType_ESummonTypeConcomitantPhantomRole = 3;
}


message SummonerComponentPb {
  int64 SummonerId = 1;
  int32 SummonCfgId = 2;
  int32 SummonSkillId = 3;
  int32 PlayerId = 4;
  ESummonType Type = 5;
}


message SummonsComponentPb {
  int32 Version = 1;
}


enum FollowerType {
  FollowerType_EPlayerFollowerDefault = 0;
  FollowerType_EPlayerFollowerExploreSkill = 1;
  FollowerType_EPlayerFollowerAuxiliary = 2;
  FollowerType_EPlayerFollowerSpecialItem = 3;
  FollowerType_EPlayerFollowerMax = 4;
}


message FollowerList {
  int32 Type = 1;
  int64 EntityId = 2;
}


message FollowerComponentPb {
  repeated FollowerList FollowerList = 1;
}


message FollowShooterComponentPb {
  int64 PlayerEntityId = 1;
}


// MessageId: 27731 (Notify)
message FollowerUpdateNotify {
  int32 PlayerId = 2;
  repeated FollowerList FollowerList = 8;
}

message CharacterAttachInfo {
  int64 EntityId = 1;
  Vector Pos = 2;
  Rotator Rot = 3;
  int32 PartIndex = 4;
}

// MessageId: 18286 (Request)
message Wzl1 {
  int64 EntityId = 13;
  repeated On_2 Params = 11;
}

// MessageId: 29571 (Response)
message Qzl3 {
  ErrorCode ErrorCode = 6;
}

// MessageId: 18803 (Notify)
message Ozl1 {
  int64 EntityId = 5;
  repeated On_2 Params = 8;
  bool _r_1 = 12;
}

enum Hn_2 {
  Hn__SceneItemBBKey_ManipulatableState = 0;
}

enum DOLLARn_a {
  DOLLARna__SceneItemParamAuth_Server = 0;
  DOLLARna__SceneItemParamAuth_PosSender = 1;
}

message On_2 {
  oneof Value {
    int32 IntValue = 3;
    IntArrayBlackboard IntValues = 4;
    int64 LongValue = 5;
    LongArrayBlackboard LongValues = 6;
    bool BooleanValue = 7;
    string StringValue = 8;
    float FloatValue = 10;
    FloatArrayBlackboard FloatValues = 11;
    Vector VectorValue = 12;
    Rotator RotatorValue = 13;
  }
  int32 Key = 1;
}

enum Wn_1 {
  Wn__ManipulatableStateNone = 0;
  Wn__ManipulatableStateReset = 1;
  Wn__ManipulatableStateBeChanting = 2;
  Wn__ManipulatableStateBeDrawing = 3;
  Wn__ManipulatableStateBeHolding = 4;
  Wn__ManipulatableStateBePrecasting = 5;
  Wn__ManipulatableStateBeCastingToTarget = 6;
  Wn__ManipulatableStateBeCastingToOutlet = 7;
  Wn__ManipulatableStateBeCastingProjectile = 8;
  Wn__ManipulatableStateBeCastingFree = 9;
  Wn__ManipulatableStateMatchingOutlet = 10;
  Wn__ManipulatableStateBeDropping = 11;
  Wn__ManipulatableStateBeAdsorbed = 12;
}

message Mx_2 {
  repeated int64 EntityIds = 1;
}

message R8_ {
  int64 A8_ = 1;
}

// MessageId: 15720 (Notify)
message yx_1 {
  int64 Ex_2 = 6;
  int64 Ix_1 = 11;
}

// MessageId: 24145 (Notify)
message RemoveHackingEntityNotify {
  int64 Ex_2 = 10;
  int64 Ix_1 = 9;
}

// MessageId: 26361 (Notify)
message GravityUpdateNotify {
  int64 EntityId = 11;
  Vector LI_1 = 2;
  Vector GravityDirection = 10;
}

// MessageId: 24494 (Request)
message GravityFlipRequest {
  int64 EntityId = 4;
  DirectionType Direction = 7;
}

// MessageId: 26820 (Response)
message GravityFlipResponse {
  ErrorCode ErrorCode = 14;
  DirectionType Direction = 6;
}

message GravityFlipComponent {
  DirectionType Direction = 1;
}

enum DirectionType {
  DirectionType_GravityUp = 0;
  DirectionType_GravityDown = 1;
  DirectionType_GravityLeft = 2;
  DirectionType_GravityRight = 3;
}

// MessageId: 22237 (Notify)
message UpdateGravityDirectionNotify {
  int64 EntityId = 15;
  DirectionType Direction = 1;
}

// MessageId: 28701 (Notify)
message ga1 {
  Vector LI_ = 3;
  Vector wI_ = 14;
}

// MessageId: 22405 (Notify)
message TeleportUpdateNotify {
  repeated int32 Ids = 7;
}

// MessageId: 23756 (Request)
message TeleportDataRequest {
}

// MessageId: 25339 (Response)
message TeleportDataResponse {
  ErrorCode ErrorCode = 14;
  repeated int32 Ids = 8;
}

// MessageId: 27724 (Request)
message TeleportTransferRequest {
  int32 Id = 10;
}

// MessageId: 15644 (Response)
message TeleportTransferResponse {
  ErrorCode ErrorCode = 15;
  int32 IsTrace = 12;
  float PosX = 13;
  float PosY = 4;
  float PosZ = 11;
  float Pitch = 2;
  float Yaw = 10;
  float Roll = 1;
}

enum TeleportReason {
  TeleportReason_Transfer = 0;
  TeleportReason_ApiTeleport = 1;
  TeleportReason_BtRollbackFailed = 2;
  TeleportReason_ParkourTrans = 3;
  TeleportReason_Gm = 4;
  TeleportReason_Rouge = 5;
  TeleportReason_Fall = 6;
  TeleportReason_Ho_ = 7;
  TeleportReason_UnOpenedAreaPullback = 8;
  TeleportReason_TemporaryTransfer = 9;
  TeleportReason_Xvs = 10;
  TeleportReason_Drown = 11;
  TeleportReason_FlowStart = 12;
  TeleportReason_CorniceTrans = 13;
  TeleportReason_TeleportVehicle = 14;
  TeleportReason_GetOff = 15;
  TeleportReason_LeaveGravityRegion = 16;
  TeleportReason_TeleportToBoat = 17;
  TeleportReason_GravityFlip = 18;
  TeleportReason_RogueRes = 19;
}

// MessageId: 28722 (Notify)
message TeleportNotify {
  int32 IsTrace = 13;
  Vector Pos = 3;
  Rotator Rot = 12;
  Vector Gravity = 5;
  int32 Reason = 2;
  GameCtxPb GameCtx = 8;
  TransitionOptionPb TransitionOption = 6;
  bool DisableAutoFade = 9;
}

enum TransitionType {
  TransitionType_Empty = 0;
  TransitionType_PlayEffect = 1;
  TransitionType_PlayMp4 = 2;
  TransitionType_CenterText = 3;
  TransitionType_FadeInScreen = 4;
  TransitionType_Seamless = 5;
  TransitionType_WithCharacterDisplay = 6;
}

message TransitionOptionPb {
  oneof p4s2 {
    GDOLLAR_ qDOLLAR_ = 2;
    TransitionFlowPb TransitionFlow = 3;
    SeamlessTravelContext SeamlessTravelContext = 4;
    int32 FadeInScreenAsBlack = 5;
    Sa1 va1 = 6;
  }
  TransitionType TransitionType = 1;
}

enum JFc {
  JFc_Mp4BackgroundColorBlack = 0;
  JFc_Mp4BackgroundColorWhite = 1;
}

enum ZFc1 {
  ZFc_AfterTeleportScreenColorBlack = 0;
  ZFc_AfterTeleportScreenColorWhite = 1;
}

message eNc2 {
  int32 XFc = 1;
  int32 YFc = 2;
}

message GDOLLAR_ {
  oneof tNc1 {
    int32 ZFc1 = 5;
  }
  string y5n1 = 1;
  bool ODOLLAR_ = 2;
  bool zFc2 = 3;
  eNc2 JFc = 4;
}

message TransitionFlowPb {
  string FlowListName = 1;
  int32 FlowId = 2;
  int32 StateId = 3;
}

message SeamlessTravelContext {
  oneof Qn1 {
    string Wn1 = 8;
  }
  string EffectPath = 1;
  float LeastTime = 2;
  float EffectExpandTime = 3;
  float EffectCollapseTime = 4;
  bool HasFloorParams = 5;
  FloorParams FloorParams = 6;
  bool DOLLARn1 = 7;
}

message Sa1 {
  int32 ya11 = 1;
}

message FloorParams {
  string FloorMeshPath = 1;
  string FloorMaterialPath = 2;
  float PosX = 3;
  float PosY = 4;
  float FloorAppearTime = 5;
  float FloorDisappearTime = 6;
}

// MessageId: 28184 (Request)
message TeleportFinishRequest {
}

// MessageId: 28251 (Response)
message TeleportFinishResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 19974 (Notify)
message FallFinishNotify {
}

// MessageId: 25289 (Request)
message UnOpenedAreaPullbackRequest {
}

// MessageId: 16405 (Response)
message UnOpenedAreaPullbackResponse {
  ErrorCode ErrorCode = 11;
}

message Cpl {
  GameCtxPb gpl = 1;
  int32 Index = 2;
}

message MIl {
  int64 EntityId = 1;
  int32 MapId = 2;
}

enum Qn_1 {
  Qn__dpl = 0;
  Qn__NoRenderPortalComponent = 1;
}

message Kn_1 {
  oneof Xn {
    Cpl Cpl = 1;
    MIl MIl = 2;
  }
}

// MessageId: 25375 (Request)
message TeleportByClientTriggerRequest {
  int32 mpl = 2;
  Kn_1 ppl = 11;
  Vector Location = 13;
  Rotator Rotation = 8;
}

// MessageId: 18903 (Response)
message TeleportByClientTriggerResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 18035 (Notify)
message HJl {
  int32 PlayerId = 7;
  int32 ur_1 = 13;
}

// MessageId: 19738 (Notify)
message TeleportVehicleNotify {
  Vector Location = 7;
  Rotator Rotation = 3;
  int32 Reason = 14;
  repeated int32 dr_2 = 6;
  repeated int64 mr_2 = 8;
  int64 fr_2 = 13;
  bool VI_ = 1;
}

// MessageId: 29539 (Request)
message s01 {
  int32 mjn2 = 4;
  int32 c01 = 8;
}

// MessageId: 29525 (Response)
message a01 {
  ErrorCode ErrorCode = 13;
}

// MessageId: 23328 (Request)
message h01 {
  int32 c01 = 10;
}

// MessageId: 22833 (Response)
message l01 {
  ErrorCode ErrorCode = 7;
}

message f01 {
  int32 u01 = 1;
  int32 Role = 2;
}

// MessageId: 15717 (Notify)
message _01 {
  bool d01 = 3;
  int32 m01 = 9;
  repeated f01 fUs = 15;
}

// MessageId: 18148 (Request)
message BlockListRequest {
}

// MessageId: 18832 (Response)
message BlockListResponse {
  repeated PlayerDetails BlockList = 1;
  ErrorCode ErrorCode = 2;
}

// MessageId: 16182 (Request)
message BlockPlayerRequest {
  int32 Id = 15;
}

// MessageId: 19814 (Response)
message BlockPlayerResponse {
  PlayerDetails Info = 14;
  ErrorCode ErrorCode = 12;
}

// MessageId: 16616 (Request)
message UnblockPlayerRequest {
  int32 Id = 4;
}

// MessageId: 24698 (Response)
message UnblockPlayerResponse {
  ErrorCode ErrorCode = 8;
}

message BuffItem {
  int32 ItemId = 1;
  int64 CdTime = 3;
}

message Yn_2 {
  int32 ItemId = 1;
  bool pr_1 = 2;
}

// MessageId: 16850 (Request)
message BuffItemRequest {
  int32 ItemId = 6;
  int32 Num = 10;
  int32 RoleId = 13;
}

// MessageId: 28260 (Response)
message BuffItemResponse {
  ErrorCode ErrorCode = 6;
  BuffItem BuffItemInfo = 10;
  int32 RoleId = 12;
}

// MessageId: 19639 (Notify)
message BuffItemNotify {
  repeated BuffItem ItemBuffList = 15;
  repeated Yn_2 Cr_1 = 10;
}

// MessageId: 17326 (Notify)
message BuffItemUpdateNotify {
  BuffItem BuffItem = 11;
  repeated Yn_2 Cr_1 = 3;
}

message CalabashDevelopConditionState {
  int32 ConditionId = 1;
  bool Rewarded = 2;
}

message CalabashDevelopInfo {
  int32 MonsterId = 1;
  repeated CalabashDevelopConditionState UnlockConditions = 2;
}

message CalabashMsg {
  int32 Level = 1;
  int32 Exp = 2;
  repeated int32 UnlockedLevels = 3;
  repeated CalabashDevelopInfo UnlockedDevelopRewards = 4;
  int32 IdentifyGuaranteeCount = 5;
}

message CalabashCfg {
  int32 LevelUpExp = 1;
  int32 LevelUpCondition = 3;
  map<int32, int32> CatchGain = 4;
}

// MessageId: 29992 (Notify)
message CalabashMsgNotify {
  CalabashMsg CalabashMsg = 11;
  CalabashCfg CalabashCfg = 2;
}

// MessageId: 28958 (Request)
message CalabashMsgRequest {
}

// MessageId: 28871 (Response)
message CalabashMsgResponse {
  ErrorCode ErrorCode = 13;
  CalabashMsg CalabashMsg = 15;
  CalabashCfg CalabashCfg = 12;
}

// MessageId: 24130 (Notify)
message CalabashExpAddNotify {
  int32 CurExp = 12;
  int32 AddExp = 1;
  int32 CurLevel = 5;
  CalabashCfg CalabashCfg = 11;
}

// MessageId: 16716 (Notify)
message UznCalabashDevelopRewardUnlockNotify {
  CalabashDevelopInfo UnlockedDevelopReward = 9;
  int32 ItemId = 1;
  int32 IncrId = 3;
}

// MessageId: 18319 (Notify)
message CalabashLevelsRewardNotify {
  repeated int32 RewardedLevels = 8;
}

// MessageId: 23037 (Request)
message CalabashLevelRewardRequest {
  int32 Level = 8;
}

// MessageId: 15190 (Response)
message CalabashLevelRewardResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 27237 (Request)
message CdKeyVerifyRequest {
  string CdKey = 14;
}

// MessageId: 21253 (Response)
message CdKeyVerifyResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 24668 (Request)
message ChatRequest {
  int32 ChannelId = 2;
  string Content = 14;
  repeated string ChatParams = 3;
}

// MessageId: 16000 (Response)
message ChatResponse {
  ErrorCode ErrorCode = 5;
  repeated string ErrorParams = 1;
  map<int32, string> Data = 2;
}

// MessageId: 24609 (Notify)
message ChatNotify {
  string Content = 13;
}

// MessageId: 28824 (Notify)
message SysInfoNotify {
  ErrorCode ErrorCode = 7;
  repeated string ErrorParams = 9;
}

// MessageId: 28744 (Notify)
message SysErrorNotify {
  ErrorCode ErrorCode = 4;
  repeated string ErrorParams = 12;
}

// MessageId: 22829 (Notify)
message ConsoleNotify {
  string Type = 2;
  string Content = 7;
}

enum ChatContentType {
  ChatContentType_Text = 0;
  ChatContentType_Emoji = 1;
}

// MessageId: 22687 (Request)
message PrivateChatRequest {
  int32 TargetUid = 2;
  ChatContentType ChatContentType = 4;
  string Content = 9;
}

// MessageId: 21120 (Response)
message PrivateChatResponse {
  int32 TargetUid = 8;
  ErrorCode ErrorCode = 12;
  string MsgId = 9;
  string FilterMsg = 5;
}

message ChatContentProto {
  int32 SenderUid = 1;
  ChatContentType ChatContentType = 2;
  string Content = 3;
  bool OfflineMsg = 4;
  int64 UtcTime = 5;
  string MsgId = 6;
  string PsAccountId = 7;
}

// MessageId: 19177 (Notify)
message PrivateMessageNotify {
  ChatContentProto ChatContent = 10;
}

// MessageId: 17010 (Request)
message PrivateChatHistoryRequest {
  int32 TargetUid = 7;
  int32 StartIndex = 2;
}

// MessageId: 17468 (Response)
message PrivateChatHistoryResponse {
  ErrorCode ErrorCode = 2;
  PrivateChatHistoryContentProto Data = 9;
}

message PrivateChatHistoryContentProto {
  int32 TargetUid = 1;
  repeated ChatContentProto Chats = 2;
  bool HistoryIsEnd = 3;
  int32 TotalNums = 4;
}

// MessageId: 16326 (Notify)
message PrivateChatHistoryNotify {
  repeated PrivateChatHistoryContentProto AllChats = 10;
}

// MessageId: 16333 (Request)
message PrivateChatDataRequest {
}

// MessageId: 29853 (Response)
message PrivateChatDataResponse {
  bool vr_1 = 10;
}

// MessageId: 24932 (Request)
message ChatMutePlayerRequest {
  int32 TargetUid = 7;
  bool Mute = 10;
}

// MessageId: 21191 (Response)
message ChatMutePlayerResponse {
  ErrorCode ErrorCode = 15;
  repeated int32 RemoveMutePlayerId = 8;
}

enum PrivateChatOperateType {
  PrivateChatOperateType_CloseChat = 0;
  PrivateChatOperateType_OpenChat = 1;
  PrivateChatOperateType_ReadMsg = 2;
}

// MessageId: 20748 (Request)
message PrivateChatOperateRequest {
  int32 OperateType = 10;
  int32 TargetPlayerId = 15;
}

// MessageId: 25874 (Response)
message PrivateChatOperateResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 21522 (Notify)
message ChatMutePlayerListNotify {
  repeated int32 PlayerId = 2;
}

// MessageId: 24319 (Notify)
message DeletePrivateChatNotify {
  repeated int32 PlayerId = 7;
}

enum ChatChannelType {
  ChatChannelType_Default = 0;
  ChatChannelType_Private = 1;
  ChatChannelType_Team = 2;
}

enum SubChatChannelType {
  SubChatChannelType_WorldTeam = 0;
  SubChatChannelType_MatchTeam = 1;
}

// MessageId: 29109 (Request)
message ChannelChatRequest {
  ChatChannelType ChannelType = 13;
  SubChatChannelType SubChannelType = 4;
  ChatContentType ChatContentType = 9;
  string Content = 14;
}

// MessageId: 18290 (Response)
message ChannelChatResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 15124 (Notify)
message ChannelChatMessageNotify {
  ChatChannelType ChannelType = 11;
  SubChatChannelType SubChannelType = 10;
  ChannelChatMessageInfo MessageInfo = 4;
}

enum ChatChannelNoticeType {
  ChatChannelNoticeType_None = 0;
  ChatChannelNoticeType_EnterTeam = 1;
  ChatChannelNoticeType_ExitTeam = 2;
  ChatChannelNoticeType_ClearMessages = 3;
}

message ChannelChatMessageInfo {
  int32 SenderId = 1;
  int32 SenderIcon = 2;
  string SenderName = 3;
  ChatContentType ChatContentType = 4;
  string Content = 5;
  ChatChannelNoticeType NoticeType = 6;
  int64 SendTime = 7;
  string PsOnlineId = 8;
  string PsAccountId = 9;
}

// MessageId: 22223 (Notify)
message ChannelChatHistoryNotify {
  ChatChannelType ChannelType = 9;
  SubChatChannelType SubChannelType = 3;
  repeated ChannelChatMessageInfo MessageInfos = 7;
}

enum RewardType {
  RewardType_TaskReward = 0;
  RewardType_SignReward = 2;
  RewardType_ScoreReward = 3;
}

// MessageId: 15408 (Request)
message ClaimRewardRequest {
  RewardType RewardType = 2;
  repeated int32 Ids = 15;
  int32 ActivityId = 9;
}

// MessageId: 28471 (Response)
message ClaimRewardResponse {
  ErrorCode ErrorCode = 14;
}


message CombatPushData {
  oneof Message {
    ApplyBuffS2cResponsePush ApplyBuffS2cResponsePush = 4;
    RemoveBuffS2cResponsePush RemoveBuffS2cResponsePush = 5;
    RemoveBuffByIdS2cResponsePush RemoveBuffByIdS2cResponsePush = 6;
    CreateBulletResponsePush CreateBulletResponsePush = 7;
    DestroyBulletResponsePush DestroyBulletResponsePush = 8;
    ApplyGameplayEffectPush ApplyGameplayEffectPush = 9;
    RemoveGameplayEffectPush RemoveGameplayEffectPush = 10;
    HitEndPush HitEndPush = 11;
    EndSkillPush EndSkillPush = 12;
    PartUpdatePush PartUpdatePush = 13;
    MaterialPush MaterialPush = 14;
    GameplayCuePush GameplayCuePush = 15;
    EntityIsVisiblePush EntityIsVisiblePush = 16;
    SwitchCharacterStatePush SwitchCharacterStatePush = 17;
    LogicStateInitPush LogicStateInitPush = 18;
    SwitchLogicStatePush SwitchLogicStatePush = 19;
    AnimationStateChangedPush AnimationStateChangedPush = 20;
    AnimationStateInitPush AnimationStateInitPush = 21;
    ModifyBulletParamsPush ModifyBulletParamsPush = 22;
    DrownPush DrownPush = 23;
    ActiveBuffPush ActiveBuffPush = 24;
    AiInformationPush AiInformationPush = 25;
    ToughCalcExtraRatioChangePush ToughCalcExtraRatioChangePush = 26;
    BattleStateChangePush BattleStateChangePush = 27;
    AnimationGameplayTagPush AnimationGameplayTagPush = 28;
    BoneVisibleChangePush BoneVisibleChangePush = 29;
    AiBlackboardsPush AiBlackboardsPush = 30;
    AiBlackboardCdPush AiBlackboardCdPush = 31;
    AiHatePush AiHatePush = 32;
    MonsterBoomPush MonsterBoomPush = 33;
    CaughtPush CaughtPush = 34;
    EntityStaticHookMovePush EntityStaticHookMovePush = 35;
    ChangeStateConfirmPush ChangeStateConfirmPush = 36;
    BuffStackCountPush BuffStackCountPush = 37;
    ANStartPush ANStartPush = 38;
    UseSkillFailPush UseSkillFailPush = 39;
    EnterViewDirectionPush EnterViewDirectionPush = 40;
    ExitViewDirectionPush ExitViewDirectionPush = 41;
    PassiveSkillAddPush PassiveSkillAddPush = 42;
    InterruptSkillInDelayPush InterruptSkillInDelayPush = 43;
    TriggerExitSkillPush TriggerExitSkillPush = 44;
    ActorVisiblePush ActorVisiblePush = 45;
    BuffEffectPush BuffEffectPush = 46;
    RTimeStopPush RTimeStopPush = 47;
    DrownEndTeleportPush DrownEndTeleportPush = 48;
    MonsterDrownPush MonsterDrownPush = 49;
    PassiveSkillRemovePush PassiveSkillRemovePush = 50;
    Fe_ Fe_ = 51;
    PlayMontageTaskAndPush PlayMontageTaskAndPush = 52;
    TsAnimNotifyStateAbsoluteTimeStopPush TsAnimNotifyStateAbsoluteTimeStopPush = 53;
    RoleTagChangePush RoleTagChangePush = 54;
    ExecuteQtePush ExecuteQtePush = 55;
    ClientCurrentRoleReportPush ClientCurrentRoleReportPush = 56;
    vu_ vu_ = 57;
    Fdc Fdc = 58;
    Vo1 Vo1 = 59;
  }
  CombatCommon CombatCommon = 1;
}


message CombatNotifyData {
  oneof Message {
    CreateBulletNotify CreateBulletNotify = 2;
    DestroyBulletNotify DestroyBulletNotify = 3;
    DamageExecuteNotify DamageExecuteNotify = 4;
    ApplyGameplayEffectNotify ApplyGameplayEffectNotify = 5;
    RemoveGameplayEffectNotify RemoveGameplayEffectNotify = 6;
    HitNotify HitNotify = 7;
    SkillNotify SkillNotify = 8;
    UseSkillNotify UseSkillNotify = 9;
    EndSkillNotify EndSkillNotify = 10;
    EntityLoadCompleteNotify EntityLoadCompleteNotify = 11;
    PartUpdateNotify PartUpdateNotify = 12;
    PartComponentInitNotify PartComponentInitNotify = 14;
    MaterialNotify MaterialNotify = 15;
    GameplayCueNotify GameplayCueNotify = 16;
    EntityIsVisibleNotify EntityIsVisibleNotify = 17;
    SwitchCharacterStateNotify SwitchCharacterStateNotify = 18;
    PlayerRebackSceneNotify PlayerRebackSceneNotify = 19;
    LogicStateInitNotify LogicStateInitNotify = 20;
    SwitchLogicStateNotify SwitchLogicStateNotify = 21;
    AttributeChangedNotify AttributeChangedNotify = 22;
    AnimationStateChangedNotify AnimationStateChangedNotify = 23;
    AnimationStateInitNotify AnimationStateInitNotify = 24;
    ModifyBulletParamsNotify ModifyBulletParamsNotify = 25;
    DrownNotify DrownNotify = 26;
    OrderApplyBuffNotify OrderApplyBuffNotify = 27;
    OrderRemoveBuffNotify OrderRemoveBuffNotify = 28;
    ActivateBuffNotify ActivateBuffNotify = 29;
    OrderRemoveBuffByTagsNotify OrderRemoveBuffByTagsNotify = 30;
    AiInformationNotify AiInformationNotify = 31;
    BattleStateChangeNotify BattleStateChangeNotify = 32;
    AnimationGameplayTagNotify AnimationGameplayTagNotify = 33;
    BoneVisibleChangeNotify BoneVisibleChangeNotify = 34;
    AiBlackboardCdNotify AiBlackboardCdNotify = 35;
    CaughtNotify CaughtNotify = 36;
    EntityStaticHookMoveNotify EntityStaticHookMoveNotify = 37;
    ChangeStateNotify ChangeStateNotify = 38;
    ChangeStateConfirmNotify ChangeStateConfirmNotify = 40;
    BuffStackCountNotify BuffStackCountNotify = 41;
    MontagePlayNotify MontagePlayNotify = 42;
    ANStartNotify ANStartNotify = 43;
    FsmResetNotify FsmResetNotify = 44;
    DamageRecordNotify DamageRecordNotify = 45;
    AiHateNotify AiHateNotify = 46;
    FsmBlackboardNotify FsmBlackboardNotify = 47;
    CharacterBattleStateChangeNotify CharacterBattleStateChangeNotify = 48;
    ApplyBuffS2cRequestNotify ApplyBuffS2cRequestNotify = 53;
    RemoveBuffS2cRequestNotify RemoveBuffS2cRequestNotify = 54;
    ActorVisibleNotify ActorVisibleNotify = 57;
    RecoverPropChangedNotify RecoverPropChangedNotify = 58;
    RemoveBuffByIdS2cRequestNotify RemoveBuffByIdS2cRequestNotify = 59;
    ShieldUpdateNotify ShieldUpdateNotify = 61;
    PlayerBattleStateChangeNotify PlayerBattleStateChangeNotify = 62;
    FsmCustomBlackboardNotify FsmCustomBlackboardNotify = 63;
    PassiveSkillAddNotify PassiveSkillAddNotify = 64;
    PassiveSkillRemoveNotify PassiveSkillRemoveNotify = 65;
    ExecuteQteNotify ExecuteQteNotify = 66;
    Wul Wul = 69;
    AddCombineEntitiesRelationNotify AddCombineEntitiesRelationNotify = 70;
    RemoveCombineRelationNotify RemoveCombineRelationNotify = 71;
    ifl ifl = 72;
    W7l W7l = 73;
    EntityLivingStatusNotify EntityLivingStatusNotify = 74;
    NewLinkStateNotify NewLinkStateNotify = 75;
    BroadcastAddBuffFailedNotify BroadcastAddBuffFailedNotify = 76;
    bvl bvl = 100;
  }
  CombatCommon CombatCommon = 1;
}


// MessageId: 18521 (Notify)
message bvl {
}


message CombatContext {
  oneof Message {
    FsmStateChangeContext FsmStateChangeContext = 1;
    SkillContext SkillContext = 2;
    MontageContext MontageContext = 3;
    AddBuffContext AddBuffContext = 4;
    BulletContext BulletContext = 5;
  }
}


message CombatRequestData {
  oneof Message {
    CreateBulletRequest CreateBulletRequest = 3;
    DestroyBulletRequest DestroyBulletRequest = 4;
    DamageExecuteRequest DamageExecuteRequest = 5;
    ApplyGameplayEffectRequest ApplyGameplayEffectRequest = 6;
    RemoveGameplayEffectRequest RemoveGameplayEffectRequest = 7;
    HitRequest HitRequest = 8;
    HitEndRequest HitEndRequest = 9;
    SkillRequest SkillRequest = 10;
    UseSkillRequest UseSkillRequest = 11;
    EndSkillRequest EndSkillRequest = 12;
    PartUpdateRequest PartUpdateRequest = 13;
    MaterialRequest MaterialRequest = 14;
    GameplayCueRequest GameplayCueRequest = 15;
    EntityIsVisibleRequest EntityIsVisibleRequest = 16;
    SwitchCharacterStateRequest SwitchCharacterStateRequest = 17;
    LogicStateInitRequest LogicStateInitRequest = 18;
    SwitchLogicStateRequest SwitchLogicStateRequest = 19;
    AnimationStateChangedRequest AnimationStateChangedRequest = 20;
    AnimationStateInitRequest AnimationStateInitRequest = 21;
    ModifyBulletParamsRequest ModifyBulletParamsRequest = 22;
    DrownRequest DrownRequest = 23;
    OrderApplyBuffRequest OrderApplyBuffRequest = 24;
    OrderRemoveBuffRequest OrderRemoveBuffRequest = 25;
    ActivateBuffRequest ActivateBuffRequest = 26;
    OrderRemoveBuffByTagsRequest OrderRemoveBuffByTagsRequest = 27;
    AiInformationRequest AiInformationRequest = 28;
    ToughCalcExtraRatioChangeRequest ToughCalcExtraRatioChangeRequest = 29;
    BattleStateChangeRequest BattleStateChangeRequest = 30;
    AnimationGameplayTagRequest AnimationGameplayTagRequest = 31;
    BoneVisibleChangeRequest BoneVisibleChangeRequest = 32;
    AiBlackboardsRequest AiBlackboardsRequest = 33;
    AiBlackboardCdRequest AiBlackboardCdRequest = 34;
    AiHateRequest AiHateRequest = 35;
    MonsterBoomRequest MonsterBoomRequest = 36;
    CaughtRequest CaughtRequest = 37;
    EntityStaticHookMoveRequest EntityStaticHookMoveRequest = 38;
    ChangeStateRequest ChangeStateRequest = 39;
    ChangeStateConfirmRequest ChangeStateConfirmRequest = 40;
    FsmConditionPassRequest FsmConditionPassRequest = 41;
    BuffStackCountRequest BuffStackCountRequest = 42;
    ANStartRequest ANStartRequest = 43;
    UseSkillFailRequest UseSkillFailRequest = 44;
    EnterViewDirectionRequest EnterViewDirectionRequest = 45;
    ExitViewDirectionRequest ExitViewDirectionRequest = 46;
    PassiveSkillAddRequest PassiveSkillAddRequest = 47;
    InterruptSkillInDelayRequest InterruptSkillInDelayRequest = 49;
    TriggerExitSkillRequest TriggerExitSkillRequest = 50;
    ActorVisibleRequest ActorVisibleRequest = 55;
    BuffEffectRequest BuffEffectRequest = 56;
    FragileChangeRequest FragileChangeRequest = 57;
    RTimeStopRequest RTimeStopRequest = 58;
    DrownEndTeleportRequest DrownEndTeleportRequest = 59;
    MonsterDrownRequest MonsterDrownRequest = 60;
    PassiveSkillRemoveRequest PassiveSkillRemoveRequest = 61;
    R4n R4n = 62;
    FsmStateBehaviorRequest FsmStateBehaviorRequest = 63;
    PlayMontageTaskAndRequest PlayMontageTaskAndRequest = 64;
    TsAnimNotifyStateAbsoluteTimeStopRequest TsAnimNotifyStateAbsoluteTimeStopRequest = 65;
    SwitchRoleRequest SwitchRoleRequest = 66;
    RoleTagChangeRequest RoleTagChangeRequest = 67;
    ExecuteQteRequest ExecuteQteRequest = 68;
    Kpl Kpl = 69;
    DOLLARpl DOLLARpl = 70;
    ClientCurrentRoleReportRequest ClientCurrentRoleReportRequest = 71;
    CombatMaxCaseMessageRequest CombatMaxCaseMessageRequest = 99;
  }
  CombatCommon CombatCommon = 1;
  int32 RequestId = 2;
}


message CombatResponseData {
  oneof Message {
    CreateBulletResponse CreateBulletResponse = 3;
    DestroyBulletResponse DestroyBulletResponse = 4;
    DamageExecuteResponse DamageExecuteResponse = 5;
    ApplyGameplayEffectResponse ApplyGameplayEffectResponse = 6;
    RemoveGameplayEffectResponse RemoveGameplayEffectResponse = 7;
    HitResponse HitResponse = 8;
    HitEndResponse HitEndResponse = 9;
    SkillResponse SkillResponse = 10;
    UseSkillResponse UseSkillResponse = 11;
    EndSkillResponse EndSkillResponse = 12;
    PartUpdateResponse PartUpdateResponse = 13;
    MaterialResponse MaterialResponse = 14;
    GameplayCueResponse GameplayCueResponse = 15;
    EntityIsVisibleResponse EntityIsVisibleResponse = 16;
    SwitchCharacterStateResponse SwitchCharacterStateResponse = 17;
    LogicStateInitResponse LogicStateInitResponse = 18;
    SwitchLogicStateResponse SwitchLogicStateResponse = 19;
    AnimationStateChangedResponse AnimationStateChangedResponse = 20;
    AnimationStateInitResponse AnimationStateInitResponse = 21;
    ModifyBulletParamsResponse ModifyBulletParamsResponse = 22;
    DrownResponse DrownResponse = 23;
    OrderApplyBuffResponse OrderApplyBuffResponse = 24;
    OrderRemoveBuffResponse OrderRemoveBuffResponse = 25;
    ActivateBuffResponse ActivateBuffResponse = 26;
    OrderRemoveBuffByTagsResponse OrderRemoveBuffByTagsResponse = 27;
    AiInformationResponse AiInformationResponse = 28;
    ToughCalcExtraRatioChangeResponse ToughCalcExtraRatioChangeResponse = 29;
    BattleStateChangeResponse BattleStateChangeResponse = 30;
    AnimationGameplayTagResponse AnimationGameplayTagResponse = 31;
    BoneVisibleChangeResponse BoneVisibleChangeResponse = 32;
    AiBlackboardsResponse AiBlackboardsResponse = 33;
    AiBlackboardCdResponse AiBlackboardCdResponse = 34;
    AiHateResponse AiHateResponse = 35;
    MonsterBoomResponse MonsterBoomResponse = 36;
    CaughtResponse CaughtResponse = 37;
    EntityStaticHookMoveResponse EntityStaticHookMoveResponse = 38;
    ChangeStateResponse ChangeStateResponse = 39;
    ChangeStateConfirmResponse ChangeStateConfirmResponse = 40;
    FsmConditionPassResponse FsmConditionPassResponse = 41;
    BuffStackCountResponse BuffStackCountResponse = 42;
    ANStartResponse ANStartResponse = 43;
    UseSkillFailResponse UseSkillFailResponse = 44;
    EnterViewDirectionResponse EnterViewDirectionResponse = 45;
    ExitViewDirectionResponse ExitViewDirectionResponse = 46;
    PassiveSkillAddResponse PassiveSkillAddResponse = 47;
    InterruptSkillInDelayResponse InterruptSkillInDelayResponse = 49;
    TriggerExitSkillResponse TriggerExitSkillResponse = 50;
    ActorVisibleResponse ActorVisibleResponse = 55;
    BuffEffectResponse BuffEffectResponse = 56;
    FragileChangeResponse FragileChangeResponse = 57;
    RTimeStopResponse RTimeStopResponse = 58;
    DrownEndTeleportResponse DrownEndTeleportResponse = 59;
    MonsterDrownResponse MonsterDrownResponse = 60;
    PassiveSkillRemoveResponse PassiveSkillRemoveResponse = 61;
    kCs kCs = 62;
    FsmStateBehaviorResponse FsmStateBehaviorResponse = 63;
    PlayMontageTaskAndResponse PlayMontageTaskAndResponse = 64;
    TsAnimNotifyStateAbsoluteTimeStopResponse TsAnimNotifyStateAbsoluteTimeStopResponse = 65;
    SwitchRoleResponse SwitchRoleResponse = 66;
    RoleTagChangeResponse RoleTagChangeResponse = 67;
    ExecuteQteResponse ExecuteQteResponse = 68;
    izl2 izl = 69;
    azl1 azl = 70;
    ClientCurrentRoleReportResponse ClientCurrentRoleReportResponse = 71;
    Sr_1 Sr_1 = 100;
  }
  CombatCommon CombatCommon = 1;
  int32 RequestId = 2;
}


message Sr_1 {
}


message CombatSendData {
  oneof Message {
    CombatPushData Push = 2;
    CombatRequestData Request = 3;
  }
}


message CombatReceiveData {
  oneof Message {
    CombatNotifyData CombatNotifyData = 2;
    CombatResponseData CombatResponseData = 3;
  }
}


// MessageId: 19097 (Request)
message CombatSendPackRequest {
  repeated CombatSendData Data = 11;
  int32 HostPlayerId = 9;
}


// MessageId: 21563 (Response)
message CombatSendPackResponse {
  ErrorCode ErrorCode = 4;
  CombatReceivePackNotify ReceivePackNotify = 6;
}


// MessageId: 23872 (Notify)
message CombatReceivePackNotify {
  repeated CombatReceiveData Data = 13;
}


// MessageId: 21038 (Request)
message CombatMaxCaseMessageRequest {
}


// MessageId: 21541 (Response)
message CombatMaxCaseMessageResponse {
}


// MessageId: 15675 (Request)
message CombatMessagePrefixInfoRequest {
  string Id = 5;
}


// MessageId: 23164 (Response)
message CombatMessagePrefixInfoResponse {
  bytes YLs2 = 13;
}


// MessageId: 22535 (Request)
message CombatMessagePostInfoRequest {
  bytes PostId = 3;
}


// MessageId: 15362 (Response)
message CombatMessagePostInfoResponse {
  string PostInfo = 10;
}

// MessageId: 21106 (Request)
message SceneItemStateRequest {
  int64 EntityId = 14;
  int32 OperateType = 4;
}

// MessageId: 24148 (Response)
message SceneItemStateResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 22768 (Notify)
message EntityLoadCompleteNotify {
  int32 PlayerId = 8;
  repeated int64 EntityIds = 12;
  repeated int64 EntityIdsUnload = 11;
}

// MessageId: 25519 (Request)
message MaterialRequest {
  MaterialInfo MaterialInfo = 4;
  CombatCommon CombatCommon = 14;
}

// MessageId: 21610 (Push)
message MaterialPush {
  MaterialInfo MaterialInfo = 9;
  CombatCommon CombatCommon = 10;
}

message MaterialInfo {
  int64 EntityId = 1;
  string AssetName = 2;
  bool IsGroup = 3;
}

// MessageId: 16184 (Response)
message MaterialResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 29504 (Notify)
message MaterialNotify {
  MaterialInfo MaterialInfo = 13;
  CombatCommon CombatCommon = 12;
}

// MessageId: 27730 (Request)
message CommonOrganResetTimeRequest {
  int64 EntityId = 14;
}

// MessageId: 20408 (Response)
message CommonOrganResetTimeResponse {
  ErrorCode ErrorCode = 13;
  int64 EntityId = 11;
  int32 ResetTime = 9;
}

message ItemMove {
  int64 EntityId = 1;
  Vector Location = 2;
}

// MessageId: 25069 (Request)
message StopSceneItemMoveRequest {
  repeated ItemMove ItemMove = 12;
  int32 IsMulti = 10;
}

// MessageId: 20985 (Response)
message StopSceneItemMoveResponse {
  ErrorCode ErrorCode = 8;
}

message MoveToTarget {
  int64 EntityId = 1;
  Vector Location = 2;
  float MoveTime = 3;
  float StayTime = 4;
  float MaxSpeed = 5;
  float Acceleration = 6;
}

// MessageId: 21098 (Request)
message MoveToTargetRequest {
  MoveToTarget MoveToTarget = 11;
  int32 IsMulti = 6;
}

// MessageId: 28356 (Notify)
message MoveToTargetNotify {
  MoveToTarget MoveToTarget = 10;
}

// MessageId: 25195 (Response)
message MoveToTargetResponse {
  ErrorCode ErrorCode = 14;
}

message DynamicEntityInformation {
  int64 Id = 1;
  EEntityType EntityType = 2;
  int32 ConfigId = 3;
  int32 PlayerId = 4;
  int64 OwnerId = 5;
  MovementInformation MovementInformation = 6;
  repeated GameplayAttributeData GameAttributes = 7;
  bool InitAttribute = 8;
  bool IsVisible = 9;
  repeated int32 AnimationStates = 10;
  bool InitGameplayTag = 11;
  repeated GameplayTagData GameplayTags = 12;
  int32 Level = 13;
  repeated BlackboardParam BlackboardParams = 14;
  repeated string Tags = 15;
  repeated PrivateTag PrivateTags = 16;
  bool DeathStatus = 17;
  int32 HardnessModeId = 19;
  repeated PartInformation PartLifeInfos = 20;
  repeated VisionSkillInformation VisionSkillInfos = 21;
  repeated FightBuffInformation FightBuffInfos = 22;
  int32 CreatureGroup = 23;
  ListenInformation ListenInformation = 24;
  repeated SysBuffInformation SysBuffInfos = 25;
  LivingStatus LivingStatus = 26;
  repeated int32 EntityCommonTags = 27;
  int32 WeaponConfId = 28;
  int32 DurabilityValue = 29;
  Vector InitLocation = 30;
  SummonInfo SummonInfo = 31;
  repeated EntityComponentPb ComponentPbs = 32;
}

// MessageId: 29343 (Notify)
message EntityLivingStatusNotify {
  int64 Id = 13;
  LivingStatus LivingStatus = 2;
  repeated DropVisionItemResult DropVisionItem = 9;
}

message DropVisionItemResult {
  int32 PlayerId = 1;
  bool Drop = 2;
}

message ListenInformation {
  repeated int32 Id = 1;
  float Range = 2;
}

message ScenePlayerInformation {
  int32 PlayerId = 1;
  string PlayerName = 2;
  int32 PlayerIcon = 3;
  int32 Level = 4;
  string GuildName = 5;
  string GuildIntro = 6;
  Vector Location = 7;
  bool IsOffline = 8;
  int32 PlayerPrefix = 9;
  int32 PlayerGEIncHandle = 10;
  repeated FightRoleInfos FightRoleInfos = 11;
  Rotator Rotation = 13;
  int32 GroupType = 14;
  int32 CurRole = 15;
  VehiclePlayerData VehiclePlayerData = 16;
  Vector ZE_ = 17;
}

message FightRoleInformation {
  int32 RoleId = 1;
  int64 EntityId = 2;
  bool IsControl = 5;
}

// MessageId: 19074 (Notify)
message UpdatePlayerAllFightRoleNotify {
  int32 PlayerId = 2;
  repeated FightRoleInformation FightRoleInfos = 3;
}

message PlayerFightRolesInfo {
  int32 PlayerId = 1;
  repeated FightRoleInformation vRs = 2;
  bool IsPhantom = 3;
  bool IsRetain = 4;
}

// MessageId: 21149 (Notify)
message Ous {
  repeated PlayerFightRolesInfo SRs = 5;
}

// MessageId: 22556 (Notify)
message SwitchGroupNotify {
  int32 PlayerId = 8;
  int32 GroupType = 13;
}

message GroupFormation {
  int32 PlayerId = 1;
  repeated FightRoleInfos FightRoleInfos = 2;
  int32 CurrentGroupType = 3;
}

message FightRoleInfo {
  int32 RoleId = 1;
  int64 EntityId = 2;
  bool OnStageWithoutControl = 3;
}

message FightRoleInfos {
  int32 GroupType = 1;
  repeated FightRoleInfo FightRoleInfos = 2;
  int32 CurRole = 3;
  LivingStatus LivingStatus = 4;
  bool IsFixedLocation = 5;
}

enum Z7s2 {
  Z7s_GroupNone = 0;
  Z7s_Battle = 1;
  Z7s_hxs = 2;
  Z7s_Plot = 3;
  Z7s_RoleGroupMax = 4;
}

// MessageId: 21221 (Notify)
message UpdateGroupFormationNotify {
  repeated GroupFormation GroupFormation = 4;
}

// MessageId: 22550 (Notify)
message UpdatePlayerSingleFightRoleNotify {
  int32 PlayerId = 14;
  FightRoleInformation FightRoleInfo = 11;
}

// MessageId: 21340 (Notify)
message ChangePlayerFightRoleNotify {
  int32 PlayerId = 5;
  repeated FightRoleInformation FightRoleInfos = 12;
  bool IsPhantom = 7;
}

message SceneInformation {
  string SceneId = 1;
  int32 InstanceId = 2;
  int32 OwnerId = 3;
  repeated ScenePlayerInformation PlayerInfos = 4;
  repeated DynamicEntityInformation DynamicEntityList = 5;
  repeated BlackboardParam BlackboardParams = 6;
  int64 EndTime = 8;
  PlayerSceneAoiData AoiData = 11;
  repeated int64 OwnerFinishMingSuGens = 12;
  int32 Mode = 13;
  SceneTimeInfo TimeInfo = 14;
  repeated int32 HostFogIds = 15;
  repeated string LoadedSubLevels = 16;
  repeated SceneAreaState AreaStates = 17;
  int32 ResetPointEntityId = 18;
  repeated int32 DataLayers = 19;
  map<int32, int32> AreaMpc = 20;
  int64 CurContextId = 21;
  repeated AudioState AudioState = 23;
  int64 SceneBulletOwnerId = 24;
  int64 SceneTraceId = 25;
  repeated string DDOLLAR_ = 26;
}

message SceneAreaState {
  int32 AreaId = 1;
  bool State = 2;
}

// MessageId: 27397 (Notify)
message SceneAreaStateNotify {
  SceneAreaState AreaState = 12;
}

// MessageId: 29870 (Notify)
message HostTeleportUnlockNotify {
  int32 HostPlayerId = 8;
  int32 HostTeleportId = 12;
}

// MessageId: 23218 (Notify)
message HostFogIdUnlockNotify {
  int32 HostPlayerId = 10;
  int32 HostFogId = 5;
}

message SceneTimeInfo {
  int32 Hour = 1;
  int32 Minute = 2;
  int64 OwnerTimeClockTimeSpan = 3;
}

// MessageId: 25771 (Notify)
message SyncSceneTimeNotify {
  SceneTimeInfo TimeInfo = 1;
  bool uz_1 = 7;
}

enum SceneMode {
  SceneMode_Single = 0;
  SceneMode_Multi = 1;
}

// MessageId: 17759 (Notify)
message ChangeSceneModeNotify {
  string SceneId = 15;
  int32 Mode = 14;
}

// MessageId: 24116 (Notify)
message ChangeSceneModeEndNotify {
}

// MessageId: 21872 (Request)
message ChangeSceneModeFinishRequest {
}

// MessageId: 19692 (Response)
message ChangeSceneModeFinishResponse {
  ErrorCode ErrorCode = 6;
}

// MessageId: 26543 (Notify)
message ScenePlayerOfflineNotify {
  int32 PlayerId = 7;
  bool IsOffline = 3;
  bool IsReLogin = 14;
}

// MessageId: 18062 (Notify)
message JoinSceneNotify {
  SceneInformation SceneInfo = 1;
  int64 MaxEntityId = 7;
  TransitionOptionPb TransitionOption = 8;
}

// MessageId: 15707 (Request)
message SceneTraceRequest {
  int64 SceneTraceId = 8;
}

// MessageId: 23335 (Response)
message SceneTraceResponse {
}

// MessageId: 26052 (Notify)
message AfterJoinSceneNotify {
}

// MessageId: 15371 (Notify)
message OtherJoinSceneNotify {
  ScenePlayerInformation PlayerInfo = 13;
}

enum InstanceType {
  InstanceType_NoneInstance = 0;
  InstanceType_BigWorldInstance = 1;
  InstanceType_NormalInstance = 2;
  InstanceType_MirrorInstance = 3;
  InstanceType_TowerChallengeInstance = 4;
  InstanceType_CycleTowerChallenge = 5;
}

enum LeaveReason {
  LeaveReason_Initiative = 0;
  LeaveReason_BeKick = 1;
  LeaveReason_Dissolve = 2;
}

// MessageId: 26024 (Notify)
message LeaveSceneNotify {
  int32 PlayerId = 7;
  string SceneId = 1;
  TransitionOptionPb TransitionOption = 2;
}

message MovingEntityData {
  int64 EntityId = 1;
  int64 Originator = 2;
  repeated MoveReplaySample MoveInfos = 3;
}

// MessageId: 16361 (Push)
message MovePackagePush {
  repeated MovingEntityData MovingEntities = 11;
  int32 IsMulti = 1;
}

// MessageId: 18749 (Notify)
message MovePackageNotify {
  repeated MovingEntityData MovingEntities = 7;
}

// MessageId: 16378 (Push)
message PendingMoveInfoPush {
  repeated MovingEntityData MovingEntities = 8;
  int32 IsMulti = 4;
}

// MessageId: 27334 (Notify)
message MoveInfosHandleNotify {
  repeated MovingEntityData MovingEntities = 1;
}

// MessageId: 17177 (Push)
message EntitySimplyMoveInfoPackagePush {
  repeated EntitySimplyMoveInfo MoveInfos = 2;
  int32 IsMulti = 13;
}

message PawnMovement {
  Vector LinearVelocity = 1;
  Vector Location = 2;
  Rotator Rotation = 3;
  float TimeStamp = 4;
}

// MessageId: 18264 (Push)
message PawnAbsorbMovementPush {
  CombatCommon CombatCommon = 15;
  repeated PawnMovement MoveInfos = 6;
}

// MessageId: 25870 (Notify)
message PawnAbsorbMovementNotify {
  CombatCommon CombatCommon = 1;
  repeated PawnMovement MoveInfos = 7;
}

// MessageId: 29671 (Notify)
message ChangeEntityRoleNotify {
  int64 Id = 15;
  int32 PlayerId = 12;
}

// MessageId: 27137 (Request)
message CaptureEntityRequest {
  int64 Id = 11;
}

// MessageId: 16430 (Response)
message CaptureEntityResponse {
  ErrorCode ErrorCode = 9;
  int64 Id = 1;
}

// MessageId: 27803 (Request)
message RemoveSummonEntityRequest {
  int64 SummonerId = 9;
  int32 SkillId = 7;
  int32 RemoveType = 1;
  repeated int64 xKn = 13;
}

// MessageId: 26094 (Response)
message RemoveSummonEntityResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 24006 (Request)
message ChangeEntityRoleRequest {
  int64 Id = 10;
  int32 PlayerId = 7;
}

// MessageId: 17186 (Response)
message ChangeEntityRoleResponse {
  bool Success = 5;
  int64 Id = 10;
  int32 PlayerId = 11;
}

// MessageId: 20955 (Request)
message EntityOnLandedRequest {
  int64 EntityId = 4;
}

// MessageId: 28581 (Response)
message EntityOnLandedResponse {
}

// MessageId: 24034 (Notify)
message EntityOnLandedNotify {
  int64 Id = 13;
}

// MessageId: 22872 (Request)
message AttributeInitRequest {
  int64 Id = 9;
  repeated GameplayAttributeData Attributes = 4;
}

// MessageId: 22487 (Response)
message AttributeInitResponse {
  bool Success = 8;
  int64 Id = 11;
}

// MessageId: 16623 (Notify)
message AttributeInitNotify {
  int64 Id = 5;
  repeated GameplayAttributeData Attributes = 11;
}

// MessageId: 23372 (Request)
message AttributeChangedRequest {
  int64 Id = 10;
  repeated GameplayAttributeData Attributes = 8;
}

// MessageId: 21086 (Response)
message AttributeChangedResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 20725 (Notify)
message AttributeChangedNotify {
  int64 Id = 8;
  repeated GameplayAttributeData Attributes = 4;
}

// MessageId: 16599 (Notify)
message MonsterLevelNotify {
  int64 Id = 12;
  int32 Level = 3;
}

// MessageId: 19288 (Notify)
message MonsterLevelArrayNotify {
  repeated MonsterLevelNotify Monsters = 14;
}

// MessageId: 15599 (Notify)
message MonsterAttributeNotify {
  int64 Id = 6;
  map<int32, int32> Attributes = 11;
}

// MessageId: 18717 (Notify)
message MonsterAttributeArrayNotify {
  repeated MonsterAttributeNotify Monsters = 4;
}

// MessageId: 29955 (Request)
message AnimationStateInitRequest {
  CombatCommon CombatCommon = 5;
  int64 Id = 10;
  repeated int32 States = 7;
  repeated int32 SpecialStates = 2;
}

// MessageId: 25981 (Push)
message AnimationStateInitPush {
  CombatCommon CombatCommon = 15;
  int64 Id = 5;
  repeated int32 States = 3;
  repeated int32 SpecialStates = 10;
}

// MessageId: 27916 (Response)
message AnimationStateInitResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 19979 (Notify)
message AnimationStateInitNotify {
  CombatCommon CombatCommon = 15;
  int64 Id = 10;
  repeated int32 States = 2;
  float TimeStamp = 14;
  repeated int32 SpecialStates = 6;
}

// MessageId: 22581 (Request)
message AnimationStateChangedRequest {
  CombatCommon CombatCommon = 11;
  int64 Id = 6;
  repeated int32 States = 13;
  repeated int32 SpecialStates = 15;
}

// MessageId: 16374 (Push)
message AnimationStateChangedPush {
  CombatCommon CombatCommon = 11;
  int64 Id = 9;
  repeated int32 States = 10;
  repeated int32 SpecialStates = 7;
}

// MessageId: 25443 (Response)
message AnimationStateChangedResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 17206 (Notify)
message AnimationStateChangedNotify {
  CombatCommon CombatCommon = 4;
  int64 Id = 1;
  repeated int32 States = 3;
  float TimeStamp = 12;
  repeated int32 SpecialStates = 14;
}

// MessageId: 17806 (Notify)
message GameplayTagInitNotify {
  int64 Id = 5;
  repeated GameplayTagData Tags = 13;
}

// MessageId: 27100 (Notify)
message GameplayTagChangedNotify {
  int64 Id = 8;
  repeated GameplayTagData Tags = 13;
}

// MessageId: 18769 (Notify)
message EntityCommonTagNotify {
  int64 Id = 10;
  repeated CommonTagData Tags = 2;
}

// MessageId: 18994 (Notify)
message ChangeControlRoleNotify {
  int64 upId = 7;
  int64 downId = 11;
  int32 PlayerId = 12;
  bool NeedSetLocation = 4;
  Vector Location = 15;
}

message n4s {
  int64 EntityId = 1;
  bool Status = 2;
}

// MessageId: 27860 (Request)
message HardnessModeChangedRequest {
  int64 EntityId = 10;
  int32 HardnessModeId = 11;
}

// MessageId: 16797 (Response)
message HardnessModeChangedResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 22970 (Notify)
message HardnessModeChangedNotify {
  int64 EntityId = 11;
  int32 HardnessModeId = 12;
}

message SummonRequestInfo {
  int64 SummonEntityId = 1;
  int32 SkillId = 2;
  int32 SummonConfigId = 3;
  Vector Pos = 4;
  Rotator Rot = 5;
  bool IsVisible = 6;
}

// MessageId: 17813 (Request)
message SummonRequest {
  int64 SummonerEntityId = 2;
  SummonRequestInfo SummonInfo = 8;
}

// MessageId: 19425 (Response)
message SummonResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 29384 (Request)
message Summon2Request {
  int64 SummonerEntityId = 11;
  SummonRequestInfo SummonInfo = 10;
  int32 Version = 7;
}

// MessageId: 19088 (Response)
message Summon2Response {
  ErrorCode ErrorCode = 8;
  int32 Version = 2;
}

// MessageId: 17328 (Notify)
message SummonEntityNotify {
  int64 SummonerId = 11;
  repeated int64 zRs = 12;
}

// MessageId: 16831 (Notify)
message VisionSkillCallNotify {
  int32 PlayerId = 2;
  DynamicEntityInformation EntityInfo = 12;
}

message InstanceTimer {
  int32 Status = 1;
  int32 RemainTick = 2;
}

// MessageId: 23946 (Notify)
message InstanceTimerNotify {
  map<int32, InstanceTimer> InstanceTimers = 11;
}

// MessageId: 19241 (Notify)
message UpdateInstanceTimerNotify {
  map<int32, InstanceTimer> InstanceTimers = 7;
}

// MessageId: 29587 (Notify)
message RemoveInstanceTimerNotify {
  int32 TimerId = 11;
}

// MessageId: 23675 (Request)
message RemoveInstanceTimerRequest {
  int32 TimerId = 4;
}

// MessageId: 22515 (Response)
message RemoveInstanceTimerResponse {
  ErrorCode ErrorCode = 12;
  int32 TimerId = 3;
}

message l4s {
  int32 Status = 1;
  int32 RemainTick = 2;
}

message _4s {
  map<int32, l4s> rDs = 1;
}

message u4s1 {
  map<int32, l4s> rDs = 1;
}

message c4s {
  int32 TimerId = 1;
}

message d4s2 {
  int32 TimerId = 1;
}

message m4s {
  ErrorCode ErrorCode = 1;
  int32 TimerId = 2;
}

// MessageId: 22220 (Notify)
message UpdateInstanceOwnerInfoNotify {
  int64 Id = 1;
  InstanceOwnerInfo InstanceOwnerInfo = 10;
}

// MessageId: 17841 (Notify)
message UpdateOwnerMingSuGenNotify {
  int64 Id = 15;
}

// MessageId: 19138 (Notify)
message AddSysBuffNotify {
  int64 EntityId = 7;
  repeated SysBuffInformation BuffInfos = 9;
}

// MessageId: 20847 (Notify)
message UpdateSysBuffNotify {
  int64 EntityId = 8;
  repeated SysBuffInformation BuffInfos = 9;
}

// MessageId: 17032 (Notify)
message RemoveSysBuffNotify {
  int64 EntityId = 9;
  repeated int32 Ids = 8;
}

// MessageId: 18771 (Push)
message ChangeSceneClockPush {
  int32 Hour = 5;
  int32 Minute = 4;
  bool sDs = 9;
}

enum SceneDateUpdateReason {
  SceneDateUpdateReason_TimeFlowAuto = 0;
  SceneDateUpdateReason_LevelPlayAuto = 1;
  SceneDateUpdateReason_PlayerOperate = 2;
}

// MessageId: 22769 (Request)
message UpdateSceneDateRequest {
  uint32 AddDays = 11;
  int32 Hour = 3;
  int32 Minute = 7;
  int32 Reason = 2;
}

// MessageId: 18779 (Response)
message UpdateSceneDateResponse {
  ErrorCode ErrorCode = 15;
  uint32 CurrDate = 14;
}

// MessageId: 19764 (Notify)
message SceneDateNotify {
  uint32 CurrDate = 2;
}

// MessageId: 18894 (Push)
message HoldWeaponPush {
  int64 EntityId = 14;
  int64 WeaponEntityId = 5;
}

// MessageId: 23058 (Push)
message DiscardWeaponPush {
  int64 EntityId = 9;
  MovementInformation MovementInformation = 14;
}

// MessageId: 15168 (Request)
message DiscardWeaponRequest {
  int64 EntityId = 3;
  MovementInformation MovementInformation = 1;
}

// MessageId: 18774 (Response)
message DiscardWeaponResponse {
  bool DiscardSucc = 5;
}

// MessageId: 19687 (Notify)
message HoldWeaponNotify {
  int64 EntityId = 10;
  int32 WeaponConfId = 4;
}

// MessageId: 15816 (Request)
message CreatStoryCharacterRequest {
}

// MessageId: 28572 (Response)
message CreatStoryCharacterResponse {
  ErrorCode ErrorCode = 11;
  int64 EntityId = 15;
}

// MessageId: 23951 (Request)
message DeleteStoryCharacterRequest {
}

// MessageId: 22085 (Response)
message DeleteStoryCharacterResponse {
  ErrorCode ErrorCode = 9;
  int32 FightRoleId = 6;
}

// MessageId: 18640 (Notify)
message EnterAoiNotify {
  repeated DynamicEntityInformation EntityInfos = 10;
}

// MessageId: 28069 (Notify)
message AddEntityAoiNotify {
  repeated DynamicEntityInformation EntityInfos = 14;
}

// MessageId: 20884 (Notify)
message LeaveAoiNotify {
  repeated int64 EntityIds = 9;
}

// MessageId: 16302 (Notify)
message RemoveEntityAoiNotify {
  repeated EntityRemoveInfo RemoveInfos = 1;
}

// MessageId: 24514 (Notify)
message PlayerAoiRangeNotify {
  int32 MinX = 4;
  int32 MaxX = 2;
  int32 MinY = 14;
  int32 MaxY = 3;
}

message PlayerSceneAoiData {
  repeated DynamicEntityInformation DynamicEntityList = 1;
  repeated int64 GenIds = 2;
  repeated EntityPb Entities = 3;
}

message SceneGamePlayInfo {
  int32 GamePlayId = 1;
  bool IsFirst = 2;
  int32 Status = 3;
  uint32 OpenTime = 4;
}

// MessageId: 20638 (Notify)
message SceneGamePlayInfoNotify {
  repeated SceneGamePlayInfo GamePlayInfo = 2;
}

// MessageId: 17235 (Notify)
message SceneGamePlayFirstNotify {
  int32 GamePlayId = 5;
}

// MessageId: 29994 (Notify)
message SceneGamePlayStatusNotify {
  int32 GamePlayId = 4;
  int32 Status = 1;
}

// MessageId: 29558 (Notify)
message SceneGamePlayScopeNotify {
  int32 GamePlayId = 11;
  bool IsEnter = 5;
}

// MessageId: 17605 (Notify)
message SceneGamePlayOpenTimeNotify {
  int32 GamePlayId = 4;
  uint32 OpenTime = 3;
}

// MessageId: 18021 (Request)
message CreatureDetailRequest {
  int64 Id = 10;
}

// MessageId: 28689 (Response)
message CreatureDetailResponse {
  ErrorCode ErrorCode = 14;
  int64 Id = 2;
  int32 CurCount = 7;
  int64 NextRefreshTime = 6;
  int32 ConfigIndex = 5;
  int32 TDs = 1;
  int32 AreaIndex = 10;
  bool ConditionSatisfy = 3;
  repeated DynamicEntityInformation AliveEntities = 15;
}

// MessageId: 24656 (Notify)
message ResetLocationForZRangeNotify {
  int64 EntityId = 4;
  Vector ResetLocation = 14;
  Rotator Rotation = 11;
  bool NotifyRot = 8;
  bool ChangeInitPos = 5;
}

// MessageId: 24972 (Request)
message ChangeEntityStateRequest {
  int32 EntityId = 9;
  int32 StateTagId = 3;
}

// MessageId: 20608 (Response)
message ChangeEntityStateResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 29023 (Request)
message FoundationRequest {
  int64 EntityId = 11;
  int64 AccusedEntityId = 3;
  int32 ActiveOperate = 15;
  Vector Pos = 7;
  Rotator Rot = 10;
}

// MessageId: 29904 (Response)
message FoundationResponse {
  ErrorCode ErrorCode = 13;
  int32 ActiveOperate = 7;
}

// MessageId: 27073 (Notify)
message BeControlledPosInFoundationNotify {
  int64 FoundationEntityId = 12;
  int64 BeControlledEntityId = 9;
  int32 InstId = 8;
  int32 BIs = 10;
}

// MessageId: 16418 (Request)
message BeControlledRequest {
  int64 EntityId = 7;
  bool IsControl = 11;
}

// MessageId: 19926 (Response)
message BeControlledResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 24156 (Notify)
message BeControlledNotify {
  int64 EntityId = 6;
  int64 RoleEntityId = 15;
  bool NeedReset = 9;
}

// MessageId: 25067 (Request)
message BeControlledShowRequest {
  int64 EntityId = 6;
  bool IsShow = 11;
}

// MessageId: 23182 (Response)
message BeControlledShowResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 20522 (Notify)
message BeControlledShowNotify {
  int64 EntityId = 4;
  int64 RoleEntityId = 13;
  bool IsShow = 5;
}

enum TeleControlThrowWay {
  TeleControlThrowWay_EControlStateLetGo = 0;
  TeleControlThrowWay_EControlStateFreeThrowing = 1;
  TeleControlThrowWay_EControlStateLockBaseThrowing = 2;
  TeleControlThrowWay_EControlStateLockEntityThrowing = 3;
}

// MessageId: 20648 (Request)
message BeControlledThrowRequest {
  int64 EntityId = 5;
  int32 ThrowType = 6;
  int32 yul = 10;
}

// MessageId: 18244 (Response)
message BeControlledThrowResponse {
  ErrorCode ErrorCode = 5;
}

// MessageId: 28968 (Notify)
message RelationIdNotify {
  int32 MapId = 1;
  int32 RelationId = 13;
  int32 InstId = 12;
  int32 BIs = 8;
}

message SummonInfo {
  int32 SummonCfgId = 1;
  int64 SummonerId = 2;
  int32 SummonSkillId = 3;
}

// MessageId: 25216 (Notify)
message EntityPosResetNotify {
  int32 EntityId = 5;
}

enum ODs {
  ODs_InActive = 0;
  ODs_Active = 1;
}

// MessageId: 23185 (Request)
message Bds {
  int32 GDs = 6;
  int32 ODs = 15;
}

// MessageId: 24849 (Response)
message qds {
  ErrorCode ErrorCode = 5;
}

// MessageId: 20630 (Notify)
message ChangeWeatherNotify {
  int32 WeatherId = 8;
  bool QuickTimeChange = 9;
}

// MessageId: 24532 (Request)
message ChangeWeatherRequest {
  int32 WeatherId = 12;
}

// MessageId: 20775 (Response)
message ChangeWeatherResponse {
  ErrorCode ErrorCode = 11;
  int32 WeatherId = 7;
}

// MessageId: 16247 (Request)
message EntityFollowTrackRequest {
  int64 EntityId = 1;
}

// MessageId: 18580 (Response)
message EntityFollowTrackResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 16561 (Request)
message SetInitTagRequest {
  int64 EntityId = 7;
}

// MessageId: 26495 (Response)
message SetInitTagResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 23333 (Notify)
message PlayerRebackSceneNotify {
  int64 EntityId = 5;
}

// MessageId: 24776 (Request)
message DrownRequest {
}

// MessageId: 22966 (Push)
message DrownPush {
}

// MessageId: 29377 (Response)
message DrownResponse {
  ErrorCode ErrorCode = 5;
}

// MessageId: 29410 (Notify)
message DrownNotify {
}

// MessageId: 24700 (Request)
message DrownEndTeleportRequest {
}

// MessageId: 29247 (Push)
message DrownEndTeleportPush {
}

// MessageId: 23178 (Response)
message DrownEndTeleportResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 16203 (Request)
message MonsterDrownRequest {
  Vector Pos = 4;
}

// MessageId: 18912 (Push)
message MonsterDrownPush {
  Vector Pos = 9;
}

// MessageId: 20919 (Response)
message MonsterDrownResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 28154 (Notify)
message EnableNearbyTrackingNotify {
  repeated int64 EntityIds = 14;
  bool IsEnable = 11;
}

// MessageId: 25855 (Notify)
message SceneSubLevelsChangedNotify {
  repeated string SubLevelMaps = 6;
  repeated string VDs = 5;
  int32 TeleportEntityId = 14;
}

// MessageId: 15360 (Notify)
message Jds {
  repeated string HDs = 12;
  repeated string BDOLLAR_ = 2;
}

// MessageId: 15769 (Request)
message xDOLLAR_ {
  repeated string kDOLLAR_ = 12;
  repeated string DDOLLAR_ = 14;
}

// MessageId: 26541 (Response)
message UDOLLAR_ {
  ErrorCode ErrorCode = 6;
}

// MessageId: 25859 (Request)
message SceneLoadingFinishRequest {
  string SceneId = 13;
}

// MessageId: 17840 (Response)
message SceneLoadingFinishResponse {
  ErrorCode ErrorCode = 7;
}

// MessageId: 26946 (Notify)
message SceneLoadingTimeOutNotify {
}

// MessageId: 26276 (Notify)
message tms2 {
  int32 PlayerId = 1;
}

// MessageId: 27896 (Notify)
message RestoreEntityIdNotify {
  int32 ResetPointEntityId = 1;
}

// MessageId: 19348 (Request)
message SitChairRequest {
  int64 EntityId = 4;
  bool IsSitDown = 5;
  CombatCommon Data = 15;
  AnimationStateChangedRequest Request = 14;
}

// MessageId: 27147 (Response)
message SitChairResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 29543 (Request)
message nms1 {
  int64 EntityId = 1;
}

// MessageId: 29082 (Response)
message sms1 {
  ErrorCode ErrorCode = 1;
}

// MessageId: 18619 (Notify)
message SceneTestNotify {
  ErrorCode ErrorCode = 8;
  string ErrorMsg = 3;
  int32 PlayerId = 4;
}

// MessageId: 20240 (Notify)
message SceneChangeDataLayerNotify {
  repeated int32 LoadDataLayers = 4;
  repeated int32 UnloadDataLayers = 7;
  int32 EntityId = 14;
}

// MessageId: 29422 (Request)
message SwitchDataLayerRequest {
  int32 InstId = 2;
}

// MessageId: 26687 (Response)
message SwitchDataLayerResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 21057 (Request)
message ums {
  int64 EntityId = 10;
  int64 cKn = 12;
  int32 IsMulti = 15;
}

// MessageId: 28101 (Response)
message cms2 {
  ErrorCode ErrorCode = 4;
}

// MessageId: 22794 (Request)
message dms2 {
  int64 EntityId = 15;
}

// MessageId: 26394 (Response)
message mms2 {
  ErrorCode ErrorCode = 7;
}

// MessageId: 27851 (Request)
message SendHookDestroyRequest {
  int64 EntityId = 13;
}

// MessageId: 27676 (Response)
message SendHookDestroyResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 25820 (Request)
message RemoveAutonomousIdRequest {
  int64 EntityId = 6;
  bool IsControl = 10;
}

// MessageId: 28819 (Response)
message RemoveAutonomousIdResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 15015 (Notify)
message kfs {
  int64 EntityId = 4;
  int32 AutonomousId = 1;
}

message Jn_1 {
  int64 TargetId = 1;
  repeated int64 zQa = 2;
}

message gDOLLARs {
  int64 dDOLLARs = 1;
  repeated Jn_1 YQa = 2;
  bool CDOLLARs = 3;
}

// MessageId: 15592 (Request)
message ConnectorConnectEntityRequest {
  gDOLLARs gDOLLARs = 7;
}

// MessageId: 24469 (Response)
message ConnectorConnectEntityResponse {
  ErrorCode ErrorCode = 5;
}

// MessageId: 23114 (Notify)
message ConnectorConnectEntityNotify {
  repeated gDOLLARs fDOLLARs = 10;
}

// MessageId: 23679 (Request)
message RemoveEntityRequest {
  int64 EntityId = 8;
}

// MessageId: 26735 (Response)
message RemoveEntityResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 23790 (Request)
message DynamicPortalCreatorRequest {
  int64 EntityId = 13;
  bool ila2 = 9;
  int32 BulletId = 14;
}

// MessageId: 22719 (Response)
message DynamicPortalCreatorResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 17343 (Request)
message PassPortalRequest {
  int64 EntityId = 6;
  Vector Location = 15;
}

// MessageId: 16861 (Response)
message PassPortalResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 22702 (Notify)
message PortalReplaceNotify {
  int64 EntityId = 15;
  int64 Tr_ = 6;
}

// MessageId: 17652 (Request)
message AXl {
  int64 EntityId = 14;
  bool IsEnter = 4;
}

// MessageId: 29317 (Response)
message xXl {
  ErrorCode ErrorCode = 10;
}

message PlayerLocation {
  int32 IsTrace = 1;
  int32 PlayerId = 2;
  Vector Location = 3;
  float PosA = 4;
}

// MessageId: 28544 (Notify)
message SyncPlayerLocationNotify {
  repeated PlayerLocation PlayerLocation = 5;
}

// MessageId: 24465 (Request)
message cYl {
  int64 EntityId = 7;
  int32 Zlh = 8;
}

enum Zlh {
  Zlh_Midway = 0;
  Zlh_Endpoint = 1;
}

// MessageId: 21441 (Response)
message uYl {
  ErrorCode ErrorCode = 11;
}

enum Zn_3 {
  Zn__ItemRelateFoundationReason_Normal = 0;
  Zn__ItemRelateFoundationReason_Init = 1;
}

// MessageId: 24702 (Request)
message MatchOutletRequest {
  int64 EntityId = 14;
  int64 AccusedEntityId = 2;
  Vector Pos = 6;
  Rotator Rot = 15;
}

// MessageId: 29160 (Response)
message MatchOutletResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 24104 (Request)
message UpdateVoxelEnvRequest {
  int32 ServerCaveMode = 8;
}

// MessageId: 28434 (Response)
message UpdateVoxelEnvResponse {
  ErrorCode ErrorCode = 13;
  int32 ServerCaveMode = 14;
}

// MessageId: 19537 (Notify)
message ItemRelateFoundationNotify {
  int64 FoundationEntityId = 1;
  int64 Lr_2 = 13;
  int32 InstId = 11;
  int32 BIs = 8;
  int32 Reason = 10;
}

// MessageId: 17472 (Request)
message nzl2 {
}

// MessageId: 18763 (Response)
message szl2 {
  ErrorCode ErrorCode = 12;
  float PosX = 10;
  float PosY = 5;
  float PosZ = 2;
  float PosA = 8;
  int32 AreaId = 6;
}

// MessageId: 19189 (Notify)
message UpdateHookPointInfoByNotify {
  int64 wr_2 = 9;
  bool HookLockPointDisabled = 2;
}

enum EEntityFsmChangeType {
  EEntityFsmChangeType_Enter = 0;
  EEntityFsmChangeType_Exit = 1;
  EEntityFsmChangeType_BindStart = 3;
  EEntityFsmChangeType_BindEnd = 4;
  EEntityFsmChangeType_Task = 5;
}

enum EBulletCreateSource {
  EBulletCreateSource_NormalSource = 0;
  EBulletCreateSource_ReboundSource = 1;
}

enum es_ {
  es__LinkExitNormal = 0;
  es__LinkExitTimeout = 1;
}

enum Ho1 {
  Ho1_NewLinkStageNone = 0;
  Ho1_NewLinkStageLock = 1;
  Ho1_Accumulate = 2;
  Ho1_CTs = 3;
  Ho1_Burst = 4;
}

message FsmStateChangeContext {
  int32 FsmId = 1;
  int32 State = 2;
  int32 ChangeType = 3;
  int32 Index = 4;
  int64 ConstateId = 5;
}

message SkillContext {
  int32 SkillId = 1;
  int64 ConstateId = 2;
}

message MontageContext {
  int32 SkillId = 1;
  int32 MontageIndex = 2;
  int64 ConstateId = 3;
}

message AddBuffContext {
  int32 BuffHandle = 1;
  int64 ConstateId = 2;
}

message BulletContext {
  ActiveBulletHandle Handle = 1;
  int64 ConstateId = 2;
}

message HitInformation {
  int64 Originator = 1;
  int64 Id = 2;
  int64 TargetId = 3;
  int64 BulletId = 4;
  bool HasBeHitData = 5;
  Vector HitEffectPos = 6;
  Rotator HitEffectRotate = 7;
  bool IsShake = 8;
  Vector HitPos = 9;
  bool EnterFk = 10;
  bool IsHitWeakness = 11;
  bool IsTriggerCounterattack = 12;
  Rotator VictimRotation = 13;
  bool IsChangeVictimRotation = 14;
  string HitPart = 15;
  bool IsTriggerVisionCounterAttack = 16;
  int32 SkillId = 17;
  int32 FightState = 18;
  int32 BeHitAnim = 19;
  int32 Source = 20;
}

message jdc2 {
  int64 Id = 1;
  int32 FightState = 2;
  int32 Ndc1 = 3;
  int32 Vdc = 4;
}

message SkillNodeInfo {
  int32 SubProtocol = 1;
  int32 MontageIndex = 2;
  float SpeedRatio = 3;
  int32 SkillSingleId = 4;
  int32 SkillIndex = 5;
  string StartSection = 6;
  float StartTimeSeconds = 7;
}

// MessageId: 28487 (Request)
message SkillRequest {
  UseSkillInformation UseSkillInfo = 2;
  SkillNodeInfo SkillNodeInfos = 10;
}

// MessageId: 24818 (Response)
message SkillResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 25557 (Notify)
message SkillNotify {
  UseSkillInformation UseSkillInfo = 2;
  SkillNodeInfo SkillNodeInfos = 11;
}

// MessageId: 28899 (Request)
message UseSkillRequest {
  CombatCommon CombatCommon = 4;
  UseSkillInformation UseSkillInfo = 1;
  int32 SkillSingleId = 15;
  repeated int32 Na1 = 8;
}

// MessageId: 16631 (Response)
message UseSkillResponse {
  UseSkillInformation UseSkillInfo = 9;
  int32 SkillSingleId = 15;
  ErrorCode ErrorCode = 11;
}

// MessageId: 23020 (Notify)
message UseSkillNotify {
  CombatCommon CombatCommon = 7;
  UseSkillInformation UseSkillInfo = 14;
  int32 SkillSingleId = 6;
}

enum ts_1 {
  ts__EEndSkillReason_Default = 0;
  ts__EEndSkillReason_BeginOtherSkill = 1;
  ts__EEndSkillReason_BeHit = 2;
  ts__EEndSkillReason_BeCounter = 3;
}

message WSl {
  int64 EntityId = 1;
  int32 SkillId = 2;
  int64 BulletId = 3;
}

// MessageId: 26219 (Request)
message EndSkillRequest {
  CombatCommon CombatCommon = 12;
  UseSkillInformation UseSkillInfo = 4;
  int32 SkillSingleId = 11;
  int32 Reason = 8;
  WSl WSl = 15;
}

// MessageId: 20678 (Push)
message EndSkillPush {
  CombatCommon CombatCommon = 1;
  UseSkillInformation UseSkillInfo = 6;
  int32 SkillSingleId = 12;
  int32 Reason = 9;
  WSl WSl = 11;
}

// MessageId: 24891 (Response)
message EndSkillResponse {
  UseSkillInformation UseSkillInfo = 6;
  int32 SkillSingleId = 4;
  ErrorCode ErrorCode = 15;
}

// MessageId: 21025 (Notify)
message EndSkillNotify {
  CombatCommon CombatCommon = 6;
  UseSkillInformation UseSkillInfo = 5;
  int32 SkillSingleId = 8;
}

// MessageId: 17478 (Request)
message InterruptSkillInDelayRequest {
  int32 SkillId = 7;
}

// MessageId: 26330 (Push)
message InterruptSkillInDelayPush {
  int32 SkillId = 4;
}

// MessageId: 17241 (Response)
message InterruptSkillInDelayResponse {
  int32 SkillId = 14;
  ErrorCode ErrorCode = 8;
}

// MessageId: 27678 (Request)
message UseSkillFailRequest {
  int32 SkillId = 4;
}

// MessageId: 25456 (Push)
message UseSkillFailPush {
  int32 SkillId = 10;
}

// MessageId: 26549 (Response)
message UseSkillFailResponse {
  int32 SkillId = 6;
  DErrorResult Error = 3;
}

// MessageId: 26924 (Push)
message Fdc {
  jdc2 jdc = 8;
}

// MessageId: 20454 (Request)
message HitRequest {
  CombatCommon CombatCommon = 5;
  HitInformation HitInfo = 13;
  int64 mW_ = 6;
}

// MessageId: 27297 (Response)
message HitResponse {
  HitInformation HitInfo = 4;
  ErrorCode ErrorCode = 13;
}

// MessageId: 15955 (Notify)
message HitNotify {
  CombatCommon CombatCommon = 4;
  HitInformation HitInfo = 11;
}

// MessageId: 22356 (Request)
message HitEndRequest {
  CombatCommon CombatCommon = 15;
  int64 TargetId = 11;
}

// MessageId: 16791 (Push)
message HitEndPush {
  CombatCommon CombatCommon = 8;
  int64 TargetId = 1;
}

// MessageId: 18788 (Response)
message HitEndResponse {
  ErrorCode ErrorCode = 15;
}

message CaughtInfo {
  int64 Attacker = 1;
  int64 CaughtInfoId = 2;
  bool IsEnd = 3;
  int32 FightState = 4;
}

// MessageId: 20557 (Request)
message CaughtRequest {
  CaughtInfo Info = 9;
}

// MessageId: 21017 (Push)
message CaughtPush {
  CaughtInfo Info = 1;
}

// MessageId: 23465 (Response)
message CaughtResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 27364 (Notify)
message CaughtNotify {
  CaughtInfo Info = 10;
}

message ActiveBulletHandle {
  int32 PlayerId = 1;
  int32 HandleId = 2;
}

// MessageId: 29899 (Request)
message CreateBulletRequest {
  oneof R4s {
    ActiveBulletHandle BulletHandle = 6;
  }
  CombatCommon CombatCommon = 1;
  ActiveBulletHandle Handle = 14;
  int64 OwnerEntityId = 13;
  int64 BulletId = 3;
  int32 SkillId = 4;
  Vector Location = 2;
  Rotator Rotation = 8;
  int64 TargetId = 11;
  int64 SpawnEntityId = 7;
  int64 SpawnVelocityEntityId = 12;
  bool IsLocal = 15;
  int32 DtType = 5;
  Vector RandomPosOffset = 9;
  Vector RandomInitSpeedOffset = 10;
}

// MessageId: 19158 (Push)
message CreateBulletResponsePush {
  oneof R4s {
    ActiveBulletHandle BulletHandle = 5;
  }
  CombatCommon CombatCommon = 10;
  ActiveBulletHandle Handle = 12;
  int64 OwnerEntityId = 6;
  int64 BulletId = 14;
  int32 SkillId = 2;
  Vector Location = 11;
  Rotator Rotation = 8;
  int64 TargetId = 15;
  int64 SpawnEntityId = 9;
  int64 SpawnVelocityEntityId = 3;
  bool IsLocal = 7;
  int32 DtType = 4;
  Vector RandomPosOffset = 13;
  Vector RandomInitSpeedOffset = 1;
}

// MessageId: 17097 (Response)
message CreateBulletResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 15664 (Notify)
message CreateBulletNotify {
  oneof R4s {
    ActiveBulletHandle BulletHandle = 198;
  }
  oneof D4s1 {
    int64 rAs = 32;
  }
  CombatCommon CombatCommon = 73;
  ActiveBulletHandle Handle = 185;
  int64 OwnerEntityId = 118;
  int64 BulletId = 224;
  int32 SkillId = 186;
  Vector Location = 48;
  Rotator Rotation = 133;
  int64 TargetId = 158;
  int64 SpawnEntityId = 6;
  int64 SpawnVelocityEntityId = 189;
  Vector LocationEntityId = 117;
  int32 DtType = 22;
  Vector Size = 69;
  Vector RandomPosOffset = 71;
  Vector RandomInitSpeedOffset = 146;
}

// MessageId: 15700 (Request)
message DestroyBulletRequest {
  CombatCommon CombatCommon = 8;
  ActiveBulletHandle Handle = 14;
}

// MessageId: 29297 (Push)
message DestroyBulletResponsePush {
  CombatCommon CombatCommon = 15;
  ActiveBulletHandle Handle = 14;
}

// MessageId: 29359 (Response)
message DestroyBulletResponse {
  ErrorCode ErrorCode = 6;
}

// MessageId: 24146 (Notify)
message DestroyBulletNotify {
  CombatCommon CombatCommon = 3;
  ActiveBulletHandle Handle = 4;
  bool IsCreateSubBullet = 12;
}

message ModifyBulletParams {
  CombatCommon CombatCommon = 1;
  ActiveBulletHandle Handle = 2;
  int64 TargetId = 3;
}

// MessageId: 28972 (Request)
message ModifyBulletParamsRequest {
  ModifyBulletParams ModifyBulletParams = 3;
}

// MessageId: 24809 (Push)
message ModifyBulletParamsPush {
  ModifyBulletParams ModifyBulletParams = 7;
}

// MessageId: 18854 (Response)
message ModifyBulletParamsResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 20906 (Notify)
message ModifyBulletParamsNotify {
  ModifyBulletParams ModifyBulletParams = 14;
}

enum DamageSourceType {
  DamageSourceType_FromBullet = 0;
  DamageSourceType_FromEffect = 1;
}

message DamageContext {
  oneof A4s {
    int32 SourceType = 1;
  }
  oneof P4s1 {
    int64 BulletId = 2;
  }
  oneof U4s {
    int32 SkillId = 4;
  }
  oneof vtc {
    int64 mW_ = 5;
  }
  repeated int32 BulletTags = 3;
}

// MessageId: 29427 (Request)
message DamageExecuteRequest {
  int64 DamageId = 6;
  int32 SkillLevel = 1;
  int64 AttackerEntityId = 8;
  int64 TargetEntityId = 14;
  bool IsAddEnergy = 13;
  bool IsCounterAttack = 2;
  bool ForceCritical = 7;
  bool IsBlocked = 15;
  int32 PartIndex = 4;
  int64 CounterSkillMessageId = 5;
  DamageContext DamageContext = 9;
  int32 RandomSeed = 11;
}

// MessageId: 15249 (Response)
message DamageExecuteResponse {
  ErrorCode ErrorCode = 9;
  int64 AttackerEntityId = 6;
  int64 TargetEntityId = 8;
  int32 Damage = 5;
  int32 PartIndex = 7;
  bool IsCrit = 11;
  bool KilledTarget = 14;
  int32 ShieldCoverDamage = 12;
  int32 ImmuneType = 4;
  int32 eK_ = 1;
  int32 jQ_ = 15;
}

// MessageId: 15259 (Notify)
message DamageExecuteNotify {
  int64 DamageId = 7;
  int64 AttackerEntityId = 15;
  int64 TargetEntityId = 9;
  int32 Damage = 8;
  int32 PartIndex = 2;
  bool IsCrit = 6;
  bool KilledTarget = 11;
  int32 ShieldCoverDamage = 3;
  int32 SkillLevel = 4;
  DamageContext DamageContext = 14;
  int32 ImmuneType = 12;
  int32 eK_ = 5;
  int32 jQ_ = 13;
}

// MessageId: 23525 (Request)
message PassiveSkillAddRequest {
  int64 PassiveSkillId = 10;
  int64 TargetEntityId = 13;
}

// MessageId: 28995 (Push)
message PassiveSkillAddPush {
  int64 PassiveSkillId = 1;
  int64 TargetEntityId = 8;
}

// MessageId: 21719 (Response)
message PassiveSkillAddResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 26670 (Request)
message PassiveSkillRemoveRequest {
  int64 PassiveSkillId = 12;
  int64 TargetEntityId = 4;
}

// MessageId: 29573 (Push)
message PassiveSkillRemovePush {
  int64 PassiveSkillId = 11;
  int64 TargetEntityId = 3;
}

// MessageId: 28805 (Response)
message PassiveSkillRemoveResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 27995 (Notify)
message PassiveSkillAddNotify {
  int64 EntityId = 10;
  repeated PassiveSkillItemPb PassiveSkillItemPbList = 4;
}

// MessageId: 15005 (Notify)
message PassiveSkillRemoveNotify {
  int64 EntityId = 13;
  repeated int64 SkillIdList = 11;
}

// MessageId: 24190 (Request)
message EnterViewDirectionRequest {
}

// MessageId: 27028 (Push)
message EnterViewDirectionPush {
}

// MessageId: 24890 (Response)
message EnterViewDirectionResponse {
  ErrorCode ErrorCode = 7;
}

// MessageId: 21215 (Request)
message ExitViewDirectionRequest {
}

// MessageId: 26471 (Push)
message ExitViewDirectionPush {
}

// MessageId: 23739 (Response)
message ExitViewDirectionResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 18214 (Request)
message TriggerExitSkillRequest {
  int64 EnterEntityId = 9;
  int64 LeaveEntityId = 1;
}

// MessageId: 17632 (Push)
message TriggerExitSkillPush {
  int64 EnterEntityId = 11;
  int64 LeaveEntityId = 8;
}

// MessageId: 24081 (Response)
message TriggerExitSkillResponse {
  ErrorCode ErrorCode = 6;
}

message MonsterInfo {
  int32 MonsterId = 1;
  int32 Num = 2;
  int64 GenId = 3;
}

enum BattleResult {
  BattleResult_AllKill = 0;
  BattleResult_Death = 1;
  BattleResult_Run = 2;
  BattleResult_mEs = 3;
}

enum MonsterResult {
  MonsterResult_MonsterResultDeath = 0;
  MonsterResult_MonsterResultRun = 1;
}

// MessageId: 18505 (Push)
message Cis {
  int32 RoleId = 13;
  int32 Result = 2;
}

// MessageId: 27797 (Request)
message gis {
  int32 RoleId = 6;
  int32 Result = 4;
}

// MessageId: 22077 (Response)
message fis {
}

message SkillReport {
  int32 SkillId = 1;
  int32 UseCount = 2;
  int32 HitCount = 3;
  int32 ExpectHitCount = 4;
  int32 RealHitCount = 5;
  int64 Damage = 6;
}

// MessageId: 24838 (Push)
message InstFightEndPush {
  int32 InstId = 1;
  string FightId = 3;
  int32 CostTime = 5;
  int64 AccDamage = 6;
  int64 AccShieldDamage = 7;
  int64 AccSelfDamage = 9;
  int64 AccSkillHeal = 11;
  int64 AccItemHeal = 15;
  int32 StopTimes = 14;
  int32 DamageMax = 10;
  int32 ComboMax = 8;
  int32 AccDodgaTimes = 4;
  int32 DodgeSuccTimes = 13;
}

enum B4s {
  B4s_nAs = 0;
  B4s_GameplayEffect = 1;
  B4s_PAs = 2;
}

// MessageId: 15846 (Request)
message SwitchBattleModeRequest {
  bool Client = 9;
  int32 ClientControllerModule = 6;
}

// MessageId: 23344 (Response)
message SwitchBattleModeResponse {
  bool Client = 15;
}

// MessageId: 26552 (Notify)
message SwitchBattleModeNotify {
  repeated int32 ServerControllerModules = 15;
  repeated int32 ClientControllerModules = 9;
}

// MessageId: 23710 (Notify)
message BattleLogNotify {
  string Log = 15;
}

// MessageId: 29733 (Request)
message LandingDamageRequest {
  int64 EntityId = 8;
  float SpeedZ = 14;
  int32 TimeExceeding = 3;
}

// MessageId: 26606 (Response)
message LandingDamageResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 17344 (Request)
message EntityIsVisibleRequest {
  int64 Id = 11;
  bool IsVisible = 5;
  CombatCommon CombatCommon = 4;
}

// MessageId: 28409 (Push)
message EntityIsVisiblePush {
  int64 Id = 3;
  bool IsVisible = 2;
  CombatCommon CombatCommon = 9;
}

// MessageId: 27993 (Response)
message EntityIsVisibleResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 17272 (Notify)
message EntityIsVisibleNotify {
  int64 Id = 1;
  bool IsVisible = 14;
  CombatCommon CombatCommon = 15;
}

// MessageId: 24959 (Request)
message ActorVisibleRequest {
  int64 Id = 7;
  bool IsActorVisible = 9;
}

// MessageId: 23847 (Push)
message ActorVisiblePush {
  int64 Id = 1;
  bool IsActorVisible = 13;
}

// MessageId: 16383 (Response)
message ActorVisibleResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 27065 (Notify)
message ActorVisibleNotify {
  int64 Id = 9;
  bool IsActorVisible = 4;
}

// MessageId: 16183 (Request)
message SwitchCharacterStateRequest {
  CombatCommon CombatCommon = 5;
  int64 Id = 13;
  int32 OldState = 4;
  int32 NewState = 9;
}

// MessageId: 22519 (Push)
message SwitchCharacterStatePush {
  CombatCommon CombatCommon = 2;
  int64 Id = 1;
  int32 OldState = 6;
  int32 NewState = 3;
}

// MessageId: 25608 (Response)
message SwitchCharacterStateResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 20268 (Notify)
message SwitchCharacterStateNotify {
  CombatCommon CombatCommon = 11;
  int64 Id = 9;
  int32 OldState = 7;
  int32 NewState = 8;
}

// MessageId: 28817 (Request)
message BattleStateChangeRequest {
  int64 EntityId = 15;
  bool InBattle = 4;
}

// MessageId: 25122 (Push)
message BattleStateChangePush {
  int64 EntityId = 7;
  bool InBattle = 13;
}

// MessageId: 21944 (Response)
message BattleStateChangeResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 22042 (Notify)
message BattleStateChangeNotify {
  int64 EntityId = 9;
  bool InBattle = 6;
}

// MessageId: 27878 (Request)
message ToughCalcExtraRatioChangeRequest {
  int64 Id = 2;
  int32 Duration = 3;
}

// MessageId: 18466 (Push)
message ToughCalcExtraRatioChangePush {
  int64 Id = 14;
  int32 Duration = 1;
}

// MessageId: 17416 (Response)
message ToughCalcExtraRatioChangeResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 27953 (Request)
message MonsterBoomRequest {
  int32 Delay = 6;
}

// MessageId: 25416 (Push)
message MonsterBoomPush {
  int32 Delay = 5;
}

// MessageId: 21624 (Response)
message MonsterBoomResponse {
  ErrorCode ErrorCode = 11;
}

message EntityBattleTagInfo {
  int32 TagId = 1;
  int32 Count = 2;
}

// MessageId: 15019 (Request)
message EntityBattleInfoRequest {
  int64 EntityId = 10;
}

// MessageId: 16752 (Response)
message EntityBattleInfoResponse {
  int64 EntityId = 14;
  ErrorCode ErrorCode = 6;
  FightBuffComponentPb FightBuffComponentPb = 12;
  repeated EntityBattleTagInfo EntityBattleTagInfo = 15;
  repeated GameplayAttributeData Attributes = 10;
  repeated FormationAttr FormationAttrs = 3;
  PartComponentPb PartComponentPb = 13;
  repeated AiHateEntity HateList = 1;
  ShieldComponentPb ShieldComponentPb = 5;
  repeated EntityBattleTagInfo PlayerTagInfos = 2;
  string Rr_2 = 8;
}

// MessageId: 25894 (Request)
message MontagePlayRequest {
  int32 MontageIndex = 12;
}

// MessageId: 27122 (Response)
message MontagePlayResponse {
  int32 SkillId = 15;
  int32 MontageIndex = 11;
  DErrorResult Error = 8;
}

// MessageId: 27533 (Notify)
message MontagePlayNotify {
  int32 SkillId = 13;
  int32 MontageIndex = 5;
}

// MessageId: 27040 (Request)
message ANStartRequest {
  int32 SkillId = 8;
  int32 MontageIndex = 1;
  int32 AnIndex = 12;
}

// MessageId: 24772 (Push)
message ANStartPush {
  int32 SkillId = 8;
  int32 MontageIndex = 1;
  int32 AnIndex = 9;
}

// MessageId: 21182 (Response)
message ANStartResponse {
  int32 SkillId = 11;
  int32 MontageIndex = 15;
  int32 AnIndex = 9;
  DErrorResult Error = 5;
}

// MessageId: 16397 (Notify)
message ANStartNotify {
  int32 SkillId = 15;
  int32 MontageIndex = 11;
  int32 AnIndex = 12;
}

enum EDamageImmune {
  EDamageImmune_Default = 0;
  EDamageImmune_Invincible = 1;
  EDamageImmune_BuffEffectElement = 2;
  EDamageImmune_BulletCurNoCtrl = 3;
  EDamageImmune_VehiclePassenger = 4;
  EDamageImmune_FishBoat = 5;
}

message CharacterBattleStateInfo {
  int64 EntityId = 1;
  bool InBattle = 2;
}

// MessageId: 22036 (Notify)
message PushContextIdNotify {
  int64 Id = 6;
}

// MessageId: 22839 (Notify)
message CharacterBattleStateChangeNotify {
  repeated CharacterBattleStateInfo CharacterBattleStateInfo = 13;
}

// MessageId: 20406 (Notify)
message PlayerBattleStateChangeNotify {
  int32 PlayerId = 5;
  bool InBattle = 10;
}

enum EShieldUpdateType {
  EShieldUpdateType_EShieldUpdateTypeAdd = 0;
  EShieldUpdateType_EShieldUpdateTypeDel = 1;
  EShieldUpdateType_EShieldUpdateTypeModify = 2;
}

message ShieldUpdateInfo {
  int32 Handle = 1;
  int32 ConfigId = 2;
  int32 ShieldValue = 3;
  int32 UpdateType = 4;
}

// MessageId: 22563 (Notify)
message ShieldUpdateNotify {
  repeated ShieldUpdateInfo Shields = 13;
}

// MessageId: 16379 (Notify)
message BattleScoreNotify {
  int32 ScoreId = 14;
  int32 Score = 6;
}

// MessageId: 25548 (Notify)
message BattleScoreEnableNotify {
  int32 ScoreId = 3;
  bool Enable = 12;
}

// MessageId: 29350 (Request)
message RoleTagChangeRequest {
  int32 TagId = 7;
  int32 TagCount = 6;
}

// MessageId: 26769 (Push)
message RoleTagChangePush {
  int32 TagId = 9;
  int32 TagCount = 13;
}

// MessageId: 23879 (Response)
message RoleTagChangeResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 24400 (Request)
message GameplayCueRequest {
  int64 GameplayCueId = 14;
}

// MessageId: 19657 (Push)
message GameplayCuePush {
  int64 GameplayCueId = 3;
}

// MessageId: 26696 (Response)
message GameplayCueResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 20312 (Notify)
message GameplayCueNotify {
  int64 GameplayCueId = 9;
}

// MessageId: 18012 (Notify)
message InconsistentCombatNotify {
  bool Result = 5;
  int32 ChangeList = 4;
}

// MessageId: 28564 (Notify)
message ExecuteQteNotify {
  int64 DownEntityId = 3;
  int64 UpEntityId = 2;
  int32 FnvHash = 12;
}

// MessageId: 21737 (Request)
message ExecuteQteRequest {
  int64 DownEntityId = 4;
  int64 UpEntityId = 1;
  int32 FnvHash = 2;
}

// MessageId: 29932 (Push)
message ExecuteQtePush {
  int64 DownEntityId = 15;
  int64 UpEntityId = 12;
  int32 FnvHash = 4;
}

// MessageId: 24230 (Response)
message ExecuteQteResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 28168 (Notify)
message HandleLinkingStateNotify {
  int64 ConstateId = 15;
  int32 PlayerId = 5;
  int32 Status = 8;
  int64 TimeStamp = 4;
}

// MessageId: 20198 (Notify)
message HandleLinkExitNotify {
  int32 Reason = 9;
  int32 PlayerId = 6;
  int32 Status = 8;
}

// MessageId: 21035 (Notify)
message NewLinkStateNotify {
  int32 LinkConfigId = 11;
  int32 Current = 8;
  int32 PlayerId = 13;
}

// MessageId: 22284 (Push)
message Vo1 {
}

// MessageId: 20257 (Request)
message Kpl {
  CharacterAttachInfo CharacterAttachInfo = 15;
  int64 jql = 3;
}

// MessageId: 23455 (Notify)
message AddCombineEntitiesRelationNotify {
  CharacterAttachInfo CharacterAttachInfo = 4;
  int64 jql = 2;
}

// MessageId: 19135 (Notify)
message RemoveCombineRelationNotify {
  int64 xr_ = 8;
  int64 jql = 4;
}

// MessageId: 18170 (Response)
message izl2 {
  ErrorCode ErrorCode = 11;
}

// MessageId: 22422 (Request)
message DOLLARpl {
  int64 Wql = 6;
  int64 Qql = 10;
}

// MessageId: 25733 (Response)
message azl1 {
  ErrorCode ErrorCode = 7;
}

// MessageId: 19515 (Notify)
message Wul {
  int64 TargetEntityId = 4;
  int32 Camp = 5;
}

// MessageId: 28640 (Push)
message vu_ {
  string Name = 8;
  int32 Path = 15;
  float SpeedRatio = 9;
  string StartSection = 1;
  float StartTimeSeconds = 11;
}

message FormationAttr {
  int32 AttrId = 1;
  int32 Ratio = 2;
  int32 BaseMaxValue = 3;
  int32 MaxValue = 4;
  int32 CurrentValue = 5;
}

// MessageId: 15484 (Notify)
message FormationAttrNotify {
  int64 Duration = 5;
  repeated FormationAttr FormationAttrs = 1;
}

// MessageId: 25135 (Request)
message FormationAttrRequest {
  int64 Duration = 13;
  repeated FormationAttr FormationAttrs = 3;
}

// MessageId: 28568 (Response)
message FormationAttrResponse {
  ErrorCode ErrorCode = 9;
}

message RecoverPropFromServer {
  int32 AttrId = 1;
  int32 Ratio = 2;
  int32 MaxValue = 4;
  int32 ValueIncrement = 5;
}

// MessageId: 28386 (Notify)
message RecoverPropChangedNotify {
  int64 Id = 11;
  repeated RecoverPropFromServer Attributes = 15;
  int64 Duration = 3;
}

// MessageId: 25391 (Request)
message FragileChangeRequest {
  int64 EntityId = 1;
  bool Flag = 11;
}

// MessageId: 17771 (Response)
message FragileChangeResponse {
  ErrorCode ErrorCode = 11;
}

enum F4s {
  F4s_ECheatInputDefault = 0;
  F4s_ECheatInputDel = 1;
  F4s_ECheatInputEnd = 2;
}


// MessageId: 22053 (Request)
message CheatInputRequest {
  int32 Type = 3;
  int32 AoeDestroyEnemyRange = 1;
  repeated int64 VAs = 15;
}


// MessageId: 17212 (Response)
message CheatInputResponse {
  ErrorCode ErrorCode = 10;
}


message DamageRecordEntity {
  int64 EntityId = 1;
  repeated int64 BuffIds = 2;
  repeated GameplayAttributeData Attr = 3;
  repeated GameplayAttributeData AttrSnapshot = 4;
}


// MessageId: 29121 (Notify)
message DamageRecordNotify {
  int64 TimestampMs = 6;
  int64 DamageConfId = 7;
  int32 DamageValue = 11;
  int32 SkillId = 3;
  int32 SkillLevel = 14;
  int64 BulletId = 15;
  int32 DamageSourceType = 2;
  bool IsCritical = 8;
  DamageRecordEntity Attacker = 1;
  DamageRecordEntity JAs2 = 12;
}


message is_1 {
  int64 EntityId = 1;
  int32 ConfigId = 2;
  repeated int64 BuffIds = 3;
  repeated GameplayAttributeData Attr = 4;
}


// MessageId: 21644 (Notify)
message ifl {
  int64 TimestampMs = 2;
  repeated is_1 Entities = 6;
}


// MessageId: 27732 (Request)
message GZn {
  bool Enable = 2;
  int32 Kga = 6;
}


// MessageId: 16886 (Response)
message EnableDamageRecordResponse {
  ErrorCode ErrorCode = 11;
}


// MessageId: 23804 (Notify)
message GmVoxelInfoNotify {
  float CellSize = 1;
  repeated VoxelSpan Spans = 10;
}


// MessageId: 20107 (Notify)
message GmIsOverlapNotify {
  float CellSize = 7;
  VoxelSpan Box = 6;
  bool IsOverlap = 14;
}


message VoxelSpan {
  float X = 1;
  float Y = 2;
  float Smin = 3;
  float Smax = 4;
}


// MessageId: 16296 (Request)
message OutputDebugInfoRequest {
  string ClientInfo = 1;
}


// MessageId: 15402 (Response)
message OutputDebugInfoResponse {
}


// MessageId: 18866 (Notify)
message RequestOutputDebugNotify {
}


// MessageId: 17780 (Notify)
message UploadEventNotify {
}


// MessageId: 25343 (Notify)
message u1c {
  ErrorCode ErrorCode = 9;
  string GNs = 8;
}

// MessageId: 26819 (Push)
message TimeStopPush {
  float TimeDilation = 14;
}

// MessageId: 15436 (Request)
message TsAnimNotifyStateAbsoluteTimeStopRequest {
  bool Flag = 9;
  int32 Duration = 12;
}

// MessageId: 28789 (Push)
message TsAnimNotifyStateAbsoluteTimeStopPush {
  bool Flag = 11;
  int32 Duration = 1;
}

// MessageId: 19817 (Response)
message TsAnimNotifyStateAbsoluteTimeStopResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 27842 (Request)
message RTimeStopRequest {
  bool Flag = 9;
  bool sPs1 = 10;
  int32 Duration = 7;
}

// MessageId: 27107 (Push)
message RTimeStopPush {
  bool Flag = 7;
  bool sPs1 = 11;
  int32 Duration = 2;
}

// MessageId: 27773 (Response)
message RTimeStopResponse {
  ErrorCode ErrorCode = 5;
}

// MessageId: 17361 (Push)
message EntityTimeDilationPush {
  int64 EntityId = 10;
  float TimeDilation = 13;
}

// MessageId: 27980 (Request)
message R4n {
  bool Flag = 9;
  int32 Duration = 1;
}

// MessageId: 17400 (Push)
message Fe_ {
  bool Flag = 6;
  int32 Duration = 5;
}

// MessageId: 22557 (Response)
message kCs {
  ErrorCode ErrorCode = 15;
}

enum SwitchRoleType {
  SwitchRoleType_SignleWorld = 0;
  SwitchRoleType_MultiWorld = 1;
  SwitchRoleType_FbInstance = 2;
}

message FormationRoleInfo {
  int32 RoleId = 1;
  int32 MaxHp = 2;
  int32 CurHp = 3;
  int32 Level = 4;
  int32 RoleSkinId = 5;
}

message FightFormationNotifyInfo {
  int32 FormationId = 1;
  int32 CurRole = 2;
  repeated FormationRoleInfo RoleInfos = 3;
  bool IsCurrent = 4;
}

message FightFormation {
  int32 FormationId = 1;
  int32 CurRole = 2;
  repeated int32 RoleIds = 3;
  bool IsCurrent = 4;
}

// MessageId: 22262 (Request)
message SwitchRoleRequest {
  int32 RoleId = 10;
  int32 SwitchType = 7;
}

// MessageId: 22120 (Response)
message SwitchRoleResponse {
  ErrorCode ErrorCode = 7;
  int32 RoleId = 4;
}

// MessageId: 26488 (Notify)
message SwitchRoleNotify {
  int32 PlayerId = 13;
  int64 UpEntityId = 6;
  int64 DownEntityId = 8;
}

// MessageId: 24933 (Notify)
message DieSwitchRoleNotify {
  int32 CurRoleId = 7;
}

// MessageId: 16531 (Request)
message UpdateFormationRequest {
  repeated FightFormation Formations = 8;
}

// MessageId: 24377 (Response)
message UpdateFormationResponse {
  ErrorCode ErrorCode = 4;
  FightFormation Formation = 10;
}

message PlayerFightFormations {
  int32 PlayerId = 1;
  repeated FightFormationNotifyInfo Formations = 2;
}

// MessageId: 18530 (Notify)
message UpdateFormationNotify {
  repeated PlayerFightFormations PlayersFormations = 13;
}

// MessageId: 29803 (Request)
message UpdateFightRoleRequest {
  int32 CurRoleId = 6;
  repeated int32 RoleIds = 8;
}

// MessageId: 21920 (Response)
message UpdateFightRoleResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 15905 (Notify)
message FormationAutoAddRoleNotify {
  repeated int32 Roles = 8;
  int32 FormationId = 3;
}

// MessageId: 27975 (Request)
message GetFormationDataRequest {
}

// MessageId: 21403 (Response)
message GetFormationDataResponse {
  ErrorCode ErrorCode = 8;
  repeated FightFormation Formations = 9;
}

// MessageId: 21545 (Notify)
message FormationUpdateNotify {
  repeated int32 RemoveFormationIds = 1;
  repeated FightFormation Formation = 4;
  int32 FormationId = 15;
}

// MessageId: 18752 (Request)
message ClientCurrentRoleReportRequest {
  int32 PlayerId = 3;
  int32 CurrentRoleId = 12;
  int64 CurrentEntityId = 4;
}

// MessageId: 15650 (Push)
message ClientCurrentRoleReportPush {
  int32 PlayerId = 7;
  int32 CurrentRoleId = 13;
  int64 CurrentEntityId = 8;
}

// MessageId: 20851 (Response)
message ClientCurrentRoleReportResponse {
  int32 PlayerId = 5;
  int64 CurrentEntityId = 11;
  ErrorCode ErrorCode = 4;
}

message H4s {
  oneof DOLLARua {
    jua Nua = 3;
  }
  oneof Hua {
    jua Fua = 4;
  }
  int32 RoleId = 1;
  int32 kua = 2;
  int32 Pr_2 = 5;
  int32 PhantomLevel = 6;
}

message jua {
}

// MessageId: 27442 (Push)
message ScreenShotTakenPush {
}

enum ControlType {
  ControlType_Unknown = 0;
  ControlType_TemporaryTeleportCtrl = 1;
}

message ControlTemporaryTeleportParam {
  repeated int64 TemporaryTeleportIds = 1;
}

message ControlParam {
  oneof K4s {
    ControlTemporaryTeleportParam TemporaryTeleportParam = 2;
  }
  int32 ControlType = 1;
}

// MessageId: 15579 (Notify)
message ControlInfoNotify {
  repeated ControlParam ForbidList = 7;
}

// MessageId: 22279 (Notify)
message cZn {
  repeated ControlParam ForbidList = 1;
}

// MessageId: 26754 (Notify)
message dZn {
  repeated ControlParam ForbidList = 13;
}

message SingleItemInfo {
  int32 ItemId = 1;
  int32 ItemNum = 2;
}

message CookerInfo {
  int32 CookingLevel = 1;
  int32 TotalProficiencies = 2;
}

message CookingData {
  int32 Id = 1;
  int32 CookCount = 2;
  int32 LastRoleId = 3;
  int32 LimitTotalCount = 4;
  int32 LimitedCount = 5;
  int64 ExistStartTime = 6;
  int64 ExistEndTime = 7;
}

message CookingDataByServerConfig {
  int32 Id = 1;
  int64 ExistStartTime = 2;
  int64 ExistEndTime = 3;
}

message MachiningData {
  int32 Id = 1;
  bool LockState = 2;
  repeated int32 vPs = 3;
  repeated int32 pPs = 4;
}

// MessageId: 20059 (Request)
message SendFixToolRequest {
  int32 RepairId = 6;
  int64 EntityId = 8;
}

// MessageId: 19633 (Response)
message SendFixToolResponse {
  ErrorCode ErrorCode = 6;
  int64 EntityId = 12;
}

// MessageId: 18719 (Request)
message SendCookFormulaRequest {
  int32 CookFormulaId = 12;
}

// MessageId: 24634 (Response)
message SendCookFormulaResponse {
  ErrorCode ErrorCode = 13;
  int32 CookFormulaId = 10;
}

// MessageId: 26097 (Request)
message SendCookFoodRequest {
  int32 Id = 9;
  int32 RoleId = 6;
  int32 CookCount = 2;
  int64 InteractEntityId = 4;
}

// MessageId: 16312 (Response)
message SendCookFoodResponse {
  ErrorCode ErrorCode = 15;
  int32 Id = 12;
  repeated SingleItemInfo ItemInfos = 3;
  int32 ActiveSkillType = 14;
  repeated SingleItemInfo ExtraItemInfos = 8;
  int32 RoleId = 6;
}

// MessageId: 24242 (Request)
message FoodProcessRequest {
  int32 Id = 13;
  repeated SingleItemInfo PrimaryFood = 5;
  int32 CookCount = 7;
  int64 InteractEntityId = 6;
}

// MessageId: 20957 (Response)
message FoodProcessResponse {
  ErrorCode ErrorCode = 6;
  int32 Id = 12;
  repeated SingleItemInfo FinalFood = 10;
  bool LockState = 5;
  repeated int32 UnlockParam = 4;
}

// MessageId: 15398 (Request)
message SendCertificateLevelRewardRequest {
}

// MessageId: 19076 (Response)
message SendCertificateLevelRewardResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 23136 (Notify)
message UpdateCookerInfoNotify {
  CookerInfo CookerInfo = 3;
}

// MessageId: 28767 (Notify)
message UpdateCookingAndMachiningDataNotify {
  repeated CookingData CookingData = 8;
  repeated MachiningData MachiningData = 9;
}

// MessageId: 25433 (Request)
message SendCookingDataRequest {
}

// MessageId: 23521 (Response)
message SendCookingDataResponse {
  ErrorCode ErrorCode = 12;
  CookerInfo CookerInfo = 5;
  repeated CookingData CookingData = 15;
  repeated MachiningData MachiningData = 2;
  repeated CookingDataByServerConfig CookingDataByServerConfig = 13;
  int64 LimitRefreshTime = 3;
}

// MessageId: 25904 (Request)
message SendInteractiveUpdateRequest {
  int32 InteractionId = 14;
}

// MessageId: 27585 (Response)
message SendInteractiveUpdateResponse {
  ErrorCode ErrorCode = 4;
  int32 InteractionId = 12;
}

message DropBagItemInfo {
  int32 ShowPlanId = 1;
  int32 ItemId = 2;
  int32 ItemCount = 3;
}

// MessageId: 25043 (Notify)
message DropInBagNotify {
  int32 DropId = 10;
  repeated DropBagItemInfo DropItemInfos = 13;
}

message rs_2 {
  string ClientTime = 1;
  int32 Ur_2 = 2;
  int32 ItemType = 3;
  int32 ItemCount = 4;
  int32 Dr_1 = 5;
  int32 Br_ = 6;
  int32 kr_ = 7;
  int32 qr_2 = 8;
  int32 Or_2 = 9;
  int32 Gr_3 = 10;
  int32 Fr_1 = 11;
  int32 Nr_1 = 12;
  int32 Vr_2 = 13;
  int64 jr_2 = 14;
  int64 Hr_1 = 15;
}

// MessageId: 20637 (Request)
message PickUpFightDropRequest {
  int64 EntityId = 2;
  rs_2 DOLLARr_ = 9;
}

// MessageId: 26006 (Response)
message PickUpFightDropResponse {
  ErrorCode ErrorCode = 4;
}

enum ElevatorState {
  ElevatorState_End = 0;
  ElevatorState_f6n = 1;
  ElevatorState_Reverse = 2;
}

// MessageId: 18883 (Request)
message ElevatorStateChangeRequest {
  int64 EntityId = 10;
  ElevatorState State = 6;
  int32 TargetFloor = 5;
}

// MessageId: 27341 (Response)
message ElevatorStateChangeResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 25311 (Notify)
message ElevatorMoveNotify {
  int64 EntityId = 7;
  int32 Location = 11;
}

message EnergyInfo {
  int32 EnergyCount = 1;
  int32 LastRenewEnergyTime = 2;
  int32 EnergyType = 3;
}

// MessageId: 23662 (Notify)
message EnergyUpdateNotify {
  repeated EnergyInfo UpdateInfo = 3;
}

// MessageId: 18822 (Request)
message EnergySyncRequest {
  repeated int32 EnergyTypes = 8;
}

// MessageId: 19380 (Response)
message EnergySyncResponse {
  ErrorCode ErrorCode = 9;
  repeated EnergyInfo SyncInfo = 3;
}

// MessageId: 25296 (Request)
message ExploreProgressRequest {
  repeated int32 AreaIds = 10;
}

message AreaExploreInfo {
  int32 AreaId = 1;
  repeated OneExploreItem ExploreProgress = 2;
  int32 ExplorePercent = 3;
}

message OneExploreItem {
  int32 ExploreProgressId = 1;
  int32 ExplorePercent = 2;
  int32 CurCount = 3;
  int32 TotalCount = 4;
  bool IsUnlocked = 5;
}

// MessageId: 28021 (Response)
message ExploreProgressResponse {
  repeated AreaExploreInfo AreaProgress = 12;
}

// MessageId: 24897 (Request)
message ExploreScoreRewardRequest {
  int32 AreaId = 5;
  int32 ExploreProgress = 9;
}

// MessageId: 18056 (Response)
message ExploreScoreRewardResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 21358 (Request)
message CountryExploreScoreInfoRequest {
  int32 CountryId = 15;
}

// MessageId: 19069 (Response)
message CountryExploreScoreInfoResponse {
  int32 ExploreScore = 2;
  repeated CountryExploreScoreReceived CountryExploreScoreReceived = 12;
}

message CountryExploreScoreReceived {
  int32 AreaId = 1;
  repeated int32 ExploreProgress = 2;
}

message CountryExploreLevel {
  int32 CountryId = 1;
  int32 ExploreLevel = 2;
}

// MessageId: 15784 (Notify)
message ExploreLevelNotify {
  repeated CountryExploreLevel CountryExploreLevel = 2;
}

// MessageId: 27537 (Request)
message ReceiveAreaStageRewardAsyncRequest {
  repeated int32 AreaStageRewardDataList = 4;
}

// MessageId: 15989 (Response)
message ReceiveAreaStageRewardAsyncResponse {
  repeated int32 AreaStageRewardDataList = 13;
}

// MessageId: 16755 (Notify)
message ExploreProgressRewardIdsNotify {
  repeated int32 AreaStageRewardDataList = 4;
}

message DetectionEntityPosInfo {
  Vector Pos = 1;
  int32 ConfigId = 2;
}

// MessageId: 19049 (Notify)
message ExploreToolUpdateNotify {
  int32 SkillId = 8;
}

// MessageId: 27899 (Notify)
message ExploreToolAllNotify {
  repeated int32 SkillList = 8;
  int32 ExploreSkill = 6;
  repeated int32 NewUnlock = 11;
}

enum o6s1 {
  o6s_Explore = 0;
  o6s_n6s = 1;
}

// MessageId: 17503 (Notify)
message ExploreSkillRouletteUpdateNotify {
  repeated ExploreSkillRoulette RouletteInfo = 9;
}

// MessageId: 16152 (Request)
message VisionExploreSkillSetRequest {
  int32 SkillId = 3;
  bool T0a = 4;
}

// MessageId: 20310 (Response)
message VisionExploreSkillSetResponse {
  ErrorCode ErrorCode = 15;
  int32 SkillId = 11;
}

// MessageId: 19398 (Notify)
message VisionExploreSkillNotify {
  int32 ExploreSkill = 4;
}

message ExploreSkillRoulette {
  repeated int32 SkillIds = 1;
  int32 ExtraItemId = 2;
}

// MessageId: 24314 (Request)
message ExploreSkillRouletteSetRequest {
  repeated ExploreSkillRoulette SkillRoulettes = 4;
}

// MessageId: 28957 (Response)
message ExploreSkillRouletteSetResponse {
  ErrorCode ErrorCode = 11;
  repeated ExploreSkillRoulette SkillRoulettes = 5;
}

// MessageId: 28167 (Request)
message ExploreSkillPullGiantRequest {
  int64 EntityId = 10;
}

// MessageId: 21377 (Response)
message ExploreSkillPullGiantResponse {
  int64 EntityId = 3;
  ErrorCode ErrorCode = 15;
}

// MessageId: 23318 (Request)
message UseDetectionSkillRequest {
  int32 SkillId = 5;
  Vector Pos = 3;
  Rotator Rot = 11;
  bool ConfirmUseDetectionSkill = 4;
}

// MessageId: 26161 (Response)
message UseDetectionSkillResponse {
  ErrorCode ErrorCode = 14;
  repeated DetectionEntityPosInfo DetectionEntityPosInfo = 15;
  int64 DetectionSlotId = 7;
}

// MessageId: 15474 (Notify)
message ExploreToolAuthorizationNotify {
  repeated int32 AuthorizationItems = 9;
}

message MapBoxSlotInfo {
  int64 DetectionSlotId = 1;
  int32 MarkId = 2;
}

// MessageId: 24876 (Notify)
message UpdateBoxSlotInfoNotify {
  repeated MapBoxSlotInfo BoxSlotInfo = 6;
}

// MessageId: 15611 (Request)
message UpdateBoxSlotInfoRequest {
}

// MessageId: 18322 (Response)
message UpdateBoxSlotInfoResponse {
  ErrorCode ErrorCode = 8;
  MapBoxSlotInfo MapBoxSlotInfo = 11;
}

// MessageId: 15363 (Request)
message RemoveTreasureBoxSlotRequest {
  int64 DetectionSlotId = 11;
}

// MessageId: 28472 (Response)
message RemoveTreasureBoxSlotResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 29140 (Request)
message TYl {
}

// MessageId: 25310 (Response)
message bYl {
  ErrorCode ErrorCode = 15;
  DetectionEntityPosInfo DetectionEntityPosInfo = 3;
}

// MessageId: 20515 (Request)
message czl1 {
  int64 EntityId = 15;
}

// MessageId: 21915 (Response)
message uzl2 {
  int64 EntityId = 8;
  ErrorCode ErrorCode = 11;
}

// MessageId: 24568 (Request)
message UseSoundBoxSkillRequest {
}

// MessageId: 22430 (Response)
message UseSoundBoxSkillResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 23886 (Request)
message SetFanNumberOfTurnsRequest {
  int64 EntityId = 14;
  int32 NumberOfTurns = 9;
}

// MessageId: 28555 (Response)
message SetFanNumberOfTurnsResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 18701 (Request)
message SendBaoziStateRequest {
  int64 FanEntityId = 7;
  int64 BaoziEntityId = 10;
  int32 IsActive = 5;
}

// MessageId: 18840 (Response)
message SendBaoziStateResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 18582 (Request)
message SetFanStateRequest {
  int64 FanEntityId = 2;
  int32 IsActive = 1;
}

// MessageId: 23180 (Response)
message SetFanStateResponse {
  ErrorCode ErrorCode = 4;
}

message FavorQuest {
  int32 Chapter = 1;
  int32 Status = 2;
}

enum FavorQuestStatus {
  FavorQuestStatus_pBs = 0;
  FavorQuestStatus_CanAccept = 1;
  FavorQuestStatus_Accepted = 2;
  FavorQuestStatus_Completed = 3;
}

enum FavorItemStatus {
  FavorItemStatus_ItemLocked = 0;
  FavorItemStatus_ItemCanUnLock = 1;
  FavorItemStatus_ItemUnLocked = 2;
}

enum FavorItemType {
  FavorItemType_m8n = 0;
  FavorItemType_Story = 1;
  FavorItemType_Goods = 2;
}

message FavorItem {
  int32 Id = 1;
  int32 Status = 2;
}

message RoleFavor {
  int32 RoleId = 1;
  int32 Level = 2;
  int32 Exp = 3;
  repeated FavorItem WordIds = 4;
  repeated FavorItem StoryIds = 5;
  repeated FavorItem GoodsIds = 6;
  FavorQuest FavorQuest = 7;
}

// MessageId: 27674 (Request)
message RoleFavorListRequest {
}

// MessageId: 27596 (Response)
message RoleFavorListResponse {
  ErrorCode ErrorCode = 2;
  repeated RoleFavor FavorList = 15;
}

// MessageId: 20581 (Notify)
message RoleFavorListNotify {
  repeated RoleFavor FavorList = 5;
  map<int32, ConditionInfo> RoleConditionInfoMap = 3;
}

// MessageId: 26920 (Notify)
message RoleFavorActiveNotify {
  RoleFavor RoleFavorInfo = 4;
}

// MessageId: 16855 (Notify)
message RoleFavorLevelUpdateNotify {
  int32 RoleId = 11;
  int32 Level = 8;
  int32 Exp = 5;
}

// MessageId: 22218 (Notify)
message RoleFavorNewCanUnLockNotify {
  int32 ItemType = 6;
  int32 RoleId = 1;
  int32 CanUnLockId = 13;
}

// MessageId: 29993 (Notify)
message RoleFavorExpTipsNotify {
  repeated ExpTips ExpTips = 3;
  int32 ItemId = 5;
  int32 Count = 8;
}

message ExpTips {
  int32 RoleId = 1;
  int32 Exp = 2;
}

message ItemFinishList {
  repeated int32 ConditionIdList = 1;
}

message ConditionItem {
  map<int32, ItemFinishList> ItemFinishMap = 1;
}

message ConditionInfo {
  map<int32, ConditionItem> FinishConditionMap = 2;
}

// MessageId: 19561 (Notify)
message RoleFavorFinishConditionNotify {
  map<int32, ConditionInfo> RoleConditionInfoMap = 11;
}

// MessageId: 23132 (Request)
message RoleFavorUnLockRequest {
  int32 ItemType = 1;
  int32 RoleId = 4;
  int32 UnlockId = 15;
}

// MessageId: 15542 (Response)
message RoleFavorUnLockResponse {
  ErrorCode ErrorCode = 10;
  int32 ItemType = 3;
  int32 RoleId = 14;
  int32 UnlockId = 6;
}

// MessageId: 27126 (Notify)
message RoleFavorNewQuestUpdateNotify {
  int32 RoleId = 9;
  FavorQuest FavorQuest = 10;
}

enum C6s {
  C6s_Talk = 0;
  C6s_lxs = 1;
}

// MessageId: 23508 (Request)
message RoleFavorAcceptQuestRequest {
  int32 RoleId = 14;
  int32 QuestType = 11;
  int32 Chapter = 7;
}

// MessageId: 19075 (Response)
message RoleFavorAcceptQuestResponse {
  ErrorCode ErrorCode = 5;
  int32 RoleId = 7;
  int32 QuestType = 6;
}

// MessageId: 16387 (Request)
message RoleFavorTalkScoreRequest {
  int32 Score = 11;
  int32 ErrorCount = 12;
}

// MessageId: 23629 (Response)
message RoleFavorTalkScoreResponse {
  ErrorCode ErrorCode = 10;
  bool IsComplete = 9;
}

// MessageId: 25197 (Request)
message RoleMotionUnLockRequest {
  int32 RoleId = 2;
  int32 UnlockId = 7;
}

// MessageId: 28846 (Response)
message RoleMotionUnLockResponse {
  ErrorCode ErrorCode = 2;
  int32 RoleId = 4;
  int32 UnlockId = 9;
}

// MessageId: 25018 (Notify)
message RoleMotionNewCanUnLockNotify {
  int32 RoleId = 1;
  int32 CanUnLockId = 7;
}

message RoleMotion {
  int32 RoleId = 1;
  repeated FavorItem MotionIds = 2;
}

// MessageId: 19816 (Notify)
message RoleMotionActiveNotify {
  RoleMotion RoleMotionInfo = 2;
}

// MessageId: 18813 (Notify)
message RoleMotionListNotify {
  repeated RoleMotion MotionList = 8;
  map<int32, ConditionInfo> RoleConditionInfoMap = 2;
}

// MessageId: 24862 (Notify)
message RoleMotionFinishConditionNotify {
  map<int32, ConditionInfo> RoleConditionInfoMap = 1;
}

// MessageId: 20073 (Notify)
message wYs {
  int64 EntityId = 9;
}

// MessageId: 18218 (Request)
message FishingDataRequest {
}

// MessageId: 24763 (Response)
message FishingDataResponse {
  FishingData FishingData = 2;
}

message FishingData {
  map<int32, int32> ET_2 = 3;
  int32 IT_3 = 4;
  repeated rR_ TT_ = 5;
  oR_1 bT_1 = 6;
  nR_3 LT_2 = 7;
  map<int32, sR_2> wT_4 = 8;
  map<int32, aR_> RT_2 = 9;
  repeated int32 AT_2 = 10;
  repeated PT_ PT_ = 11;
  repeated int32 xT_1 = 12;
  repeated int32 Nws2 = 13;
  int32 IH_ = 14;
}

enum hR_ {
  hR__Created = 0;
  hR__Acceptable = 1;
  hR__Accepted = 2;
}

message rR_ {
  int32 NodeId = 1;
  int32 Level = 2;
  bool Unlock = 3;
}

message oR_1 {
  int32 SkinId = 1;
  int64 UT_2 = 6;
  bool DT_ = 7;
  BT_2 BT_ = 8;
  int64 EntityId = 10;
  bool kT_1 = 11;
  int32 oZl = 12;
  int32 HP_1 = 13;
}

message nR_3 {
  repeated lR_1 qT_2 = 1;
  repeated _R_2 OT_ = 2;
  repeated int32 jA_ = 3;
}

message lR_1 {
  int32 Id = 1;
  int32 GT_ = 2;
  int32 FT_ = 3;
}

enum cR_2 {
  cR__No = 0;
  cR__DirectionDown = 1;
  cR__DirectionLeft = 2;
  cR__DirectionUp = 3;
}

enum uR_2 {
  uR__SilverCup = 0;
  uR__NormalCup = 1;
  uR__GoldCup = 2;
}

message dR_ {
  int32 ItemId = 1;
  int32 IncrId = 2;
  int32 EXl = 4;
  mR_1 l8n1 = 5;
  int32 M8n = 6;
  int32 MXl = 7;
  int32 ATs = 8;
  int32 MBs = 9;
}

message mR_1 {
  int32 iPs = 1;
  int32 rPs = 2;
}

enum fR_1 {
  fR__All = 0;
  fR__Day = 1;
  fR__Night = 2;
}

message BT_2 {
  repeated dR_ NT_ = 1;
  int32 VT_1 = 2;
  int32 jT_2 = 3;
  repeated dR_ HT_ = 4;
  repeated dR_ DOLLART_ = 5;
  int32 WT_1 = 6;
}

message sR_2 {
  repeated CR_3 QT_1 = 1;
}

message CR_3 {
  int32 Id = 5;
  int32 MapId = 1;
  int32 KT_2 = 2;
  repeated dR_ Items = 3;
  int64 XT_4 = 4;
  int64 YT_ = 6;
  int32 zT_ = 7;
}

message aR_ {
  repeated gR_1 JT_ = 1;
  repeated pR_ ZT_ = 2;
}

message gR_1 {
  int32 Id = 5;
  int32 MapId = 1;
  int32 EDs = 2;
  int32 KT_2 = 3;
  int64 XT_4 = 4;
  int64 YT_ = 6;
  int32 zT_ = 7;
  int32 fDs = 8;
  bool qD_ = 9;
}

message pR_ {
  int64 EntityId = 1;
  int32 EDs = 2;
  int32 KT_2 = 3;
  int32 ConfigId = 4;
  int32 fDs = 5;
}

message _R_2 {
  int32 Id = 1;
  int32 lMs1 = 2;
  int32 j6n = 3;
  bool dMs = 4;
  bool mMs = 5;
}

message PT_ {
  int32 Id = 1;
  repeated dR_ NT_ = 2;
}

// MessageId: 20606 (Notify)
message B0_ {
  FishingData FishingData = 1;
}

// MessageId: 26971 (Notify)
message k0_2 {
  oR_1 bT_1 = 1;
}

// MessageId: 26283 (Notify)
message q0_1 {
  rR_ eb_1 = 12;
}

// MessageId: 17490 (Notify)
message O0_ {
  lR_1 LT_2 = 11;
  repeated int32 jA_ = 15;
}

// MessageId: 16348 (Notify)
message G0_ {
  _R_2 tb_1 = 7;
}

// MessageId: 22457 (Notify)
message F0_ {
  int32 ib_ = 14;
  CR_3 rb_1 = 5;
}

// MessageId: 17373 (Notify)
message N0_ {
  int32 ib_ = 8;
  gR_1 ob_2 = 4;
  bool eTs = 10;
}

// MessageId: 20940 (Notify)
message Ly_1 {
  int32 ib_ = 10;
  pR_ ob_2 = 6;
  bool eTs = 11;
}

// MessageId: 24488 (Notify)
message Mv_1 {
  PT_ PT_ = 5;
}

// MessageId: 28875 (Request)
message V0_ {
  int32 N6n = 15;
}

// MessageId: 27958 (Response)
message j0_1 {
  ErrorCode ErrorCode = 6;
}

enum Type {
  IXl_ShipCabin = 0;
  IXl_TempCabin = 1;
  IXl_NetCabin = 2;
  IXl_rb_ = 3;
  IXl_HandIn = 4;
}

// MessageId: 21087 (Request)
message FishingCabinPutRequest {
  int32 Type = 12;
  int32 RequestId = 10;
  repeated dR_ LeftDataList = 2;
  repeated dR_ RightDataList = 4;
  int32 RemoveIncId = 8;
}

// MessageId: 23327 (Response)
message FishingCabinPutResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 15173 (Request)
message W0_ {
}

// MessageId: 24492 (Response)
message Q0_2 {
  ErrorCode ErrorCode = 14;
  map<int32, int32> RewardItems = 5;
  repeated dR_ nb_ = 6;
}

// MessageId: 22654 (Request)
message K0_1 {
}

// MessageId: 22933 (Response)
message X0_ {
  ErrorCode ErrorCode = 10;
}

// MessageId: 27345 (Request)
message Y0_ {
  repeated int32 izl = 9;
}

// MessageId: 18792 (Response)
message z0_1 {
  ErrorCode ErrorCode = 15;
  map<int32, int32> RewardItems = 7;
}

// MessageId: 25128 (Request)
message J0_2 {
  repeated int32 izl = 12;
}

// MessageId: 23004 (Response)
message Z0_2 {
  ErrorCode ErrorCode = 8;
}

// MessageId: 29572 (Request)
message ev_ {
  bool rZl1 = 1;
  int32 oZl = 9;
}

// MessageId: 21899 (Response)
message tv_ {
  ErrorCode ErrorCode = 5;
}

// MessageId: 17123 (Request)
message iv_ {
  int32 X6n = 5;
  repeated vR_1 k9n = 8;
}

// MessageId: 15406 (Response)
message rv_ {
  ErrorCode ErrorCode = 10;
}

// MessageId: 24522 (Request)
message ov_2 {
  int32 X6n = 11;
}

// MessageId: 15897 (Response)
message nv_1 {
  ErrorCode ErrorCode = 4;
}

// MessageId: 16996 (Request)
message sv_ {
  int32 X6n = 1;
}

// MessageId: 29591 (Response)
message av_ {
  ErrorCode ErrorCode = 6;
  int32 X6n = 2;
}

// MessageId: 27019 (Request)
message Kv_1 {
  int32 X6n = 2;
  bool Nc_ = 6;
}

// MessageId: 20387 (Response)
message Xv_1 {
  ErrorCode ErrorCode = 5;
}

message vR_1 {
  int32 ItemId = 1;
  int32 IncrId = 2;
  int32 Count = 3;
}

// MessageId: 15442 (Notify)
message hv_2 {
  oR_1 bT_1 = 4;
}

// MessageId: 28063 (Request)
message lv_ {
}

// MessageId: 20939 (Response)
message _v_ {
  ErrorCode ErrorCode = 3;
}

// MessageId: 26637 (Request)
message cv_ {
  int32 NodeId = 2;
}

// MessageId: 18761 (Response)
message uv_1 {
  ErrorCode ErrorCode = 3;
  rR_ TT_ = 1;
}

// MessageId: 24186 (Notify)
message dv_1 {
  repeated dR_ sb_ = 2;
  repeated dR_ ab_ = 14;
}

// MessageId: 23511 (Notify)
message mv_2 {
  repeated int32 AT_2 = 13;
  repeated int32 hb_ = 8;
}

// MessageId: 26831 (Request)
message Nv_2 {
  int32 Ct_ = 6;
  int64 EntityId = 8;
}

// MessageId: 17789 (Response)
message Vv_ {
  ErrorCode ErrorCode = 11;
  repeated dR_ Items = 14;
  repeated dR_ GBs = 9;
  repeated dR_ DOLLARP_ = 1;
}

// MessageId: 23299 (Request)
message Yv_ {
}

// MessageId: 25071 (Response)
message zv_2 {
}

// MessageId: 16508 (Notify)
message jv_2 {
  map<int32, int32> ET_2 = 12;
  int32 IT_3 = 1;
  int32 IH_ = 4;
}

// MessageId: 19551 (Notify)
message Jv_1 {
  repeated int32 xT_1 = 3;
}

// MessageId: 21911 (Notify)
message QN_3 {
  repeated int32 Nws2 = 4;
}

// MessageId: 20869 (Request)
message Zv_1 {
  int32 SkinId = 11;
  int32 oZl = 9;
}

// MessageId: 22022 (Response)
message ey_1 {
  ErrorCode ErrorCode = 15;
}

// MessageId: 26089 (Request)
message ty_1 {
  int32 Id = 12;
}

// MessageId: 26324 (Response)
message iy_1 {
  ErrorCode ErrorCode = 12;
  gR_1 lb_ = 8;
}

// MessageId: 18711 (Request)
message ry_1 {
  int32 Id = 6;
}

// MessageId: 26042 (Response)
message oy_1 {
  ErrorCode ErrorCode = 4;
  CR_3 _b_ = 1;
}

// MessageId: 20332 (Request)
message ny_1 {
  int32 Id = 8;
  repeated dR_ LeftDataList = 9;
  repeated dR_ RightDataList = 2;
  int32 RemoveIncId = 3;
  int32 Ur_1 = 4;
}

// MessageId: 17166 (Response)
message sy_2 {
  ErrorCode ErrorCode = 3;
  bool cb_ = 15;
}

// MessageId: 22451 (Request)
message ay_1 {
  int32 ItemId = 7;
}

// MessageId: 25640 (Response)
message hy_1 {
  ErrorCode ErrorCode = 6;
  repeated dR_ Items = 3;
}

// MessageId: 23519 (Request)
message ly_2 {
  int32 ItemId = 4;
}

// MessageId: 20789 (Response)
message _y_2 {
  ErrorCode ErrorCode = 9;
}

// MessageId: 21350 (Request)
message cy_2 {
}

// MessageId: 21553 (Response)
message uy_1 {
  ErrorCode ErrorCode = 2;
}

// MessageId: 29957 (Notify)
message qy_ {
  int64 EntityId = 10;
  Vector l8n1 = 3;
  Rotator _8n = 7;
}

// MessageId: 16101 (Notify)
message q2_ {
  bool O2_ = 1;
}

// MessageId: 17164 (Request)
message Qj_1 {
}

// MessageId: 28004 (Response)
message Kj_3 {
  ErrorCode ErrorCode = 5;
}

// MessageId: 18354 (Notify)
message Q9_ {
  bool kT_1 = 4;
  int32 oZl = 7;
  int32 HP_1 = 11;
}

// MessageId: 17297 (Notify)
message PDOLLAR_ {
  repeated dR_ HT_ = 14;
}

// MessageId: 19253 (Notify)
message FlowStartNotify {
  int64 FlowIncId = 7;
  string FlowListName = 13;
  int32 FlowId = 4;
  int32 StateId = 9;
  GameCtxPb GameCtx = 1;
  string PlotMode = 6;
  bool aAsync = 11;
  bool IsSkip = 10;
  bool BYs2 = 8;
  Vector PlotCoordinates = 15;
}

// MessageId: 26119 (Request)
message FlowEndRequest {
  int64 FlowIncId = 8;
  bool IsSkip = 14;
  map<int32, FlowOptionInfoList> OptionInfos = 5;
}

message FlowOptionInfoList {
  repeated FlowOptionInfo OptionIndexList = 1;
}

message FlowOptionInfo {
  int32 TalkId = 1;
  int32 OptionIndex = 2;
}

// MessageId: 20186 (Response)
message FlowEndResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 21357 (Notify)
message FlowEndNotify {
  int64 FlowIncId = 9;
  bool aAsync = 13;
  bool IsFinished = 15;
}

// MessageId: 25706 (Request)
message FlowRestartRequest {
  int64 FlowIncId = 5;
}

// MessageId: 24343 (Response)
message FlowRestartResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 26891 (Request)
message FlowActionRequest {
  int64 FlowIncId = 15;
  int32 ActionId = 5;
}

// MessageId: 23469 (Response)
message FlowActionResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 19676 (Notify)
message FlowShowEntityNotify {
  bool IsHide = 9;
  repeated int32 EntityIds = 8;
}

// MessageId: 17604 (Notify)
message ShowPasserByNpcNotify {
  bool IsHide = 7;
  repeated int64 EntityIds = 13;
}

// MessageId: 26750 (Notify)
message FlowServerSkipNotify {
  string FlowListName = 5;
  int32 FlowId = 3;
  int32 StateId = 13;
  bool EUs = 15;
}

// MessageId: 28534 (Request)
message SafeTeleportRequest {
  int64 FlowIncId = 6;
}

// MessageId: 17388 (Response)
message SafeTeleportResponse {
  ErrorCode ErrorCode = 6;
}

// MessageId: 20735 (Request)
message SeqEndPositionRequest {
  int64 FlowIncId = 6;
  int32 lql = 14;
  int32 TalkId = 5;
  float X = 1;
  float Y = 3;
  float gqs2 = 8;
  float fqs = 2;
}

// MessageId: 17884 (Response)
message SeqEndPositionResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 18061 (Request)
message yDOLLAR_ {
  string TDOLLAR_ = 1;
}

// MessageId: 18741 (Response)
message SDOLLAR_ {
  ErrorCode ErrorCode = 6;
}

// MessageId: 15658 (Notify)
message MDOLLAR_ {
  string TDOLLAR_ = 8;
}

message rDc {
  int32 SkinId = 1;
  repeated int32 RoleIds = 2;
}

// MessageId: 20352 (Notify)
message Kxc {
  repeated rDc Gxs = 11;
}

// MessageId: 28227 (Request)
message Xxc {
  int32 RoleId = 9;
  int32 SkinId = 5;
}

// MessageId: 16391 (Response)
message Yxc {
  ErrorCode ErrorCode = 1;
}

// MessageId: 29268 (Request)
message Zxc2 {
  int32 RoleId = 10;
  int32 SkinId = 12;
}

// MessageId: 24977 (Response)
message eDc {
  ErrorCode ErrorCode = 2;
}

message oDc {
  int32 RoleId = 1;
  int32 SkinId = 2;
}

// MessageId: 19166 (Request)
message zxc1 {
  int32 SkinId = 15;
}

// MessageId: 20651 (Response)
message Jxc {
  ErrorCode ErrorCode = 15;
  repeated oDc iDc = 10;
}

// MessageId: 25724 (Notify)
message tDc {
  repeated oDc iDc = 15;
}

message CGc {
  int32 SkinId = 1;
  int32 fGc = 2;
}

message iOc1 {
  int64 F4n = 1;
  repeated CGc gGc = 2;
}

// MessageId: 26443 (Notify)
message tOc3 {
  repeated iOc1 iDc = 7;
}

// MessageId: 16417 (Notify)
message IOc2 {
  repeated int32 TOc2 = 3;
}

// MessageId: 20116 (Request)
message HFc {
  int32 fGc = 15;
}

// MessageId: 23289 (Response)
message DOLLARFc {
  ErrorCode ErrorCode = 9;
  repeated int32 WFc = 1;
}

// MessageId: 28637 (Request)
message ForgeInfoRequest {
}

// MessageId: 29613 (Response)
message ForgeInfoResponse {
  ErrorCode ErrorCode = 9;
  repeated OneForgeInfo ForgeInfoList = 8;
  repeated OneForgeConfig ForgeConfigs = 5;
  int64 LimitRefreshTime = 12;
}

message OneForgeInfo {
  int32 Id = 1;
  int32 LastRoleId = 3;
  int32 LimitTotalCount = 4;
  int32 LimitForgeCount = 5;
  int64 LimitBeginTime = 6;
  int64 LimitEndTime = 7;
}

message OneForgeConfig {
  int32 Id = 1;
  int64 LimitBeginTime = 2;
  int64 LimitEndTime = 3;
}

// MessageId: 22853 (Request)
message ForgeItemRequest {
  int32 Id = 8;
  int32 RoleId = 15;
  int32 Count = 6;
  int64 InteractEntityId = 11;
}

// MessageId: 15107 (Response)
message ForgeItemResponse {
  ErrorCode ErrorCode = 2;
  int32 Id = 3;
  repeated SingleItemInfo ItemInfos = 4;
  int32 ActiveSkillType = 9;
  repeated SingleItemInfo ExtraItemInfos = 13;
  int32 RoleId = 6;
}

// MessageId: 23313 (Notify)
message ForgeItemInfoUpdateNotify {
  repeated OneForgeInfo ForgeInfoList = 7;
}

// MessageId: 29208 (Request)
message ForgeFormulaUnlockRequest {
  int32 Id = 5;
}

// MessageId: 15877 (Response)
message ForgeFormulaUnlockResponse {
  ErrorCode ErrorCode = 4;
  int32 Id = 6;
}

message Formation {
  int32 Id = 1;
  int32 RoleIndex = 2;
  repeated int32 Role = 3;
  bool IsCurrent = 4;
}

// MessageId: 21277 (Request)
message FormationRequest {
}

// MessageId: 29227 (Response)
message FormationResponse {
  repeated Formation Formation = 5;
  ErrorCode ErrorCode = 6;
}

// MessageId: 20360 (Request)
message FormationSwitchCurrentRequest {
  int32 Id = 3;
}

// MessageId: 24179 (Response)
message FormationSwitchCurrentResponse {
  int32 CurrentId = 1;
  ErrorCode ErrorCode = 13;
}

// MessageId: 21851 (Request)
message Szl1 {
  int64 qhl = 13;
  repeated int64 EntityIds = 4;
  int32 Lvl = 5;
  bool Tvl = 1;
  bool Rvl = 15;
}

// MessageId: 27201 (Response)
message Mzl {
  ErrorCode ErrorCode = 9;
}

// MessageId: 25369 (Request)
message FormationModifyRequest {
  int32 Id = 1;
  repeated int32 Role = 3;
}

// MessageId: 20597 (Response)
message FormationModifyResponse {
  Formation Formation = 1;
  ErrorCode ErrorCode = 11;
}

message FormationChangeInfo {
  int32 Id = 1;
  repeated int32 Role = 2;
}

// MessageId: 15721 (Request)
message FormationChangeRequest {
  repeated FormationChangeInfo ChangeList = 4;
  int32 FormationId = 10;
}

// MessageId: 18297 (Response)
message FormationChangeResponse {
  repeated FormationChangeInfo ChangeList = 4;
  int32 FormationId = 6;
  ErrorCode ErrorCode = 8;
}

// MessageId: 19836 (Request)
message FormationSwitchRoleRequest {
  int32 RoleIndex = 3;
}

// MessageId: 18618 (Response)
message FormationSwitchRoleResponse {
  int32 RoleIndex = 13;
  ErrorCode ErrorCode = 6;
}

// MessageId: 16876 (Notify)
message PbFormationAutoAddRoleNotify {
  repeated int32 Roles = 6;
  int32 FormationId = 1;
}

// MessageId: 23846 (Notify)
message PhantomFormationChangeNotify {
  int32 CurrRole = 3;
  repeated int32 RoleIds = 6;
  int32 FormationId = 7;
  bool IsExit = 8;
}

message FriendInfo {
  PlayerDetails Info = 1;
  string Remark = 2;
}

message FriendApply {
  PlayerDetails Info = 1;
  int64 CreatedTime = 2;
}

// MessageId: 16980 (Request)
message FriendAllRequest {
}

// MessageId: 27561 (Response)
message FriendAllResponse {
  repeated FriendInfo FriendInfoList = 6;
  repeated FriendApply FriendApplyList = 14;
  ErrorCode ErrorCode = 2;
}

// MessageId: 18181 (Notify)
message FriendAddedNotify {
  FriendInfo Info = 8;
}

// MessageId: 26842 (Notify)
message FriendDeletedNotify {
  int32 Id = 9;
}

// MessageId: 22583 (Notify)
message FriendApplyReceivedNotify {
  FriendApply FriendApply = 5;
}

// MessageId: 22920 (Notify)
message FriendApplyDeletedNotify {
  int32 Id = 10;
}

enum FriendApplyWay {
  FriendApplyWay_Search = 0;
  FriendApplyWay_RecentlyTeam = 1;
}

// MessageId: 21288 (Request)
message FriendApplySendRequest {
  int32 Id = 8;
  int32 Way = 6;
}

// MessageId: 28256 (Response)
message FriendApplySendResponse {
  ErrorCode ErrorCode = 1;
}

enum FriendApplyOperator {
  FriendApplyOperator_Approve = 0;
  FriendApplyOperator_Reject = 1;
}

// MessageId: 16252 (Request)
message FriendApplyHandleRequest {
  repeated int32 Ids = 15;
  int32 Operator = 5;
}

// MessageId: 18538 (Response)
message FriendApplyHandleResponse {
  map<int32, int32> HandledMap = 4;
  ErrorCode ErrorCode = 10;
}

// MessageId: 21085 (Request)
message FriendRemarkRequest {
  int32 Id = 1;
  string Remark = 14;
}

// MessageId: 27143 (Response)
message FriendRemarkResponse {
  ErrorCode ErrorCode = 7;
}

// MessageId: 18433 (Request)
message FriendDeleteRequest {
  int32 Id = 11;
}

// MessageId: 17936 (Response)
message FriendDeleteResponse {
  ErrorCode ErrorCode = 10;
}

message RecentlyTeamInfo {
  PlayerDetails Info = 1;
  int64 TeamTime = 2;
}

// MessageId: 29016 (Request)
message FriendRecentlyTeamRequest {
}

// MessageId: 28057 (Response)
message FriendRecentlyTeamResponse {
  repeated RecentlyTeamInfo Data = 14;
  ErrorCode ErrorCode = 2;
}

// MessageId: 20331 (Notify)
message FriendRecentlyTeamUpdateNotify {
  repeated RecentlyTeamInfo AddInfos = 2;
  map<int32, int64> TimeUpdate = 4;
  repeated int32 RemoveIds = 12;
}

message Function {
  int32 Id = 1;
  int32 Flag = 5;
}

// MessageId: 15535 (Notify)
message FuncOpenNotify {
  repeated Function Func = 5;
}

// MessageId: 17553 (Notify)
message FuncOpenConfirmNotify {
  bytes FuncInfo = 14;
}

// MessageId: 22568 (Notify)
message FuncOpenUpdateNotify {
  repeated Function Func = 10;
}

// MessageId: 20829 (Request)
message FuncShowRequest {
  repeated int32 FuncId = 6;
}

// MessageId: 16567 (Response)
message FuncShowResponse {
  ErrorCode ErrorCode = 9;
}

message GachaConsume {
  int32 Times = 1;
  int32 Consume = 2;
}

message GachaPoolInfo {
  int32 Id = 1;
  int64 BeginTime = 2;
  int64 EndTime = 3;
  string Title = 4;
  string Description = 5;
  int32 UiType = 6;
  string ThemeColor = 7;
  repeated int32 ShowIdList = 8;
  repeated int32 UpList = 9;
  repeated int32 PreviewIdList = 10;
}

message GachaInfo {
  int32 Id = 1;
  int32 TodayTimes = 2;
  int32 TotalTimes = 3;
  int32 ItemId = 4;
  repeated GachaConsume GachaConsumes = 5;
  int32 UsePoolId = 6;
  repeated GachaPoolInfo Pools = 7;
  int64 BeginTime = 8;
  int64 EndTime = 9;
  int32 DailyLimitTimes = 10;
  int32 TotalLimitTimes = 11;
  string ResourcesId = 12;
}

message GachaReward {
  int32 ItemId = 1;
  int32 ItemCount = 2;
}

message GachaResult {
  oneof Bottom {
    GachaReward BottomExtraReward = 3;
  }
  GachaReward GachaReward = 1;
  repeated GachaReward ExtraRewards = 2;
  repeated GachaReward TransformRewards = 4;
}

message q6s {
  GachaReward GachaReward = 1;
  int64 s9n = 2;
}

// MessageId: 21233 (Request)
message GachaInfoRequest {
  int32 Language = 2;
}

// MessageId: 19120 (Response)
message GachaInfoResponse {
  ErrorCode ErrorCode = 7;
  repeated GachaInfo GachaInfos = 9;
  int32 DailyTotalLeftTimes = 10;
  string RecordId = 11;
}

// MessageId: 26102 (Request)
message GachaRequest {
  int32 GachaId = 14;
  int32 GachaTimes = 13;
}

// MessageId: 21321 (Response)
message GachaResponse {
  ErrorCode ErrorCode = 7;
  repeated GachaResult GachaResults = 11;
}

// MessageId: 26423 (Notify)
message GachaResultNotify {
  repeated GachaResult GachaResults = 7;
}

// MessageId: 25414 (Request)
message GachaUsePoolRequest {
  int32 GachaId = 8;
  int32 PoolId = 13;
}

// MessageId: 18819 (Response)
message GachaUsePoolResponse {
  ErrorCode ErrorCode = 10;
}

message GachaItem {
  int32 ItemId = 1;
  bool eo_ = 2;
}

message GachaPoolDetail {
  string Text = 1;
  repeated GachaItem FiveStarRoles = 2;
  repeated GachaItem FiveStarWeapons = 3;
  repeated GachaItem FourStarRoles = 4;
  repeated GachaItem FourStarWeapons = 5;
  repeated GachaItem ThreeStarRoles = 6;
  string I4_ = 7;
  string T4_ = 8;
  string b4_ = 9;
  string L4_ = 10;
  string w4_ = 11;
  string R4_ = 12;
}

// MessageId: 23781 (Request)
message GachaPoolDetailRequest {
  int32 PoolId = 4;
}

// MessageId: 18151 (Response)
message GachaPoolDetailResponse {
  ErrorCode ErrorCode = 5;
  GachaPoolDetail GachaPoolDetail = 3;
}

// MessageId: 16196 (Notify)
message GachaNewNotify {
}

message G6s {
  int32 ItemId = 1;
  int32 ItemNum = 2;
}

message O6s2 {
  int32 TaskId = 1;
  repeated G6s iws = 2;
}

enum GatherTaskState {
  GatherTaskState_Z6n = 0;
  GatherTaskState_Running = 1;
  GatherTaskState_InComplete = 2;
  GatherTaskState_Done = 3;
  GatherTaskState_TakeReward = 4;
}

message rws {
  int32 TaskId = 1;
  int32 State = 2;
}

// MessageId: 20510 (Notify)
message ios1 {
  repeated rws rws = 9;
}

// MessageId: 17548 (Notify)
message ros2 {
  repeated int32 ows1 = 13;
}

// MessageId: 20324 (Notify)
message oos {
  repeated O6s2 nws1 = 9;
}

// MessageId: 27668 (Request)
message CollectionQuestRewardRequest {
  int32 RewardId = 15;
}

// MessageId: 23227 (Response)
message CollectionQuestRewardResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 18479 (Request)
message GuideInfoRequest {
}

// MessageId: 27406 (Response)
message GuideInfoResponse {
  repeated int32 GuideGroupFinishList = 2;
}

// MessageId: 19247 (Request)
message GuideTriggerRequest {
  int32 GroupId = 10;
}

// MessageId: 22308 (Response)
message GuideTriggerResponse {
  ErrorCode ErrorCode = 11;
  repeated string ErrorParams = 6;
}

// MessageId: 15745 (Request)
message GuideFinishRequest {
  int32 GroupId = 6;
}

// MessageId: 26490 (Response)
message GuideFinishResponse {
  ErrorCode ErrorCode = 14;
  repeated string ErrorParams = 9;
}

// MessageId: 16038 (Notify)
message GuideCondDoneNotify {
  int32 GroupId = 8;
}

// MessageId: 1650 (Request)
message HeartbeatRequest {
  bytes AntiData = 1;
}

// MessageId: 1651 (Response)
message HeartbeatResponse {
}

// MessageId: 18283 (Request)
message GatewayEchoRequest {
  string Content = 10;
}

// MessageId: 25481 (Response)
message GatewayEchoResponse {
  string Content = 1;
}

enum IllustratedType {
  IllustratedType_Monster = 0;
  IllustratedType_VocalCorpse = 1;
  IllustratedType_ViewPoint = 2;
  IllustratedType_Weapon = 3;
  IllustratedType_Animal = 4;
  IllustratedType_mOs = 5;
  IllustratedType_Chip = 6;
  IllustratedType_Photograph = 7;
  IllustratedType_Noun = 8;
}

enum hws {
  hws_None = 0;
  hws_PhotographSub = 7;
  hws_RUs = 8;
  hws_aTs = 9;
}

message IllustratedEntry {
  oneof V6s {
    int32 hws = 5;
  }
  int32 Id = 1;
  uint32 CreateTime = 2;
  int32 Num = 3;
  bool IsRead = 4;
}

message IllustratedClass {
  int32 Type = 1;
  repeated IllustratedEntry IllustratedEntryList = 2;
}

// MessageId: 17508 (Request)
message IllustratedRedDotRequest {
}

// MessageId: 21859 (Response)
message IllustratedRedDotResponse {
  repeated int32 _ws = 13;
}

// MessageId: 25552 (Request)
message IllustratedInfoRequest {
  repeated int32 E9n = 10;
}

// MessageId: 15860 (Response)
message IllustratedInfoResponse {
  ErrorCode ErrorCode = 8;
  repeated string ErrorParams = 10;
  repeated IllustratedClass IllustratedClassList = 5;
}

// MessageId: 20313 (Request)
message IllustratedUnlockRequest {
  int32 Type = 4;
  int32 Id = 5;
}

// MessageId: 27936 (Response)
message IllustratedUnlockResponse {
  ErrorCode ErrorCode = 5;
  repeated string ErrorParams = 7;
  IllustratedEntry cws = 11;
}

// MessageId: 16426 (Notify)
message UpdateHandBookActiveStateMapNotify {
  int32 Type = 14;
  IllustratedEntry cws = 11;
  bool IsNew = 4;
}

// MessageId: 21432 (Request)
message SendIllustratedReadRequest {
  int32 Type = 7;
  int32 Id = 4;
}

// MessageId: 26411 (Response)
message SendIllustratedReadResponse {
  ErrorCode ErrorCode = 4;
  repeated string ErrorParams = 9;
}

// MessageId: 15788 (Request)
message InfluenceInfoRequest {
}

// MessageId: 27526 (Response)
message InfluenceInfoResponse {
  repeated InfluenceInfo mws = 11;
}

message InfluenceInfo {
  int32 InfluenceId = 1;
  int32 RewardIndex = 2;
  int32 Relation = 3;
}

// MessageId: 29276 (Notify)
message InfluenceInfoNotify {
  repeated InfluenceInfo mws = 13;
}

// MessageId: 21967 (Request)
message InfluenceRewardRequest {
  int32 InfluenceId = 7;
}

// MessageId: 22236 (Response)
message InfluenceRewardResponse {
  ErrorCode ErrorCode = 6;
  int32 InfluenceId = 13;
  int32 RewardIndex = 9;
  map<int32, int32> RewardItems = 15;
}

// MessageId: 24906 (Request)
message ReadDisplayInfoRequest {
  int32 InformationId = 9;
}

// MessageId: 19452 (Response)
message ReadDisplayInfoResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 25953 (Notify)
message InstDataNotify {
  repeated InstEnterInfoPb EnterInfos = 14;
}

message InstEnterInfoPb {
  int32 Id = 1;
  int32 ChallengedTimes = 2;
}

// MessageId: 18440 (Notify)
message EnterInstanceNotify {
  repeated InstEnterInfoPb EnterInfos = 1;
}

message EnterRoleTrialDungeonDirectlyInfo {
  int32 ActivityId = 1;
  int32 RoleId = 2;
}

message TeachClickInfo {
  int32 RoleId = 1;
}

message DungeonDetectionInfo {
  int32 DungeonId = 1;
}

message Dhc {
  int32 ConfigId = 1;
}

message DreamLinkWhiteCatInfo {
  int32 ActivityId = 1;
  bool IsFirst = 2;
  int32 TypeId = 3;
}

message BossRushInfo {
  int32 Id = 1;
  int32 ActivityId = 2;
  repeated Dks SelectBuffs = 3;
  repeated int32 SelectScoreBuffs = 7;
}

message gLl {
  int32 cLl = 1;
  repeated int32 dLl = 2;
  repeated int32 CLl2 = 3;
}

message c9l {
  int32 ActivityId = 1;
  int32 _9l = 2;
}

message DOLLARn_ {
  int32 ELl = 1;
  repeated int32 TLl = 2;
  repeated int32 LLl = 3;
  bool T9_ = 4;
}

message NX_ {
  int32 ELl = 1;
  repeated int32 TLl = 2;
}

message JDc1 {
  int32 w6n = 1;
}

message EnterInfo {
  oneof hs {
    EnterRoleTrialDungeonDirectlyInfo EnterRoleTrialDungeonDirectlyInfo = 1;
    TeachClickInfo TeachClickInfo = 2;
    DungeonDetectionInfo DungeonDetectionInfo = 3;
    DreamLinkWhiteCatInfo DreamLinkWhiteCatInfo = 4;
    BossRushInfo BossRushInfo = 5;
    gLl gLl = 6;
    c9l c9l = 7;
    DOLLARn_ DOLLARn_ = 8;
    NX_ NX_ = 9;
    Dhc Dhc = 10;
    Qsc Qsc = 11;
    JDc1 JDc = 12;
  }
}

// MessageId: 22656 (Request)
message PrewarTeamFightRequest {
  int32 InstanceId = 1;
  repeated int32 RoleIds = 11;
  int32 EntranceId = 6;
  int32 PosEntityId = 12;
  TransitionOptionPb TransitionOption = 2;
  repeated int32 ProtocolPhantomIdList = 9;
  EnterInfo EnterInfo = 8;
  bool nDc2 = 14;
}

// MessageId: 25228 (Response)
message PrewarTeamFightResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 28633 (Request)
message Nos {
  int32 EntranceId = 7;
}

// MessageId: 17777 (Response)
message Fos {
  ErrorCode ErrorCode = 8;
}

// MessageId: 28110 (Request)
message InstEntranceDetailRequest {
  int32 EntranceId = 8;
}

// MessageId: 21602 (Response)
message InstEntranceDetailResponse {
  ErrorCode ErrorCode = 9;
  int32 EntranceId = 3;
  int64 ExistEndTime = 8;
  repeated InstDetailEntry InstDetailEntryList = 12;
}

message InstDetailEntry {
  int32 InstId = 1;
  int64 ResetTime = 2;
  int32 Count = 3;
  sDc sDc = 4;
}

enum sDc {
  sDc_NoneArchive = 0;
  sDc_NormalArchive = 1;
  sDc_OverdueVersion = 2;
  sDc_OverdueTime = 3;
  sDc_OverdueChangeSex = 4;
}

enum zma {
  zma_Default = 0;
  zma_Esc = 1;
}

// MessageId: 20996 (Request)
message LeaveInstanceDungeonRequest {
  int32 PosEntityId = 2;
  int32 Way = 6;
}

// MessageId: 15799 (Response)
message LeaveInstanceDungeonResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 26020 (Notify)
message Wos {
  int32 Id = 5;
}

// MessageId: 27325 (Request)
message GetInstExchangeRewardRequest {
  int32 pal1 = 7;
}

// MessageId: 24788 (Response)
message GetInstExchangeRewardResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 20989 (Notify)
message InstSettleNotify {
  bool IsSuccess = 7;
  bool RewardFailTips = 13;
  int32 Magnification = 3;
  map<int32, wR_> RewardItems = 8;
}

// MessageId: 19445 (Notify)
message InstResultNotify {
  int32 Id = 13;
  bool Succ = 5;
  int32 Reason = 1;
  bool IsRecReward = 3;
}

// MessageId: 15420 (Request)
message ExchangeRewardRequest {
}

// MessageId: 23884 (Response)
message ExchangeRewardResponse {
  map<int32, int32> ExchangeShareData = 5;
  map<int32, int32> ExchangeRewardData = 3;
}

// MessageId: 24688 (Notify)
message ExchangeRewardNotify {
  int32 ExchangeRewardData = 1;
  int32 Count = 11;
}

// MessageId: 27886 (Notify)
message ShareInfoNotify {
}

// MessageId: 27062 (Notify)
message InstTimeoutNotify {
  int64 Timestamp = 6;
}

// MessageId: 23647 (Request)
message SingleInstRechallengeRequest {
  repeated int32 RoleIds = 12;
  repeated int32 ProtocolPhantomIdList = 5;
  EnterInfo EnterInfo = 11;
}

// MessageId: 15800 (Response)
message SingleInstRechallengeResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 17107 (Notify)
message Qv1 {
  repeated int64 BVn = 8;
}

// MessageId: 19904 (Notify)
message vR11 {
  bool Y5n2 = 2;
  int64 rjn = 6;
  int64 ojn = 11;
}

message ItemExchangeInfo {
  int32 ItemId = 1;
  int32 TodayTimes = 2;
  int32 TotalTimes = 3;
  int32 DailyLimit = 4;
  int32 TotalLimit = 5;
}

// MessageId: 22210 (Request)
message ItemExchangeInfoRequest {
}

// MessageId: 25275 (Response)
message ItemExchangeInfoResponse {
  repeated ItemExchangeInfo ItemExchangeInfos = 9;
}

// MessageId: 22363 (Request)
message ItemExchangeRequest {
  int32 ItemId = 2;
  int32 ExchangeTimes = 12;
}

// MessageId: 23017 (Response)
message ItemExchangeResponse {
  ErrorCode ErrorCode = 10;
  int32 ItemId = 2;
  int32 ItemCount = 9;
}

// MessageId: 19122 (Notify)
message EnterLevelPlayNotify {
  int32 Id = 9;
  bool CanGetReward = 8;
  int32 State = 2;
}

// MessageId: 27174 (Notify)
message LeaveLevelPlayNotify {
  int32 Id = 8;
}

message LevelPlayInfo {
  int32 Id = 1;
  bool IsFirst = 2;
  int32 State = 3;
  int64 UpdateTime = 4;
  int32 Rxs2 = 5;
}

// MessageId: 24704 (Notify)
message LevelPlayInfoNotify {
  repeated LevelPlayInfo LevelPlayInfo = 9;
}

// MessageId: 19355 (Notify)
message LevelPlayFirstNotify {
  int32 Id = 10;
}

// MessageId: 27614 (Notify)
message LevelPlayStateNotify {
  int32 Id = 8;
  int32 State = 3;
  int32 Ln1 = 4;
}

// MessageId: 15020 (Notify)
message LevelPlayOpenTimeNotify {
  int32 Id = 11;
  int64 OpenTime = 2;
}

// MessageId: 18536 (Request)
message LevelPlayRewardRequest {
  int64 EntityId = 13;
  int32 pal1 = 12;
}

// MessageId: 23202 (Response)
message LevelPlayRewardResponse {
  ErrorCode ErrorCode = 2;
}

message LevelPlayRewardInfo {
  int32 Id = 1;
  bool GetReward = 2;
}

// MessageId: 26762 (Notify)
message LevelPlayRewardNotify {
  repeated LevelPlayRewardInfo LevelPlayRewards = 14;
}

// MessageId: 28366 (Notify)
message LevelPlayRewardCountResetNotify {
  repeated int32 LevelPlayIds = 9;
}

enum TravelModeType {
  TravelModeType_None = 0;
  TravelModeType_Ski = 1;
  TravelModeType_WingSuitFly = 2;
}

// MessageId: 29668 (Request)
message SkiModeSwitchRequest {
  TravelModeType InitialMode = 4;
  TravelModeType TargetMode = 10;
}

// MessageId: 23081 (Response)
message SkiModeSwitchResponse {
  ErrorCode ErrorCode = 7;
}

// MessageId: 17464 (Notify)
message ShowLevelPlayTipsNotify {
  int32 Id = 4;
  int64 ResetTime = 7;
}

// MessageId: 26012 (Request)
message LevelPlayStateListAsyncRequest {
  repeated ds_2 X9l = 10;
}

// MessageId: 29915 (Response)
message LevelPlayStateListAsyncResponse {
  ErrorCode ErrorCode = 11;
  repeated ms_ mo_ = 6;
}

message ds_2 {
  int32 InstId = 1;
  repeated int32 LevelPlayIds = 2;
}

message ms_ {
  int32 InstId = 1;
  map<int32, int32> fo_2 = 2;
  map<int32, int32> An1 = 3;
  map<int32, bool> CF_ = 4;
  map<int32, string> F4_ = 5;
}

// MessageId: 24428 (Request)
message SimpleTrackReportAsyncRequest {
}

// MessageId: 29329 (Response)
message SimpleTrackReportAsyncResponse {
  ErrorCode ErrorCode = 8;
  repeated fs_ po_ = 6;
}

message fs_ {
  int32 InstId = 1;
  int32 LevelPlayId = 2;
  int32 Co_1 = 3;
}

// MessageId: 16413 (Request)
message LevelPlayVarAsyncRequest {
  int32 InstId = 1;
  int32 LevelPlayId = 11;
}

// MessageId: 28113 (Response)
message LevelPlayVarAsyncResponse {
  ErrorCode ErrorCode = 5;
  map<string, VarDefinePb> Vars = 4;
}

// MessageId: 20356 (Request)
message PlayPointStateAsyncRequest {
  int32 InstId = 7;
  int32 yOl = 1;
}

// MessageId: 23834 (Response)
message PlayPointStateAsyncResponse {
  ErrorCode ErrorCode = 9;
  map<int32, ps_> fo_2 = 7;
}

message ps_ {
  oneof V4 {
    string N4_ = 6;
  }
  int32 Ob_1 = 1;
  int32 Gb_ = 2;
  int32 RI_2 = 3;
  int32 xb_ = 4;
  bool SUs = 5;
}

message LivenessInfo {
  int32 LivenessCount = 1;
  repeated int32 RewardedLiveness = 2;
  repeated LivenessTask Tasks = 3;
  int64 DayEnd = 4;
  int32 AreaId = 5;
}

message LivenessTask {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  bool IsFinished = 4;
  bool IsTaken = 5;
  bool bxs = 6;
}

// MessageId: 19153 (Request)
message LivenessRequest {
}

// MessageId: 20961 (Response)
message LivenessResponse {
  LivenessInfo LivenessInfo = 2;
}

// MessageId: 23479 (Notify)
message LivenessCountUpdateNotify {
  int32 LivenessCount = 12;
}

// MessageId: 15628 (Notify)
message LivenessUpdateNotify {
  LivenessInfo LivenessInfo = 12;
}

// MessageId: 20027 (Notify)
message LivenessRefreshNotify {
  LivenessInfo LivenessInfo = 2;
}

// MessageId: 18904 (Request)
message LivenessTaskTakeRequest {
  repeated int32 TaskIds = 10;
}

// MessageId: 23128 (Response)
message LivenessTaskTakeResponse {
  repeated int32 TaskIds = 9;
  ErrorCode ErrorCode = 7;
}

// MessageId: 29406 (Request)
message LivenessTakeRequest {
  repeated int32 Ids = 7;
}

// MessageId: 28680 (Response)
message LivenessTakeResponse {
  repeated int32 Ids = 1;
  ErrorCode ErrorCode = 6;
}

message RoleLoadEquipData {
  int32 RoleId = 1;
  int32 Pos = 2;
  int32 EquipIncId = 3;
}

message LoadEquipData {
  int32 RoleId = 1;
  int32 SkinId = 2;
}

enum gs_ {
  gs__Weapon = 0;
  gs__WeaponSkin = 1;
  gs__End = 2;
}

// MessageId: 15375 (Request)
message WeaponSkinRequest {
}

// MessageId: 23319 (Response)
message WeaponSkinResponse {
  ErrorCode ErrorCode = 2;
  repeated LoadEquipData EquipList = 3;
}

// MessageId: 23402 (Request)
message EquipTakeOnRequest {
  RoleLoadEquipData Data = 10;
}

// MessageId: 17231 (Response)
message EquipTakeOnResponse {
  ErrorCode ErrorCode = 6;
  repeated RoleLoadEquipData DataList = 9;
}

// MessageId: 25149 (Notify)
message EquipTakeOnNotify {
  repeated RoleLoadEquipData DataList = 13;
}

// MessageId: 25097 (Notify)
message UnlockSkinDataNotify {
  repeated int32 PhantomSkinList = 4;
  bool IsLogin = 15;
}

// MessageId: 17799 (Notify)
message WeaponSkinDeleteNotify {
  int32 RoleId = 8;
  int32 SkinId = 15;
}

// MessageId: 23490 (Request)
message EquipWeaponSkinRequest {
  LoadEquipData Data = 4;
}

// MessageId: 28104 (Response)
message EquipWeaponSkinResponse {
  ErrorCode ErrorCode = 8;
  repeated LoadEquipData DataList = 2;
}

// MessageId: 27648 (Request)
message SendEquipSkinRequest {
  int32 RoleId = 13;
}

// MessageId: 19536 (Response)
message SendEquipSkinResponse {
  ErrorCode ErrorCode = 5;
}

message AceBlackProductAccountInfo {
  string TdmDeviceId = 1;
  bool IsRoot = 2;
  bool IsSimulator = 3;
}

// MessageId: 101 (Request)
message CreateCharacterRequest {
  int32 Sex = 1;
  string Name = 2;
}

// MessageId: 102 (Response)
message CreateCharacterResponse {
  ErrorCode ErrorCode = 1;
  string Name = 2;
  int32 PlayerId = 3;
  int32 CreateTime = 4;
}

message DevLoginCheckData {
  int32 ProtoVersion = 1;
  string ProtoMD5 = 2;
  int32 ConfigVersion = 3;
  string ConfigMD5 = 4;
  string BranchName = 5;
  string ProtoSeedMD5 = 6;
}

// MessageId: 103 (Request)
message LoginRequest {
  oneof p5s {
    DevLoginCheckData DevLoginCheckData = 9;
  }
  int32 Id = 1;
  string Account = 2;
  string LoginTraceId = 3;
  string Token = 4;
  string AppVersion = 5;
  string LauncherVersion = 6;
  string ResourceVersion = 7;
  ClientBasicInfo ClientBasicInfo = 8;
  PublicResourceVersionInfo PublicResourceVersionInfo = 10;
  AceBlackProductAccountInfo AceBlackProductAccountInfo = 11;
  bool PushNotificationsEnabled = 12;
  string ClientId = 13;
  string SdkUserId = 14;
  string SdkOnlineId = 15;
  string SdkAccountId = 16;
  string PackageClientFightConfig = 17;
  int32 DOLLARVl = 18;
  int32 sQ_ = 19;
  bool KT1 = 20;
  int32 QR1 = 21;
}

// MessageId: 104 (Response)
message LoginResponse {
  ErrorCode ErrorCode = 1;
  string ReconnectToken = 2;
  int64 Timestamp = 3;
  string Platform = 4;
  int32 ClientWaitingMode = 5;
  int32 ClientWaitingTime = 6;
  int32 ClientAutoInInterval = 7;
  int32 ClientDisplayTime = 8;
}

// MessageId: 105 (Request)
message EnterGameRequest {
  int32 SingleInstanceId = 1;
  int32 MultiInstanceId = 2;
  int32 Mode = 3;
  Vector Pos = 4;
}

// MessageId: 106 (Response)
message EnterGameResponse {
  ErrorCode ErrorCode = 1;
  int32 ClientWaitingMode = 2;
  int32 ClientWaitingTime = 3;
  int32 ClientAutoInInterval = 4;
}

// MessageId: 107 (Request)
message ReconnectRequest {
  int32 PlayerId = 1;
  int32 LastSvrSeqNo = 2;
  string ReconnectToken = 3;
  string ReconnectTraceId = 4;
}

// MessageId: 108 (Response)
message ReconnectResponse {
  ErrorCode ErrorCode = 1;
  int32 LastRecvSeqNo = 2;
  int64 Timestamp = 3;
  bool IsPermittedSilentLogin = 4;
}

// MessageId: 109 (Notify)
message LoginNotify {
  int32 Id = 1;
}

// MessageId: 110 (Notify)
message LogoutNotify {
  oneof M5s {
    BanLogoutInfo DOLLARxs = 3;
  }
  ErrorCode ErrorCode = 1;
  int32 logoutReason = 2;
}

// MessageId: 111 (Request)
message ProtoKeyRequest {
  bool IsLogin = 1;
  string TraceId = 2;
}

// MessageId: 112 (Response)
message ProtoKeyResponse {
  ErrorCode ErrorCode = 1;
  int32 Type = 2;
  bytes Key = 3;
}

// MessageId: 113 (Notify)
message PushDataCompleteNotify {
}

// MessageId: 114 (Push)
message ExitGamePush {
}

// MessageId: 116 (Push)
message VersionInfoPush {
  string AppVersion = 1;
  string LauncherVersion = 2;
  string ResourceVersion = 3;
}

// MessageId: 115 (Notify)
message BackToGameNotify {
}

// MessageId: 22589 (Request)
message LoadingConfigAsyncRequest {
}

// MessageId: 17934 (Response)
message LoadingConfigAsyncResponse {
  repeated cOc1 SetLoadingConfig = 2;
}

message cOc1 {
  int32 Id = 1;
  int64 BeginTime = 2;
  int64 EndTime = 3;
}

message PublicResourceVersionInfo {
  int32 PublicJsonVersion = 1;
  int32 PublicMiscVersion = 2;
  int32 PublicUniverseEditorVersion = 3;
}

// MessageId: 16969 (Request)
message CheckPublicResourceVersionRequest {
  PublicResourceVersionInfo PublicResourceVersionInfo = 9;
}

// MessageId: 25797 (Response)
message CheckPublicResourceVersionResponse {
  int32 ErrorId = 1;
  int32 TipLevel = 14;
}

// MessageId: 25407 (Request)
message LordGymInfoRequest {
}

// MessageId: 22902 (Response)
message LordGymInfoResponse {
  repeated int32 UnlockLoadGymIds = 2;
  repeated int32 ReadLoadGymIds = 15;
  repeated LordGymPassRecord LordGymPassRecords = 13;
}

message RoleBrief {
  int32 RoleId = 1;
  int32 Level = 2;
}

message LordGymPassRecord {
  int32 LoadGymId = 1;
  int32 PassTime = 2;
  repeated RoleBrief RoleIds = 3;
}

// MessageId: 20925 (Notify)
message LordGymUnlockNotify {
  repeated int32 UnlockLoadGymIds = 12;
}

// MessageId: 24100 (Request)
message LordGymBeginRequest {
  int32 LoadGymId = 8;
}

// MessageId: 18359 (Response)
message LordGymBeginResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 19917 (Request)
message LordGymReadRequest {
  int32 LoadGymId = 4;
}

// MessageId: 21386 (Response)
message LordGymReadResponse {
  ErrorCode ErrorCode = 14;
}

message ItemData {
  int32 ItemId = 1;
  int32 ItemIncId = 2;
  int32 Count = 3;
}

// MessageId: 17069 (Notify)
message LordGymLevelPlayResultNotify {
  bool IsSuccess = 12;
  bool IsNewRecord = 8;
  LordGymPassRecord LordGymPassRecord = 10;
  int32 p8_ = 13;
  repeated ItemData ItemDatas = 14;
  bool usc = 5;
}

enum MailLevel {
  MailLevel_None = 0;
  MailLevel_General = 1;
  MailLevel_Important = 2;
}

enum MailDeleteReason {
  MailDeleteReason_OverTime = 0;
  MailDeleteReason_OverSize = 1;
  MailDeleteReason_OfflineEvent = 2;
  MailDeleteReason_PublicCancelled = 3;
  MailDeleteReason_PlayerDelete = 4;
}

message PbMailAttachment {
  int32 Id = 1;
  int32 Count = 2;
}

message PbMailInfo {
  string Id = 1;
  int64 ReceivedTime = 2;
  int64 ReadTime = 3;
  int32 State = 4;
  int32 Level = 5;
  string Title = 6;
  string Content = 7;
  string Sender = 8;
  int32 ValidTime = 9;
  int32 ReadValidTime = 10;
  repeated PbMailAttachment Attachments = 11;
  int32 ConfigId = 12;
  int64 ExpiryTime = 13;
}

// MessageId: 20762 (Notify)
message MailInfosNotify {
  repeated PbMailInfo MailInfos = 3;
}

// MessageId: 17210 (Notify)
message MailDeleteNotify {
  string Id = 6;
  int32 Reason = 8;
}

enum MailAddReason {
  MailAddReason_Gm = 0;
  MailAddReason_BagFull = 1;
  MailAddReason_Public = 2;
  MailAddReason_OfflineEventAdd = 3;
  MailAddReason_QuestNpcAction = 4;
  MailAddReason_D5s = 5;
  MailAddReason_ReportPlayer = 6;
  MailAddReason_MonthCardRemind = 7;
  MailAddReason_BattlePassSettle = 8;
  MailAddReason_PayRebate = 9;
  MailAddReason_RemoveTemporaryTeleportBySceneDataLayerChange = 10;
  MailAddReason_R8n = 11;
  MailAddReason_PayRefund = 12;
  MailAddReason_Replenishment = 13;
  MailAddReason_GatherActivitySettle = 14;
  MailAddReason_HarvestActivitySettle = 15;
  MailAddReason_RoleTrialActivitySettle = 16;
  MailAddReason_KuroBbsFirstBind = 17;
  MailAddReason_ParkourActivitySettle = 18;
  MailAddReason_DailyAdventureActivitySettle = 19;
  MailAddReason_LongShanActivitySettle = 20;
  MailAddReason_SignActivitySettle = 21;
  MailAddReason_BossRushActivitySettle = 22;
  MailAddReason_PromotionActivity = 23;
  MailAddReason_RogueActivitySettle = 24;
  MailAddReason_TowerDefenceActivitySettle = 25;
  MailAddReason_ExploreToolUnlock = 26;
  MailAddReason_CalabashFixLevelExp = 27;
  MailAddReason_ActivityNotice = 28;
  MailAddReason_TrackMoonPhaseSettle = 29;
  MailAddReason_TrackMoonSettle = 30;
  MailAddReason_CircumFluenceSettle = 31;
  MailAddReason_CorniceMeetingActivitySettle = 32;
  MailAddReason_RiskHarvestSettle = 33;
  MailAddReason_BlackCoastThemeSettle = 34;
  MailAddReason_PreheatSignSettle = 35;
  MailAddReason_MowTower = 36;
  MailAddReason_RogueWhiteCatLimitRewardReissue = 37;
  MailAddReason_SpecialItemUnlock = 38;
  MailAddReason_SpringSignSettle = 39;
  MailAddReason_RoleSkinTrialActivitySettle = 40;
  MailAddReason_FishingActivityLimitSettleReward = 41;
  MailAddReason_TeamParkOurSettleReward = 42;
  MailAddReason_RogueWeeklyCycleAward = 43;
  MailAddReason_BabelTowerDailyTaskResetReward = 44;
  MailAddReason_BabelTowerCloseReward = 45;
  MailAddReason_ExploreActivitySettle = 46;
  MailAddReason_AvignonMailSettle = 47;
  MailAddReason_CircumFluenceCloseNotice = 48;
  MailAddReason_RogueResTaskAwardRecoup = 49;
  MailAddReason_CiacconaActivitySettle = 50;
  MailAddReason_DangoMonopolyGridReward = 51;
  MailAddReason_DangoMonopolyBoardReward = 52;
  MailAddReason_AbyssActivityRewardSettle = 53;
  MailAddReason_RacingBetsActivitySettle = 54;
  MailAddReason_ConsumptiveActivitySettle = 55;
  MailAddReason_ConsumptiveShopSettle = 56;
  MailAddReason_SlashAndTowerSettle = 57;
  MailAddReason_TowerMailSettle = 58;
  MailAddReason_BirthDaySettle = 59;
  MailAddReason_RacingBetsActivityEnd = 60;
}

// MessageId: 27199 (Notify)
message MailAddNotify {
  PbMailInfo NewMail = 15;
  int32 Reason = 1;
}

// MessageId: 24432 (Request)
message MailReadRequest {
  string Id = 14;
}

// MessageId: 29881 (Response)
message MailReadResponse {
  string Id = 3;
  int32 State = 10;
  ErrorCode ErrorCode = 15;
  int64 ReadTime = 6;
  int64 ExpiryTime = 7;
}

// MessageId: 29764 (Request)
message MailGetAttachmentRequest {
  repeated string MailIds = 9;
}

// MessageId: 17603 (Response)
message MailGetAttachmentResponse {
  map<string, int32> SuccessIdMap = 6;
  ErrorCode ErrorCode = 15;
}

// MessageId: 27790 (Request)
message MailDeleteRequest {
  repeated string MailIds = 5;
}

// MessageId: 18915 (Response)
message MailDeleteResponse {
  repeated string SuccessIds = 14;
  ErrorCode ErrorCode = 8;
}

// MessageId: 27216 (Request)
message MailBindInfoRequest {
}

// MessageId: 20596 (Response)
message MailBindInfoResponse {
  MailBind MailBind = 13;
}

message MailBind {
  bool IsBind = 1;
  bool IsReward = 2;
  int64 CloseTime = 3;
}

// MessageId: 19410 (Request)
message MailBindRewardRequest {
}

// MessageId: 23708 (Response)
message MailBindRewardResponse {
  ErrorCode ErrorCode = 7;
}

// MessageId: 25152 (Request)
message MailBindRequest {
}

// MessageId: 19971 (Response)
message MailBindResponse {
}

// MessageId: 16849 (Notify)
message MailBindInfoNotify {
  MailBind MailBind = 2;
}

message MarkPointInfo {
  float PosX = 1;
  float PosY = 2;
  float PosZ = 3;
  int32 ConfigId = 4;
  int32 MarkId = 5;
  int32 IsTrace = 6;
  int32 MarkType = 7;
  int32 MapId = 8;
  bool IsServerDisable = 9;
}

message MarkPointRequestInfo {
  float PosX = 1;
  float PosY = 2;
  float PosZ = 3;
  int32 ConfigId = 4;
  int32 MarkType = 5;
  bool MarkInfo = 6;
  int32 IsTrace = 7;
  int32 MapId = 8;
}

message TreasureBoxParam {
  repeated MarkPointRequestInfo TreasureBox = 1;
  int64 DetectionSlotId = 2;
}

message A5s {
  repeated MarkPointInfo MarkPointInfo = 1;
}

message vs_ {
  repeated MarkPointInfo MarkPointInfo = 1;
}

// MessageId: 26780 (Request)
message MapMarkInfoRequest {
}

// MessageId: 28616 (Response)
message MapMarkInfoResponse {
  ErrorCode ErrorCode = 9;
  repeated MarkPointInfo InfoList = 7;
  repeated MapMarkShowInfo ShowMarkIds = 3;
}

// MessageId: 18691 (Request)
message MapUnlockFieldInfoRequest {
}

// MessageId: 23293 (Response)
message MapUnlockFieldInfoResponse {
  ErrorCode ErrorCode = 11;
  repeated int32 FieldId = 13;
}

enum MapMarkShowFlag {
  MapMarkShowFlag_Hide = 0;
  MapMarkShowFlag_ShowNormal = 1;
  MapMarkShowFlag_ShowDisable = 2;
}

message MapMarkShowInfo {
  int32 MarkId = 1;
  bool IsShow = 2;
  uint32 ShowFlag = 3;
}

// MessageId: 17961 (Notify)
message MapMarkShowIdInfoUpdateNotify {
  int32 MarkId = 14;
  bool IsShow = 15;
  bool NeedFocus = 3;
  uint32 ShowFlag = 5;
}

// MessageId: 19481 (Notify)
message DynamicMapMarkerNotify {
  int32 MarkId = 7;
  bool IsServerDisable = 3;
}

message TemporaryTeleportParam {
  int64 temporaryTeleportId = 1;
}

message w5s {
  enum ENUMS {
    ENUMS_NotCreate = 0;
    ENUMS_Alive = 1;
    ENUMS_Death = 2;
  }


}
// MessageId: 16211 (Request)
message MapMarkRequest {
  oneof Params {
    TemporaryTeleportParam TemporaryTeleportParam = 2;
    TreasureBoxParam TreasureBoxParam = 10;
  }
  MarkPointRequestInfo MarkPointRequestInfo = 5;
}

// MessageId: 18215 (Response)
message MapMarkResponse {
  ErrorCode ErrorCode = 9;
  MarkPointInfo Info = 13;
}

// MessageId: 17315 (Request)
message RemoveMapMarkRequest {
  repeated int32 MarkList = 10;
}

// MessageId: 18868 (Response)
message RemoveMapMarkResponse {
  ErrorCode ErrorCode = 1;
  repeated int32 MarkList = 5;
}

// MessageId: 27560 (Notify)
message MapUnlockFieldNotify {
  int32 FieldId = 4;
}

// MessageId: 22793 (Request)
message MapTraceInfoRequest {
}

// MessageId: 29157 (Response)
message MapTraceInfoResponse {
  ErrorCode ErrorCode = 5;
  repeated int32 MarkIdList = 7;
}

// MessageId: 22781 (Request)
message MapTraceRequest {
  int32 MarkId = 10;
}

// MessageId: 18918 (Response)
message MapTraceResponse {
  ErrorCode ErrorCode = 3;
  int32 MarkId = 5;
}

// MessageId: 16932 (Request)
message MapCancelTraceRequest {
  int32 MarkId = 7;
}

// MessageId: 26268 (Response)
message MapCancelTraceResponse {
  ErrorCode ErrorCode = 11;
  int32 MarkId = 7;
}

// MessageId: 21865 (Request)
message MapReplaceMarkRequest {
  int32 MarkId = 4;
  int32 ConfigId = 1;
}

// MessageId: 22070 (Response)
message MapReplaceMarkResponse {
  ErrorCode ErrorCode = 11;
  int32 MarkId = 12;
  int32 ConfigId = 8;
}

// MessageId: 27913 (Notify)
message TrackMapMarkRemoveNotify {
  int32 MarkId = 3;
}

// MessageId: 17426 (Notify)
message TrackMapMarkAddNotify {
  int32 MarkId = 9;
}

// MessageId: 15329 (Request)
message das {
  int32 MarkType = 5;
}

// MessageId: 26447 (Response)
message mas {
  ErrorCode ErrorCode = 7;
  repeated int32 MarkIdList = 8;
}

// MessageId: 18281 (Notify)
message MapMarkInfoNotify {
  repeated MarkPointInfo InfoList = 2;
  repeated MapMarkShowInfo ShowMarkIds = 3;
  repeated int32 UnlockMarkIds = 11;
  repeated mhc2 dhc = 7;
  repeated td1 Zu1 = 12;
}

// MessageId: 18874 (Notify)
message MapMarkServerOpenStateNotify {
  int32 MarkId = 3;
}

enum MapOpenType {
  MapOpenType_HotKey = 0;
  MapOpenType_Mouse = 1;
  MapOpenType_Other = 2;
}

// MessageId: 17929 (Push)
message MapOpenPush {
  int32 OpenType = 15;
}

// MessageId: 21262 (Request)
message UpdateCustomMapMarkPositionRequest {
  int32 MarkId = 2;
  Vector Pos = 11;
}

// MessageId: 25408 (Response)
message UpdateCustomMapMarkPositionResponse {
  ErrorCode ErrorCode = 5;
}

// MessageId: 29474 (Notify)
message MapMarkDynamicRemoveNotify {
  repeated int32 MarkList = 11;
}

// MessageId: 16907 (Notify)
message Sas {
  MarkPointInfo Info = 14;
  A5s pbs = 1;
  vs_ bo_ = 10;
}

// MessageId: 23133 (Notify)
message Lgs {
  repeated int32 UnlockMultiMapIds = 14;
  repeated int32 UnlockMapBlockIds = 15;
}

// MessageId: 29073 (Notify)
message UnlockMapBlockIdsNotify {
  repeated int32 UnlockMapBlockIds = 12;
}

// MessageId: 26599 (Notify)
message UnlockMultiMapIdsNotify {
  repeated int32 UnlockMultiMapIds = 14;
}

// MessageId: 28920 (Request)
message TrackEnrichmentAreaRequest {
  int32 AreaId = 1;
}

// MessageId: 27796 (Response)
message TrackEnrichmentAreaResponse {
  ErrorCode ErrorCode = 6;
}

message mhc2 {
  int32 InstId = 1;
  int32 TemplateId = 2;
  Vector Pos = 3;
}

message td1 {
  int32 Id = 1;
  int32 MapId = 2;
  string ed1 = 3;
}

// MessageId: 25917 (Notify)
message Ju11 {
  repeated td1 Zu1 = 1;
}

enum MatchFailReason {
  MatchFailReason_TimeOut = 0;
  MatchFailReason_NotAccept = 1;
  MatchFailReason_ServerError = 2;
}

enum MatchTeamState {
  MatchTeamState_WaiteConfirm = 0;
  MatchTeamState_ReadyConfirm = 1;
  MatchTeamState_EnterInst = 2;
  MatchTeamState_EnterInstStart = 3;
}

enum MatchPlayerLeaveReason {
  MatchPlayerLeaveReason_NotConfirm = 0;
  MatchPlayerLeaveReason_Refuse = 1;
  MatchPlayerLeaveReason_Initiative = 2;
  MatchPlayerLeaveReason_BeKick = 3;
  MatchPlayerLeaveReason_HostLeave = 4;
  MatchPlayerLeaveReason_EnterInstance = 5;
  MatchPlayerLeaveReason_MatchServerDisable = 6;
  MatchPlayerLeaveReason_MatchGM = 7;
  MatchPlayerLeaveReason_EnterBigWorldInst = 8;
  MatchPlayerLeaveReason_EnableFunction = 9;
  MatchPlayerLeaveReason_DisabledOnlineNodeEvent = 10;
  MatchPlayerLeaveReason_DoCloseOnlineMatching = 11;
  MatchPlayerLeaveReason_PlayFlow = 12;
  MatchPlayerLeaveReason_MatchClientVersion = 13;
}

enum EMatchPlayerUiState {
  EMatchPlayerUiState_Wait = 0;
  EMatchPlayerUiState_Confirm = 2;
  EMatchPlayerUiState_Matching = 3;
  EMatchPlayerUiState_CTs = 4;
  EMatchPlayerUiState_Selecting = 5;
  EMatchPlayerUiState_Teleporting = 6;
  EMatchPlayerUiState_Max = 7;
}

enum ys_ {
  ys__Accept = 0;
  ys__ActiveRefuse = 1;
  ys__TimeOutRefuse = 2;
}

// MessageId: 21542 (Request)
message Eas {
  int32 InstId = 5;
  bool U9n = 10;
  int32 EntranceId = 6;
}

// MessageId: 16718 (Response)
message yas {
  ErrorCode ErrorCode = 15;
}

// MessageId: 25196 (Notify)
message Ias {
  int32 InstId = 2;
}

// MessageId: 17496 (Request)
message CancelMatchRequest {
}

// MessageId: 16127 (Response)
message CancelMatchResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 25550 (Notify)
message LeaderCancelMatchNotify {
  int32 PlayerId = 8;
}

// MessageId: 16277 (Notify)
message MatchingTimeoutNotify {
  int32 Reason = 9;
}

message O5s2 {
  oneof fAc1 {
    gAc uAc = 5;
  }
  int32 RoleId = 1;
  int32 RoleLevel = 2;
  int32 ProtocolPhantomIdList = 3;
  int32 RoleSkinId = 4;
}

message k5s {
  int32 PlayerId = 1;
  repeated O5s2 RoleInfo = 2;
  string PlayerName = 3;
  bool ybs2 = 4;
  bool IsReady = 5;
  int32 w9n = 6;
  string SdkOnlineId = 7;
  int32 dAc3 = 8;
}

message N5s {
  int32 HostId = 1;
  repeated k5s PlayerInfos = 2;
  int32 TeamState = 3;
  Vector Location = 4;
  Rotator Rotation = 5;
}

// MessageId: 20954 (Notify)
message MatchTeamNotify {
  N5s Ibs = 5;
}

// MessageId: 16945 (Request)
message MatchConfirmRequest {
  bool R9n = 13;
}

// MessageId: 16024 (Response)
message MatchConfirmResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 20033 (Notify)
message MatchConfirmNotify {
  int32 Tbs2 = 10;
}

// MessageId: 29332 (Notify)
message MatchStateChangedNotify {
}

// MessageId: 18552 (Notify)
message MatchTeamStateNotify {
  int32 TeamState = 10;
}

// MessageId: 22478 (Request)
message MatchChangeRoleRequest {
  oneof fAc1 {
    pOc2 uAc = 8;
  }
  repeated int32 RoleId = 7;
  repeated int32 PhantomIdList = 13;
}

// MessageId: 16089 (Response)
message MatchChangeRoleResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 23779 (Notify)
message Gas {
  int32 PlayerId = 13;
  repeated O5s2 RoleInfo = 5;
}

// MessageId: 27505 (Request)
message MatchChangeReadyRequest {
  bool IsReady = 5;
}

// MessageId: 22431 (Response)
message MatchChangeReadyResponse {
  ErrorCode ErrorCode = 6;
}

// MessageId: 27712 (Notify)
message MatchChangeReadyNotify {
  int32 PlayerId = 3;
  bool IsReady = 2;
}

// MessageId: 22605 (Request)
message LeaveMatchTeamRequest {
}

// MessageId: 26583 (Response)
message LeaveMatchTeamResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 18943 (Notify)
message LeaveMatchTeamNotify {
  int32 PlayerId = 10;
  int32 Reason = 7;
}

// MessageId: 20440 (Notify)
message jas1 {
  k5s PlayerInfo = 10;
}

// MessageId: 19923 (Request)
message KickMatchTeamPlayerRequest {
  int32 PlayerId = 5;
}

// MessageId: 20932 (Response)
message KickMatchTeamPlayerResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 21642 (Request)
message SetMatchTeamMatchFlagRequest {
  bool IsMatch = 7;
}

// MessageId: 17667 (Response)
message SetMatchTeamMatchFlagResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 22196 (Notify)
message TeamMatchFlagNotify {
  bool MatchFlag = 11;
  int32 InstId = 4;
}

// MessageId: 16168 (Request)
message EnterMatchInstRequest {
}

// MessageId: 28036 (Response)
message EnterMatchInstResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 29840 (Request)
message TeamChallengeRequest {
  int32 InstId = 11;
  bool U9n = 13;
  int32 EntranceId = 2;
}

// MessageId: 17951 (Response)
message TeamChallengeResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 25415 (Request)
message TeamMatchInviteRequest {
  int32 InstId = 10;
}

// MessageId: 21240 (Response)
message TeamMatchInviteResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 18059 (Notify)
message TeamMatchInviteNotify {
  int32 HostId = 13;
  int32 InstId = 2;
}

// MessageId: 24307 (Notify)
message kzl3 {
  int32 InstId = 3;
  ErrorCode ErrorCode = 5;
}

// MessageId: 29837 (Request)
message TeamMatchAcceptInviteRequest {
  int32 CIa = 4;
  int32 HostId = 6;
  int32 InstId = 13;
}

// MessageId: 16609 (Response)
message TeamMatchAcceptInviteResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 20141 (Notify)
message TeamMatchAcceptInviteNotify {
  int32 CIa = 6;
  int32 PlayerId = 7;
}

// MessageId: 25609 (Request)
message MatchChangePlayerUiStateRequest {
  int32 w9n = 9;
}

// MessageId: 21775 (Response)
message MatchChangePlayerUiStateResponse {
  ErrorCode ErrorCode = 14;
}

// MessageId: 20769 (Notify)
message MatchChangePlayerUiStateNotify {
  int32 PlayerId = 3;
  int32 w9n = 6;
}

message gAc {
  oneof CAc2 {
    pAc2 mAc = 1;
  }
}

message pAc2 {
  Wac2 J6n = 1;
}

message vOc1 {
}

message pOc2 {
  oneof CAc2 {
    vOc1 mAc = 1;
  }
}

// MessageId: 29397 (Notify)
message MessageDecodeFailNotify {
  ErrorCode ErrorCode = 15;
  uint32 Conv = 10;
  string ChannelId = 2;
  int32 SeqNo = 4;
}

// MessageId: 18955 (Notify)
message fhs {
  MonsterGachaDataPb MonsterGachaDataPb = 7;
}

// MessageId: 15432 (Request)
message MonthCardRequest {
}

// MessageId: 23571 (Response)
message MonthCardResponse {
  int32 Days = 5;
  bool IsDailyGot = 7;
  ErrorCode ErrorCode = 13;
}

// MessageId: 19651 (Notify)
message MonthCardDailyRewardNotify {
  int32 ItemId = 7;
  int32 Count = 9;
  int32 Days = 13;
}

// MessageId: 22928 (Notify)
message MonthCardUseNotify {
  int32 ItemId = 5;
  int32 Count = 4;
  int32 Days = 13;
  int32 DailyRewardItemId = 3;
  int32 DailyRewardItemCount = 12;
  int32 ExtendedDays = 14;
}

message MultiplayerInfo {
  int32 PlayerId = 1;
  string Name = 2;
  int32 IconId = 3;
  int32 Level = 4;
  string GuildName = 5;
  string GuildIntro = 6;
}

// MessageId: 18104 (Request)
message MultiplayerTeamRefreshNearListRequest {
}

// MessageId: 22908 (Response)
message MultiplayerTeamRefreshNearListResponse {
  ErrorCode ErrorCode = 2;
  int32 NextRefreshTime = 13;
  repeated MultiplayerInfo InfoList = 1;
  repeated string ErrorParams = 11;
}

message V5s {
  double qbs = 1;
  float Gbs2 = 2;
  int32 Obs2 = 3;
  sint32 kbs2 = 4;
  uint32 Nbs = 5;
  int64 Fbs = 6;
  sint64 Vbs1 = 7;
  uint64 DOLLARbs = 8;
  fixed32 Hbs = 9;
  fixed64 jbs = 10;
  sfixed32 Wbs = 11;
  sfixed64 Kbs = 12;
  bool Qbs2 = 13;
  string Xbs = 14;
  bytes Ybs1 = 15;
}

// MessageId: 23924 (Push)
message Ihs {
  V5s Data = 10;
}

// MessageId: 24328 (Notify)
message Ths {
  V5s Data = 10;
}

// MessageId: 19123 (Request)
message Lhs {
  V5s Data = 14;
}

// MessageId: 16446 (Response)
message Rhs {
  V5s Data = 4;
}

// MessageId: 19328 (Notify)
message NoviceJourneyRewardNotify {
  repeated int32 HadTakeReward = 11;
}

// MessageId: 26256 (Request)
message NoviceJourneyRewardRequest {
  int32 Level = 4;
}

// MessageId: 20821 (Response)
message NoviceJourneyRewardResponse {
  ErrorCode ErrorCode = 7;
}

message BeginnerBookData {
  int32 Id = 1;
  bool Unlocked = 2;
  bool Finished = 3;
}

// MessageId: 25757 (Request)
message BeginnerBookNewJourneyRequest {
  repeated int32 TaskIds = 10;
}

// MessageId: 17740 (Response)
message BeginnerBookNewJourneyResponse {
  repeated BeginnerBookData BeginnerBookData = 3;
}

message ParkourChallengeData {
  int32 ChallengeId = 1;
  int32 MaxScore = 3;
  int32 MiniTime = 4;
  repeated int32 ScoreReward = 5;
}

// MessageId: 26970 (Request)
message ParkourChallengeOpenRequest {
}

// MessageId: 29283 (Response)
message ParkourChallengeOpenResponse {
  repeated ParkourChallengeData Challenges = 12;
  repeated int32 ChallengeId = 15;
}

// MessageId: 15985 (Notify)
message ParkourChallengeOpenNotify {
  int32 ChallengeId = 5;
  bool Challenges = 2;
}

// MessageId: 15448 (Request)
message ParkourChallengeTakeRequest {
  int32 ChallengeId = 14;
  int32 ScoreIndex = 15;
}

// MessageId: 18995 (Response)
message ParkourChallengeTakeResponse {
  ErrorCode ErrorCode = 15;
  map<int32, int32> Rewards = 7;
}

// MessageId: 15529 (Notify)
message ParkourChallengeEndNotify {
  int32 ChallengeId = 1;
  int32 Score = 5;
  int32 Duration = 11;
  bool IsComplete = 12;
}

// MessageId: 22592 (Request)
message ParkourChallengeTransRequest {
  int32 ChallengeId = 7;
}

// MessageId: 28989 (Response)
message ParkourChallengeTransResponse {
  ErrorCode ErrorCode = 3;
}

enum PayShopUpdateType {
  PayShopUpdateType_None = 0;
  PayShopUpdateType_Daily = 1;
  PayShopUpdateType_Weekly = 2;
  PayShopUpdateType_Monthly = 3;
  PayShopUpdateType_Forever = 4;
}

message PayItemInfo {
  int32 Id = 1;
  int32 PayId = 2;
  int32 ItemId = 3;
  int32 ItemCount = 4;
  int32 BonusItemCount = 5;
  int32 SpecialBonusItemCount = 6;
  bool CanSpecialBonus = 7;
  string StageImage = 8;
  string ProductId = 9;
  string Amount = 10;
}

message PayGiftInfo {
  int32 Id = 1;
  int32 PayId = 2;
  int32 ItemId = 3;
  int32 ItemCount = 4;
  int32 Sort = 5;
  int32 BuyLimit = 6;
  int32 BoughtCount = 7;
  string StageImage = 8;
  int64 BeginTime = 9;
  int64 EndTime = 10;
  string ProductId = 11;
  string Amount = 12;
  int32 TabId = 13;
  int32 Type = 14;
  bool Locked = 15;
  bool IsCanBuy = 16;
  bool IsRemind = 17;
  int32 BuyCondition = 18;
  int32 M2_ = 19;
  string E2_ = 20;
  string Desc = 21;
  int32 UpdateType = 22;
  int64 UpdateTime = 23;
}

// MessageId: 28790 (Request)
message PayInfoRequest {
  string Version = 2;
}

// MessageId: 26603 (Response)
message PayInfoResponse {
  repeated PayItemInfo Infos = 5;
  string Version = 6;
  ErrorCode ErrorCode = 12;
}

// MessageId: 26159 (Request)
message PayItemRechargeRequest {
  int32 Id = 1;
  string Version = 5;
}

// MessageId: 19865 (Response)
message PayItemRechargeResponse {
  string ReceiptId = 13;
  ErrorCode ErrorCode = 12;
  string CallbackUrl = 15;
}

// MessageId: 28243 (Notify)
message PayItemSuccessNotify {
  int32 Id = 3;
  string ReceiptId = 5;
  int32 ItemId = 8;
  int32 ItemCount = 10;
}

// MessageId: 25341 (Notify)
message PayItemSpecialBonusReset {
  repeated int32 Ids = 9;
}

// MessageId: 20667 (Request)
message PayGiftInfoRequest {
  string Version = 3;
}

// MessageId: 22727 (Response)
message PayGiftInfoResponse {
  repeated PayGiftInfo Infos = 2;
  string Version = 11;
  ErrorCode ErrorCode = 7;
}

// MessageId: 21623 (Request)
message PayGiftSuccessRequest {
  int32 Id = 13;
  string Version = 5;
}

// MessageId: 28248 (Response)
message PayGiftSuccessResponse {
  string ReceiptId = 15;
  ErrorCode ErrorCode = 6;
  string CallbackUrl = 1;
}

// MessageId: 15570 (Notify)
message PayGiftSuccessNotify {
  int32 Id = 1;
  string ReceiptId = 10;
  int32 ItemId = 9;
  int32 ItemCount = 13;
  PayGiftInfo PayGiftInfo = 7;
}

// MessageId: 25535 (Notify)
message wXl {
  repeated PayGiftInfo Gifts = 12;
}

message PayShopPrice {
  int32 Id = 1;
  int32 Count = 2;
  int32 vBs2 = 3;
}

enum PayShopItemType {
  PayShopItemType_Normal = 0;
  PayShopItemType_Direct = 1;
}

message PayShopItem {
  int32 Id = 1;
  int32 ItemId = 3;
  int32 ItemCount = 4;
  bool Locked = 5;
  int32 BuyLimit = 6;
  int32 BoughtCount = 7;
  PayShopPrice Price = 8;
  int64 BeginTime = 9;
  int64 EndTime = 10;
  int64 BeginPromotionTime = 11;
  int64 EndPromotionTime = 12;
  int32 UpdateType = 13;
  int64 UpdateTime = 14;
  PayShopItemType ShopItemType = 15;
  int64 TagBeginTime = 17;
  int64 TagEndTime = 18;
  bool CanBuyGoods = 22;
  bool IsRemind = 23;
}

message PayShopInfo {
  int32 Id = 1;
  repeated PayShopItem Items = 2;
  int64 UpdateTime = 3;
}

message PayGiftShopInfo {
  repeated PayGiftInfo Gifts = 1;
  string Version = 2;
}

// MessageId: 26921 (Notify)
message PayShopInfoNotify {
  repeated PayShopInfo Infos = 8;
  string Version = 4;
  PayGiftShopInfo PayGiftShopInfo = 6;
}

// MessageId: 15053 (Request)
message PayShopInfoRequest {
  string Version = 7;
}

// MessageId: 16025 (Response)
message PayShopInfoResponse {
  repeated PayShopInfo Infos = 9;
  string Version = 12;
  ErrorCode ErrorCode = 13;
  PayGiftShopInfo PayGiftShopInfo = 11;
}

// MessageId: 25024 (Request)
message PayShopUpdateRequest {
  int32 Id = 3;
}

// MessageId: 29643 (Response)
message PayShopUpdateResponse {
  PayShopInfo Info = 4;
  ErrorCode ErrorCode = 6;
}

// MessageId: 16608 (Request)
message PayShopItemUpdateRequest {
  repeated int32 Q7n = 6;
}

// MessageId: 15430 (Response)
message PayShopItemUpdateResponse {
  repeated PayShopItem Items = 1;
  ErrorCode ErrorCode = 4;
}

// MessageId: 15774 (Request)
message PayShopBuyRequest {
  int32 Id = 5;
  int32 Count = 3;
  string Version = 13;
}

// MessageId: 27189 (Response)
message PayShopBuyResponse {
  int32 Id = 15;
  int32 Count = 14;
  ErrorCode ErrorCode = 1;
}

// MessageId: 28042 (Notify)
message PayShopUnlockGoodsNotify {
  repeated int32 UnlockIds = 12;
}

// MessageId: 19062 (Request)
message uls {
  int32 Id = 1;
  string Version = 2;
}

// MessageId: 18257 (Response)
message cls {
  string ReceiptId = 13;
  ErrorCode ErrorCode = 5;
  string CallbackUrl = 6;
}

// MessageId: 29659 (Notify)
message PayShopDirectBuyNotify {
  string ReceiptId = 12;
  int32 ShopItemId = 4;
  int32 ItemId = 5;
  int32 ItemCount = 8;
}

// MessageId: 26617 (Notify)
message PayShopConditionFinishNotify {
  repeated PayShopItem Items = 14;
}

message PhantomConsumeItem {
  int32 IncId = 1;
  int32 Count = 2;
  int32 ItemId = 3;
}

// MessageId: 22735 (Request)
message PhantomLevelUpRequest {
  int32 IncId = 3;
  repeated PhantomConsumeItem ConsumeList = 2;
}

// MessageId: 25229 (Response)
message PhantomLevelUpResponse {
  ErrorCode ErrorCode = 1;
  PhantomItem UpdateInfo = 8;
  map<int32, int32> ItemMap = 6;
}

// MessageId: 19844 (Notify)
message PhantomPutOnNotify {
  repeated RolePhantomEquipInfo EquipInfoList = 10;
}

// MessageId: 28002 (Request)
message PhantomPutOnRequest {
  int32 IncId = 1;
  int32 RoleId = 7;
  int32 Pos = 12;
}

// MessageId: 21068 (Response)
message PhantomPutOnResponse {
  ErrorCode ErrorCode = 4;
  repeated RolePhantomEquipInfo EquipInfoList = 10;
}

// MessageId: 25305 (Request)
message Mls2 {
  repeated int32 PhantomItemIncrId = 15;
}

// MessageId: 27754 (Response)
message Sls {
  ErrorCode ErrorCode = 11;
  map<int32, int32> ItemMap = 9;
}

// MessageId: 15932 (Request)
message Els {
  repeated int32 PhantomItemIncrId = 5;
}

// MessageId: 24049 (Response)
message yls1 {
  ErrorCode ErrorCode = 15;
  map<int32, int32> ItemMap = 9;
}

// MessageId: 18739 (Request)
message PhantomRecommendRequest {
  int32 RoleId = 5;
}

// MessageId: 15762 (Response)
message PhantomRecommendResponse {
  ErrorCode ErrorCode = 7;
  int32 RoleId = 6;
  repeated int32 MonsterIdList = 11;
  int32 MainPropId = 14;
  int32 FetterGroupId = 13;
}

// MessageId: 20791 (Request)
message PhantomAutoPutRequest {
  int32 RoleId = 15;
  repeated int32 PhantomItemIncrId = 6;
}

// MessageId: 24967 (Response)
message PhantomAutoPutResponse {
  ErrorCode ErrorCode = 8;
  repeated RolePhantomEquipInfo EquipInfoList = 12;
}

// MessageId: 21454 (Notify)
message PhantomItemUpdateNotify {
  repeated PhantomItem UpdateInfo = 2;
}

// MessageId: 18518 (Notify)
message RolePhantomPropUpdateNotify {
  repeated RolePhantomPropInfo Ows2 = 10;
}

// MessageId: 19888 (Request)
message PhantomIdentifyRequest {
  int32 IncrId = 10;
  int32 Count = 12;
}

// MessageId: 18869 (Response)
message PhantomIdentifyResponse {
  ErrorCode ErrorCode = 12;
  PhantomItem UpdateInfo = 6;
}

// MessageId: 15062 (Notify)
message PhantomBattleMaxCostNotify {
  int32 MaxCost = 10;
}

// MessageId: 29825 (Notify)
message PhantomSkinUnlockNotify {
  repeated int32 PhantomSkinList = 15;
}

// MessageId: 19392 (Request)
message PhantomSkinChangeRequest {
  int32 IncrId = 15;
  int32 SkinId = 1;
  bool ChangeDefault = 2;
}

// MessageId: 29953 (Response)
message PhantomSkinChangeResponse {
  ErrorCode ErrorCode = 11;
}

// MessageId: 29722 (Notify)
message qls {
  repeated int32 BBs = 5;
  repeated int32 qBs1 = 8;
}

// MessageId: 16048 (Request)
message PhantomRefiningRequest {
  repeated int32 IncId = 11;
}

// MessageId: 22362 (Response)
message PhantomRefiningResponse {
  ErrorCode ErrorCode = 11;
  repeated AddCountItemInfo Items = 14;
  repeated AddCountItemInfo GBs1 = 2;
  repeated PhantomItem OBs1 = 3;
}

// MessageId: 20589 (Request)
message CalabashBatchRefiningRequest {
  repeated int32 IncId = 6;
}

// MessageId: 15037 (Response)
message CalabashBatchRefiningResponse {
  ErrorCode ErrorCode = 15;
  repeated AddCountItemInfo Items = 1;
  repeated AddCountItemInfo GBs1 = 7;
  repeated PhantomItem OBs1 = 10;
}

// MessageId: 23213 (Request)
message Jrc {
  int32 b9n = 11;
  int32 zrc1 = 8;
}

// MessageId: 21216 (Response)
message Zrc2 {
  ErrorCode ErrorCode = 5;
  PhantomItem xPs2 = 12;
}

message RefreshVisionEquipGroupData {
  repeated int32 IncId = 1;
  string Name = 2;
}

// MessageId: 28713 (Request)
message VisionEquipGroupInfoRequest {
}

// MessageId: 18563 (Response)
message VisionEquipGroupInfoResponse {
  ErrorCode ErrorCode = 7;
  repeated RefreshVisionEquipGroupData VisionEquipList = 1;
}

// MessageId: 18484 (Request)
message AddVisionEquipGroupRequest {
  int32 RoleId = 3;
  string Name = 1;
}

// MessageId: 26997 (Response)
message AddVisionEquipGroupResponse {
  ErrorCode ErrorCode = 11;
  repeated RefreshVisionEquipGroupData VisionEquipList = 3;
}

// MessageId: 23955 (Request)
message Bv_ {
  int32 Index = 8;
}

// MessageId: 20225 (Response)
message kv_2 {
  ErrorCode ErrorCode = 15;
  repeated RefreshVisionEquipGroupData VisionEquipList = 6;
}

// MessageId: 18942 (Request)
message qv_2 {
  int32 Index = 9;
}

// MessageId: 15349 (Response)
message Fv_ {
  ErrorCode ErrorCode = 12;
  repeated RefreshVisionEquipGroupData VisionEquipList = 4;
}

// MessageId: 20600 (Request)
message Ov_1 {
  int32 Index = 8;
  string Name = 15;
}

// MessageId: 26989 (Response)
message Gv_ {
  ErrorCode ErrorCode = 6;
  repeated RefreshVisionEquipGroupData VisionEquipList = 9;
}

// MessageId: 19510 (Request)
message Ry_2 {
  int32 Index = 9;
  int32 RoleId = 5;
}

// MessageId: 27355 (Response)
message Ay_2 {
  ErrorCode ErrorCode = 13;
  repeated RolePhantomEquipInfo EquipInfoList = 9;
}

// MessageId: 16104 (Request)
message UnlockMusicRequest {
  repeated int32 Items = 9;
}

// MessageId: 29255 (Response)
message UnlockMusicResponse {
  repeated int32 Ao_ = 5;
  ErrorCode ErrorCode = 14;
}

// MessageId: 17551 (Request)
message GetMusicInfoRequest {
}

// MessageId: 25612 (Response)
message GetMusicInfoResponse {
  repeated int32 xo_1 = 11;
  int32 Po_ = 9;
  ErrorCode ErrorCode = 10;
}

// MessageId: 28752 (Request)
message SwitchMusicRequest {
  int32 pxl = 11;
}

// MessageId: 16879 (Response)
message SwitchMusicResponse {
  ErrorCode ErrorCode = 9;
}

message FragmentMemoryData {
  int32 Id = 1;
  int32 Flag = 2;
  int64 FinishTime = 3;
}

message FragmentMemoryItem {
  int32 Id = 1;
  repeated FragmentMemoryData Data = 2;
  bool IsUnlock = 3;
}

// MessageId: 22416 (Request)
message PhotoMemoryRequest {
}

// MessageId: 27909 (Response)
message PhotoMemoryResponse {
  repeated FragmentMemoryItem Item = 1;
}

// MessageId: 20889 (Notify)
message PhotoMemoryUpdateNotify {
  repeated FragmentMemoryItem Item = 5;
}

// MessageId: 21788 (Notify)
message PhotoMemoryCollectUpdateNotify {
  FragmentMemoryData Data = 3;
}

// MessageId: 27837 (Request)
message PhotoMemoryRewardRequest {
  repeated int32 Rewards = 14;
}

// MessageId: 25104 (Response)
message PhotoMemoryRewardResponse {
  ErrorCode ErrorCode = 4;
}

message VisionFetterRecommendInfo {
  int32 RecommendFetterGroupId = 1;
  int32 Usage = 2;
}

message GR_2 {
  int32 tL_1 = 1;
  int32 iL_1 = 2;
  int32 Usage = 3;
}

message FR_2 {
  int32 Cost = 1;
  repeated GR_2 GetMainAttrRecommendInfo = 2;
  repeated GR_2 GetSubAttrRecommendInfo = 3;
}

message NR_2 {
  repeated VisionFetterRecommendInfo VisionFetterRecommendInfo = 1;
  repeated FR_2 VisionAttrRecommendInfo = 2;
}

message VR_2 {
  map<int32, NR_2> RolePhantomRecommendInfos = 1;
}

// MessageId: 20746 (Request)
message RoleVisionRecommendDataRequest {
  int32 RoleId = 12;
}

// MessageId: 19089 (Response)
message RoleVisionRecommendDataResponse {
  ErrorCode ErrorCode = 2;
  repeated VisionFetterRecommendInfo VisionFetterRecommendInfo = 13;
}

// MessageId: 19840 (Request)
message RoleVisionRecommendAttrRequest {
  int32 RoleId = 10;
}

// MessageId: 24791 (Response)
message RoleVisionRecommendAttrResponse {
  ErrorCode ErrorCode = 2;
  repeated FR_2 VisionAttrRecommendInfo = 12;
}

message PassiveSkillInfo {
  int64 SkillId = 1;
  int64 SkillCdEndTime = 2;
}

message RolePassiveSkillInfo {
  int32 RoleId = 1;
  repeated PassiveSkillInfo PassiveSkillInfoList = 2;
}

// MessageId: 21850 (Notify)
message PassiveSkillNotify {
  repeated RolePassiveSkillInfo RolePassiveSkillInfoList = 4;
}

// MessageId: 25973 (Request)
message UpdatePlayerPassiveSkillRequest {
  int32 RoleId = 1;
  int64 PassiveSkillId = 11;
  int64 CdEndTime = 7;
}

// MessageId: 29005 (Response)
message UpdatePlayerPassiveSkillResponse {
  ErrorCode ErrorCode = 2;
}

message PlayerTitleData {
  int32 PlayerTitleId = 1;
  bool IsUnlock = 2;
  int64 UnlockTime = 3;
  int32 StarLevel = 4;
}

// MessageId: 18682 (Notify)
message UnDressedPlayerTitleListNotify {
  repeated PlayerTitleData eic = 13;
}

// MessageId: 15156 (Notify)
message SetDressedPlayerTitleNotify {
  int32 PlayerTitleId = 6;
  int32 CurPlayerTitleId = 4;
}

// MessageId: 15742 (Request)
message PlayerTitleDataRequest {
}

// MessageId: 26672 (Response)
message PlayerTitleDataResponse {
  repeated PlayerTitleData PlayerTitleData = 12;
  ErrorCode ErrorCode = 15;
}

// MessageId: 21980 (Request)
message ChangePlayerTitleRequest {
  int32 PlayerTitleId = 6;
}

// MessageId: 29509 (Response)
message ChangePlayerTitleResponse {
  ErrorCode ErrorCode = 5;
}

// MessageId: 23222 (Notify)
message PlayerVarNotify {
  map<string, VarDefinePb> VarInfos = 14;
}

enum MotionType {
  MotionType_Spurt = 0;
  MotionType_Pullback = 1;
  MotionType_BeLand = 2;
  MotionType_MotionJump = 3;
  MotionType_AirSprint = 4;
  MotionType_BackFlip = 5;
  MotionType_StepAcross = 6;
  MotionType_ClimbTop = 7;
  MotionType_LimitDodge = 8;
  MotionType_CounterAttack = 9;
}

// MessageId: 28445 (Request)
message PlayerMotionRequest {
  int32 Motion = 10;
}

// MessageId: 25792 (Response)
message PlayerMotionResponse {
  int32 ErrorId = 8;
}

// MessageId: 18173 (Request)
message PressRequest {
  int32 PayloadSize = 5;
  int32 NotifyCount = 11;
  bytes Payload = 6;
}

// MessageId: 29787 (Response)
message PressResponse {
  bytes Payload = 1;
}

// MessageId: 22614 (Notify)
message PressNotify {
  bytes Payload = 14;
}

// MessageId: 29947 (Request)
message PressGameRequest {
  int32 PayloadSize = 11;
  int32 NotifyCount = 14;
  bytes Payload = 6;
}

// MessageId: 18306 (Response)
message PressGameResponse {
  bytes Payload = 3;
}

// MessageId: 25621 (Notify)
message PressGameNotify {
  bytes Payload = 13;
}

// MessageId: 17993 (Request)
message ProgressBarFinishRequest {
  int64 EntityId = 1;
}

// MessageId: 28659 (Response)
message ProgressBarFinishResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 26003 (Notify)
message JSPatchNotify {
  string Content = 1;
}

enum QuestState {
  QuestState_InActive = 0;
  QuestState_Available = 1;
  QuestState_InProgress = 2;
  QuestState_Finish = 3;
  QuestState_Delete = 4;
}

message QuestInfo {
  int32 QuestId = 1;
  int32 Status = 2;
}

// MessageId: 24987 (Notify)
message QuestListNotify {
  repeated QuestInfo Quests = 14;
}

// MessageId: 20936 (Notify)
message TraceQuestNotify {
  int32 QuestId = 7;
}

// MessageId: 23842 (Request)
message TraceQuestRequest {
  int32 TraceType = 8;
  int32 QuestId = 9;
  int32 Operate = 10;
}

// MessageId: 17932 (Response)
message TraceQuestResponse {
  int32 ErrorId = 8;
}

// MessageId: 19915 (Notify)
message LDOLLARl {
  repeated int32 QuestIds = 6;
}

enum r8s2 {
  r8s_Enter = 0;
  r8s_Zbs = 1;
}

// MessageId: 21355 (Request)
message QuestFinishActionRequest {
  int32 QuestId = 8;
  int32 NodeId = 9;
  int32 ActionId = 12;
  int32 ActTime = 10;
}

// MessageId: 29065 (Response)
message QuestFinishActionResponse {
  int32 ErrorId = 5;
}

// MessageId: 19191 (Request)
message QuestActionRequest {
  int32 QuestId = 8;
  int32 NodeId = 1;
  int32 ActionId = 10;
  int32 ActTime = 3;
}

// MessageId: 17467 (Response)
message QuestActionResponse {
  int32 ErrorId = 14;
}

// MessageId: 24211 (Notify)
message QuestReadyListNotify {
  repeated int32 QuestId = 14;
}

// MessageId: 26951 (Notify)
message QuestShowListNotify {
  repeated int32 QuestId = 2;
}

// MessageId: 19833 (Request)
message QuestNpcMoveOverRequest {
  int64 EntityId = 15;
}

// MessageId: 24708 (Response)
message QuestNpcMoveOverResponse {
  int32 ErrorId = 9;
}

// MessageId: 22212 (Notify)
message QuestRedDotStateChangeNotify {
  int32 QuestId = 9;
  int64 TreeIncId = 4;
}

// MessageId: 19978 (Notify)
message QuestStateUpdateNotify {
  int32 QuestId = 11;
  QuestState State = 14;
}

// MessageId: 17983 (Request)
message QuestFinishActionEndRequest {
  repeated int32 QuestId = 1;
}

// MessageId: 20127 (Response)
message QuestFinishActionEndResponse {
  int32 ErrorId = 4;
}

// MessageId: 21713 (Notify)
message QuestFinishListNotify {
  repeated int32 QuestId = 3;
}

// MessageId: 19741 (Notify)
message DailyQuestUnlockAreaNotify {
  repeated int32 UnlockAreaIds = 1;
  repeated int32 UnlockInfluenceIds = 7;
  int32 t2s = 6;
  int32 i2s = 15;
  bool r2s = 5;
}

// MessageId: 27376 (Notify)
message DailyQuestStateNotify {
  repeated int32 GetReward = 11;
  map<int32, int32> AllQuest = 10;
}

// MessageId: 20778 (Request)
message DailyQuestChangePreferRequest {
  int32 TargetArea = 3;
  int32 TargetInfluence = 14;
}

// MessageId: 19559 (Response)
message DailyQuestChangePreferResponse {
  int32 ErrorId = 9;
}

// MessageId: 28757 (Request)
message DailyQuestGetRewardRequest {
  repeated int32 QuestId = 7;
}

// MessageId: 23549 (Response)
message DailyQuestGetRewardResponse {
  int32 ErrorId = 15;
  repeated DailyQuestReward Rewards = 8;
}

message DailyQuestReward {
  int32 ItemId = 1;
  int32 ItemCount = 2;
}

// MessageId: 27410 (Notify)
message DailyQuestCancelNotify {
  repeated int32 QuestIds = 8;
}

// MessageId: 22981 (Request)
message RoleQuestAcceptRequest {
  int32 QuestId = 9;
}

// MessageId: 27155 (Response)
message RoleQuestAcceptResponse {
  int32 ErrorId = 5;
}

// MessageId: 22871 (Notify)
message RoleQuestStateNotify {
  int32 UnlockPoint = 7;
  int32 MaxUnlockPoint = 11;
  repeated int32 InProgress = 2;
  repeated int32 Unlock = 4;
  repeated int32 Over = 3;
  int64 LastAddPointTime = 13;
}

// MessageId: 25206 (Notify)
message RoleQuestNewUnlockNotify {
  repeated int32 QuestIds = 15;
}

// MessageId: 23210 (Request)
message RoleQuestPointStateRequest {
}

// MessageId: 23269 (Response)
message RoleQuestPointStateResponse {
  int32 CurrPoint = 1;
  int32 MaxPoint = 13;
  int64 LastAddPointTime = 7;
}

// MessageId: 27787 (Notify)
message DestroyQuestsNotify {
  repeated int32 QuestIds = 15;
}

// MessageId: 28119 (Notify)
message AutoQuestNotify {
  bool IsAuto = 3;
}

// MessageId: 25770 (Request)
message QuestRedDotRequest {
  int32 QuestId = 8;
  int32 Operate = 6;
}

// MessageId: 26327 (Response)
message QuestRedDotResponse {
  int32 ErrorId = 10;
}

// MessageId: 17765 (Notify)
message QuestRedDotNotify {
  repeated int32 QuestId = 12;
}

// MessageId: 24388 (Request)
message ts1 {
  repeated int32 a2s = 6;
}

// MessageId: 28305 (Response)
message is1 {
  int32 BEs = 10;
}

// MessageId: 26321 (Notify)
message rs1 {
  repeated int32 a2s = 5;
}

// MessageId: 28810 (Request)
message CL1 {
  int32 QR1 = 14;
}

// MessageId: 23393 (Response)
message pL1 {
  int32 BEs = 3;
}

// MessageId: 15488 (Notify)
message os11 {
  repeated int32 a2s = 9;
}

enum RangeType {
  RangeType_RangeEnter = 0;
  RangeType_RangeLeave = 1;
  RangeType_RangeInit = 2;
}

enum WR_1 {
  WR__Trigger = 0;
  WR__Trample = 1;
  WR__DynamicPortal = 2;
  WR__EffectArea = 3;
  WR__AirPassage = 4;
  WR__lRs = 5;
  WR__GravityFlip = 6;
}

message EntityAccessInfo {
  int64 EntityId = 1;
  RangeType RangeType = 2;
  map<int32, int32> Uo_1 = 3;
}

// MessageId: 29210 (Request)
message EntityAccessRangeRequest {
  int64 EntityId = 1;
  repeated int64 EntitiesToCheck = 13;
  RangeType RangeType = 12;
}

// MessageId: 18850 (Response)
message EntityAccessRangeResponse {
  ErrorCode ErrorCode = 7;
  int64 EntityId = 9;
  repeated EntityAccessInfo Info = 14;
}

// MessageId: 22784 (Request)
message PlayerAccessEffectAreaRequest {
  int64 EntityId = 13;
  RangeType RangeType = 10;
}

// MessageId: 29909 (Response)
message PlayerAccessEffectAreaResponse {
  ErrorCode ErrorCode = 9;
  int64 EntityId = 6;
  EntityAccessInfo Info = 2;
}

// MessageId: 29458 (Notify)
message UpdateEntitiesInRangeNotify {
  int64 EntityId = 13;
  repeated int64 EntitiesToCheck = 11;
  RangeType RangeType = 4;
}

// MessageId: 15708 (Notify)
message UpdatePlayerInRangeNotify {
  int64 EntityId = 13;
  int32 PlayerId = 7;
  RangeType RangeType = 8;
}

enum EntityTransitionType {
  EntityTransitionType_Up = 0;
  EntityTransitionType_Down = 1;
}

// MessageId: 19919 (Notify)
message ChangeEntityTransitionNotify {
  int64 EntityId = 9;
  EntityTransitionType EntityTransition = 1;
}

// MessageId: 27038 (Request)
message InitRangeRequest {
  int64 EntityId = 2;
  repeated int64 EntitiesToRequest = 11;
  bool zKs = 7;
}

// MessageId: 16163 (Response)
message InitRangeResponse {
  ErrorCode ErrorCode = 6;
  int64 EntityId = 2;
  repeated EntityAccessInfo Info = 13;
  EntityAccessInfo ko_2 = 5;
}

enum ApplyRechallengeReason {
  ApplyRechallengeReason_Settle = 0;
  ApplyRechallengeReason_Dead = 1;
}

enum RechallengeReason {
  RechallengeReason_Accept = 0;
  RechallengeReason_ActiveRefuse = 1;
  RechallengeReason_TimeOutRefuse = 2;
}

// MessageId: 29368 (Request)
message ApplyRechallengeRequest {
  int32 Reason = 13;
}

// MessageId: 18287 (Response)
message ApplyRechallengeResponse {
  ErrorCode ErrorCode = 7;
}

// MessageId: 17656 (Notify)
message ReceiveRechallengeNotify {
  int32 PlayerId = 4;
  int32 Result = 6;
}

// MessageId: 24370 (Request)
message ReceiveRechallengeRequest {
  int32 Result = 11;
}

// MessageId: 29983 (Response)
message ReceiveRechallengeResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 22446 (Request)
message InviteRechallengeRequest {
}

// MessageId: 26362 (Response)
message InviteRechallengeResponse {
  ErrorCode ErrorCode = 7;
}

// MessageId: 28348 (Notify)
message InviteRechallengeNotify {
  int32 InviterPlayerId = 13;
}

// MessageId: 21720 (Notify)
message ReceiveRechallengePlayerIdsNotify {
  repeated int32 PlayerIds = 9;
}

// MessageId: 23848 (Notify)
message PlayerDeadNotify {
  int32 PlayerId = 6;
  int32 DelaySeconds = 15;
  bool IsAutoRevive = 2;
  int32 ReviveId = 11;
  bool IsLogin = 8;
  bool IsShowRevive = 13;
}

message ReviveRoleInformation {
  int64 EntityId = 1;
  GameplayAttributeData CurHpAttribute = 2;
}

// MessageId: 19640 (Notify)
message PlayerReviveNotify {
  int32 PlayerId = 8;
  int32 ReviveType = 10;
  Vector Location = 6;
  Rotator Rotator = 14;
  repeated ReviveRoleInformation ReviveRoleInfos = 13;
  bool NeedRollbackSubLevel = 4;
  repeated string RollbackSubLevel = 15;
  int32 TeleportId = 9;
  bool SelfRevive = 12;
  repeated string qDOLLAR_ = 5;
  Vector hn1 = 7;
}

// MessageId: 19394 (Request)
message ReviveRequest {
  bool UseItem = 1;
}

// MessageId: 22160 (Response)
message ReviveResponse {
  ErrorCode ErrorCode = 4;
}

// MessageId: 21731 (Request)
message AddReviveRegionRequest {
  int32 ReviveId = 8;
}

// MessageId: 22881 (Response)
message AddReviveRegionResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 25641 (Request)
message RemoveReviveRegionRequest {
  int32 ReviveId = 10;
}

// MessageId: 20726 (Response)
message RemoveReviveRegionResponse {
  ErrorCode ErrorCode = 15;
}

message DeathStatusInfo {
  int32 GroupType = 1;
  LivingStatus LivingStatus = 2;
}

// MessageId: 26242 (Notify)
message AliveStatusNotify {
  int32 PlayerId = 13;
  repeated DeathStatusInfo Info = 12;
}

// MessageId: 17204 (Request)
message bnc1 {
  Jsc Jsc = 9;
}

// MessageId: 24749 (Response)
message Lnc2 {
  int32 G9n = 7;
}

// MessageId: 22164 (Request)
message wnc1 {
  int32 Zsc = 12;
  int32 z5n = 7;
}

// MessageId: 24663 (Response)
message Rnc2 {
  int32 G9n = 2;
}

// MessageId: 25932 (Notify)
message Anc2 {
  repeated tac1 eac = 15;
}

// MessageId: 20683 (Notify)
message KUc {
  repeated tac1 Bac3 = 7;
  repeated tac1 kac2 = 8;
  repeated int32 Oac2 = 12;
}

// MessageId: 27388 (Request)
message Pnc2 {
  int32 w5n1 = 8;
  int32 lI1 = 13;
}

// MessageId: 24699 (Response)
message xnc1 {
  int32 G9n = 13;
}

enum iac1 {
  iac_Unkonw = 0;
  iac_TJ_ = 1;
  iac_GridEvent = 2;
  iac_SelectView = 3;
  iac_ShowView = 4;
  iac_RogueGotoLevelPlay = 5;
  iac_RollBuffBondLinkId = 6;
  iac_by1 = 9;
  iac_LightBlockByLocationEffect = 10;
  iac_MapTeleportByLocationEffect = 11;
}

message tac1 {
  oneof R5n {
    Jsc Jsc = 1;
    rac1 rac = 2;
    oac1 oac = 3;
    nac nac = 4;
    sr12 sr1 = 5;
    ap1 ap1 = 6;
    Ay1 by1 = 9;
    eL1 eL1 = 10;
    tL1 tL1 = 11;
  }
  int32 w5n1 = 1000;
  int32 iac1 = 1001;
}

message Jsc {
  repeated int32 sac2 = 1;
  repeated phc aac = 2;
}

message phc {
  repeated int32 hac2 = 1;
}

message rac1 {
  oneof R5n {
    int32 Sh1 = 4;
    Mh1 Mh1 = 5;
    Eh11 Eh1 = 6;
  }
  hr1 hr1 = 1;
  int32 yh1 = 3;
}

message hr1 {
  int32 Zsc = 1;
  int32 J2s1 = 2;
  int32 Y4n = 3;
  bool lv1 = 4;
}

enum yh1 {
  yh1_Sh1 = 0;
  yh1_SpecialEffect = 1;
  yh1_EventPloting = 2;
}

message Mh1 {
}

message Eh11 {
  int32 lr11 = 1;
  int32 kqs = 2;
  int32 _r1 = 3;
  repeated _Vc cr1 = 4;
  int32 ur12 = 5;
  int32 dr11 = 6;
}

enum _r1 {
  _r1_NotInit = 0;
  _r1_WaitConfirm = 1;
  _r1_WaitEffect = 2;
  _r1_EffectInterrupt = 3;
}

enum xr1 {
  xr1_UnTrigger = 0;
  xr1_PreBeginPloting = 1;
  xr1_BeginPloting = 2;
  xr1_PreBeginPlotEffecting = 3;
  xr1_BeginPlotEffecting = 4;
  xr1_PreEndPloting = 5;
  xr1_EndPloting = 6;
  xr1_PreEndPlotEffecting = 7;
  xr1_EndPlotEffecting = 8;
  xr1_PreTakeGrid = 9;
  xr1_TakeGrid = 10;
  xr1_PreFinishAward = 11;
  xr1_FinishAward = 12;
  xr1_End = 13;
}

message oac1 {
  oneof Dr12 {
    uac1 uac = 1;
  }
}

message nac {
  oneof R5n {
    mac2 mac = 1;
    fac2 fac = 2;
    Cac1 Cac = 4;
    pac3 pac = 5;
    Ih12 Ih1 = 7;
    Ry1 Ry1 = 8;
  }
  int32 dac1 = 1000;
}

enum dac1 {
  dac_None = 0;
  dac_GridTake = 1;
  dac_RogueResAddRole = 2;
  dac_PhantomEntryUnlock = 3;
  dac_RoleBuffUnlock = 4;
  dac_InstResult = 5;
  dac_RoleBond = 6;
  dac_AddToken = 7;
}

message mac2 {
  int32 fr1 = 1;
  int32 gr1 = 2;
  repeated int32 Cr1 = 3;
  int32 c5n = 4;
}

message fac2 {
  oneof zu1 {
    Uac2 Hu1 = 1;
  }
  Uac2 DOLLARu1 = 2;
}

message Cac1 {
  Uac2 Uac = 1;
  repeated int32 tE_1 = 2;
}

message pac3 {
  int32 r6n = 1;
  bool gM_ = 2;
  int32 SMs = 4;
  int32 FM1 = 5;
  int32 NM1 = 6;
  int32 VM1 = 7;
  repeated ZM11 jM1 = 8;
  int32 Sr11 = 9;
  repeated Shc fUs = 10;
  repeated Dh1 xh1 = 11;
  int32 HM1 = 12;
  bool DOLLARM1 = 13;
  int32 WM1 = 14;
  bool QM11 = 15;
  int32 KM1 = 16;
  bool XM1 = 17;
  int32 YM1 = 18;
  int32 Y2s = 19;
  bool Yxs = 20;
}

message ZM11 {
  int32 sps2 = 1;
  int32 m9n = 2;
}

message Ih12 {
  int32 Ld11 = 1;
  int32 wd1 = 2;
  int32 Ad1 = 3;
  repeated Dh1 Th1 = 4;
  int32 Ud12 = 5;
}

message Ry1 {
  int32 h5n = 1;
  repeated Shc Dac = 2;
}

message Dh1 {
  int32 v9n = 1;
  int32 Level = 2;
  int32 Pd11 = 3;
  int32 Psc = 4;
}

message sr12 {
  oneof Ur11 {
    qUc2 qUc = 2;
  }
  bool pr11 = 1;
  int32 Vy_ = 3;
  int32 vr12 = 4;
}

message ap1 {
  oneof Dr12 {
    uac1 uac = 1;
  }
  Ih12 Ih1 = 2;
  repeated int32 LinkConfigId = 3;
}

message Ay1 {
  bool Ly1 = 1;
  int32 F2s = 2;
}

message eL1 {
  int32 v9n = 1;
  int32 Zsc = 2;
  int32 cI1 = 3;
  bool dI1 = 4;
  repeated int32 hac2 = 5;
}

message tL1 {
  int32 v9n = 1;
  int32 Zsc = 2;
  repeated int32 hac2 = 3;
}

// MessageId: 15622 (Notify)
message jUc2 {
  int32 r6n = 169;
  int32 Iac3 = 39;
  repeated yhc1 Eac = 218;
  int32 c5n = 253;
  bool iWn = 36;
  int32 iBc = 84;
  int32 rBc = 219;
  int32 Qu1 = 106;
  int32 _p1 = 207;
  int32 Ebs = 134;
  int32 xd1 = 63;
  int32 oBc = 162;
  int32 nBc = 199;
  int32 sBc = 30;
  int32 aBc = 75;
  int32 hBc = 116;
  int32 Sr11 = 53;
  repeated Er1 Mr1 = 148;
  Anc2 Anc = 163;
  Unc Unc = 101;
  Mhc1 Mhc = 195;
}

// MessageId: 26075 (Request)
message or1 {
  int32 c5n = 11;
  Er1 Er1 = 13;
}

// MessageId: 15051 (Response)
message nr1 {
  ErrorCode ErrorCode = 4;
  Er1 Er1 = 13;
}

// MessageId: 16369 (Request)
message Ch1 {
  int32 c5n = 6;
}

// MessageId: 16278 (Response)
message ph12 {
  ErrorCode ErrorCode = 10;
}

message Er1 {
  repeated int32 RoleId = 1;
  int32 LinkConfigId = 2;
}

// MessageId: 16340 (Notify)
message DOLLARUc {
  bool iWn = 11;
}

// MessageId: 28028 (Notify)
message WUc2 {
  int32 iBc = 13;
}

// MessageId: 23307 (Notify)
message QUc1 {
  int32 rBc = 13;
  int32 Qu1 = 12;
  int32 sps2 = 7;
}

// MessageId: 17269 (Notify)
message hv1 {
  int32 aBc = 8;
  int32 hBc = 13;
}

// MessageId: 23917 (Notify)
message rr11 {
  int32 Sr11 = 4;
  int32 Ebs = 11;
  int32 sps2 = 15;
}

// MessageId: 28059 (Notify)
message HUc {
  oneof R5n {
    int32 zM12 = 8;
    mI1 uI1 = 11;
  }
  map<int32, yhc1> lBc = 12;
  int32 x9n = 14;
}

enum eE1 {
  eE1_GridUpdate = 0;
  eE1_ByMoveOp = 1;
  eE1_Ku1 = 2;
  eE1_uI1 = 4;
}

message mI1 {
  int32 Zsc = 1;
  int32 cI1 = 2;
  bool dI1 = 3;
}

message yhc1 {
  oneof uv1 {
    cv1 cv1 = 13;
  }
  int32 v9n = 1;
  bool Tac2 = 2;
  bool bac2 = 3;
  bool _Bc = 4;
  bool eE_ = 11;
  int32 cBc = 5;
  int32 N2s = 6;
  int32 J2s1 = 7;
  int32 Ir1 = 8;
  repeated int32 Tr1 = 9;
  int32 wh1 = 10;
  repeated int32 _v1 = 12;
}

message Shc {
  oneof R5n {
    wac1 wac = 1;
    Rac2 Rac = 2;
    Aac1 Aac = 3;
    Pac4 Pac = 4;
    xac2 xac = 5;
    Uac2 Uac = 6;
    tVc tVc = 7;
    Ah1 Ah1 = 8;
  }
  int32 w5n1 = 1000;
  int32 Lac2 = 1001;
}

enum Lac2 {
  Lac_NoGain = 0;
  Lac_DOLLAR9n = 1;
  Lac_TokenShop = 2;
  Lac_hxs = 3;
  Lac_RUs = 4;
  Lac_RoleBuff = 5;
  Lac_Event = 6;
  Lac_EventGrid = 7;
  Lac_MiracleCreation = 8;
  Lac_Effect = 9;
  Lac_Complex = 10;
}

message wac1 {
  int32 v9n = 1;
  bool dws = 2;
  repeated hVc1 iVc = 3;
  bool k2s = 4;
}

message Rac2 {
  int32 v9n = 1;
  bool dws = 2;
  bool O2s = 3;
  repeated hVc1 iVc = 4;
  int32 kN_ = 5;
  int32 qN_ = 6;
  int32 L8n2 = 7;
  int32 c5n = 8;
}

message Aac1 {
  int32 v9n = 1;
  bool dws = 2;
}

message Pac4 {
  int32 v9n = 1;
  bool dws = 2;
  repeated lVc rVc = 3;
}

message lVc {
  int32 v9n = 1;
  bool oVc = 2;
  repeated hVc1 iVc = 3;
}

message xac2 {
  int32 v9n = 1;
  bool dws = 2;
}

message Uac2 {
  bool dws = 2;
  int32 Level = 3;
  repeated int32 Ph11 = 4;
  int32 kN_ = 5;
  int32 qN_ = 6;
  int32 L8n2 = 7;
  bool O2s = 8;
  int32 c5n = 9;
  int32 Ud12 = 10;
}

message tVc {
  int32 v9n = 1;
  int32 nVc = 2;
  repeated _Vc sVc = 3;
  repeated int32 _ac2 = 4;
}

message Ah1 {
  int32 v9n = 1;
  int32 L8n2 = 2;
  int32 m9n = 3;
  bool k2s = 4;
}

message _Vc {
  oneof uv1 {
    cv1 cv1 = 3;
  }
  int32 v9n = 1;
  bool br1 = 2;
}

// MessageId: 16422 (Notify)
message Unc {
  map<int32, uac1> uBc = 3;
}

// MessageId: 17682 (Notify)
message qFc {
  map<int32, uac1> Bac3 = 6;
  map<int32, uac1> kac2 = 12;
  repeated int32 Oac2 = 3;
}

// MessageId: 15047 (Notify)
message Mhc1 {
  repeated Shc Dac = 4;
  repeated hVc1 iVc = 8;
  repeated Dh1 xh1 = 3;
}

// MessageId: 25986 (Notify)
message Ehc1 {
  repeated Shc Bac3 = 9;
  repeated Shc kac2 = 6;
  repeated int32 Oac2 = 15;
}

// MessageId: 17973 (Notify)
message Z4c {
  repeated hVc1 iVc = 1;
}

// MessageId: 21344 (Notify)
message vh1 {
  repeated Dh1 xh1 = 8;
}

message hVc1 {
  int32 aVc = 1;
  int32 m9n = 2;
}

message uac1 {
  int32 Lac2 = 1000;
  bool k2s = 1001;
  bool mBc = 1002;
  bool Lr12 = 1003;
  int32 Rr12 = 1004;
  int32 wr1 = 1005;
  int32 Ar1 = 1006;
  int32 Pr12 = 1007;
  int32 Xu1 = 1008;
  int32 Yu1 = 1009;
  int32 RoleId = 1010;
  repeated Shc Dac = 1;
}

enum Zc12 {
  Zc1_NormalSelect = 0;
}

// MessageId: 28710 (Request)
message Dnc1 {
  int32 r6n = 12;
}

// MessageId: 27349 (Response)
message Bnc2 {
  ErrorCode ErrorCode = 11;
}

// MessageId: 28078 (Request)
message knc1 {
}

// MessageId: 29875 (Response)
message Hnc2 {
  oneof dv1 {
    pac3 pac = 1;
  }
  ErrorCode ErrorCode = 8;
}

// MessageId: 20287 (Request)
message Onc3 {
}

// MessageId: 20062 (Response)
message qnc4 {
  ErrorCode ErrorCode = 11;
  int32 r6n = 5;
}

// MessageId: 17072 (Notify)
message OUc {
  int32 iqs = 5;
  int32 rqs1 = 10;
  int32 vqs = 8;
  int32 pqs1 = 11;
  int32 CL_2 = 3;
}

// MessageId: 22226 (Notify)
message qUc2 {
  repeated string mL_ = 7;
  repeated string fL_ = 6;
  float iPs = 4;
  float rPs = 10;
  float gqs = 3;
  float fqs = 14;
}

// MessageId: 26371 (Request)
message GUc {
}

// MessageId: 19933 (Response)
message FUc {
  ErrorCode ErrorCode = 14;
}

// MessageId: 16087 (Notify)
message NUc {
}

// MessageId: 19381 (Notify)
message VUc {
  map<int32, int32> DOLLAR2s = 13;
  int32 sps2 = 14;
}

message cv1 {
  int32 s5n = 1;
  int32 lMs = 2;
  int32 j6n = 3;
}

enum s8s {
  s8s_Zero = 0;
}

enum RoguelikeGainDataType {
  RoguelikeGainDataType_Unkonw = 0;
  RoguelikeGainDataType_hxs = 1;
  RoguelikeGainDataType_Shop = 2;
  RoguelikeGainDataType_RUs = 3;
  RoguelikeGainDataType_CommonBuff = 4;
  RoguelikeGainDataType_RoleBuff = 5;
  RoguelikeGainDataType_Event = 6;
  RoguelikeGainDataType_BranchBuff = 7;
  RoguelikeGainDataType_Miraclecreation = 8;
}

message AffixEntry {
  int32 Id = 1;
  bool IsUnlock = 2;
  map<int32, int32> ElementDict = 3;
}

message DiscountInfo {
  map<int32, int32> BuffPrice = 1;
  int32 Discounted = 2;
}

message RogueGainEntry {
  oneof l8s {
    DiscountInfo DiscountInfo = 6;
  }
  oneof a8s {
    bool O2s = 7;
  }
  int32 Type = 1;
  int32 Index = 2;
  int32 ConfigId = 3;
  map<int32, int32> ElementDict = 4;
  repeated AffixEntry AffixEntryList = 5;
  bool IsSelect = 8;
  bool IsNew = 9;
  int32 Cost = 10;
  int32 IsSell = 11;
  bool IsValid = 12;
}

// MessageId: 17312 (Notify)
message RoguelikeCurrencyNotify {
}

// MessageId: 16935 (Notify)
message RoguelikeCurrencyUpdateNotify {
}

// MessageId: 21811 (Notify)
message RoguelikeInfoNotify {
  oneof u8s {
    RogueGainEntry j2s2 = 14;
  }
  RogueGainEntry RoleEntry = 7;
  repeated RogueGainEntry BuffEntryList = 8;
  map<int32, int32> ElementDict = 9;
  repeated RogueGainEntry PhantomEntry = 2;
}

// MessageId: 29306 (Request)
message RoguelikeRefreshGainRequest {
  int32 BindId = 14;
  int32 Layer = 6;
}

// MessageId: 16459 (Response)
message RoguelikeRefreshGainResponse {
  ErrorCode ErrorCode = 4;
  repeated string ErrorParams = 15;
  RoguelikeChooseData RoguelikeChooseData = 13;
}

// MessageId: 22873 (Request)
message RoguelikeChooseDataRequest {
  int32 Index = 6;
  int32 Layer = 7;
}

message RoguelikeChooseData {
  int32 Index = 1;
  int32 Type = 2;
  int32 MaxTime = 3;
  int32 UseTime = 4;
  int32 EventId = 5;
  repeated RogueGainEntry RogueGainEntryList = 6;
  int32 Layer = 7;
  bool IsSelect = 8;
  repeated o5s Z2s = 9;
}

// MessageId: 26126 (Response)
message RoguelikeChooseDataResponse {
  ErrorCode ErrorCode = 9;
  repeated string ErrorParams = 14;
  RoguelikeChooseData RoguelikeChooseData = 5;
}

// MessageId: 18547 (Notify)
message RoguelikeChooseDataNotify {
  repeated RoguelikeChooseData RoguelikeChooseDataList = 9;
}

// MessageId: 24581 (Request)
message RoguelikeChooseDataResultRequest {
  int32 BindId = 2;
  int32 Index = 14;
  int32 Layer = 10;
}

// MessageId: 17654 (Response)
message RoguelikeChooseDataResultResponse {
  ErrorCode ErrorCode = 1;
  repeated string ErrorParams = 14;
  RoguelikeChooseDataNotify RoguelikeChooseDataNotify = 5;
  repeated RogueGainEntry RogueGainEntryList = 7;
  bool IsSelect = 4;
  repeated RogueGainEntry tqs = 11;
  DOLLARna DOLLARna = 12;
}

message DOLLARna {
  repeated Yna Wna = 1;
}

message Yna {
  Qna Qna = 1;
  repeated Qna Kna = 2;
}

message Qna {
  oneof Data {
    RoguelikeEventGainNotify RoguelikeEventGainNotify = 1;
    ItemObtainNotify ItemObtainNotify = 2;
  }
}

// MessageId: 21448 (Notify)
message RoguelikeEventGainNotify {
  repeated RogueGainEntry RogueGainEntryList = 5;
  repeated RogueGainEntry Xna = 13;
}

// MessageId: 25286 (Request)
message RoguelikeLastInfoRequest {
}

message RoguelikeLastInfo {
  int32 InstId = 2;
  int32 CurLayer = 3;
  int32 MaxLayer = 4;
}

// MessageId: 24774 (Response)
message RoguelikeLastInfoResponse {
  ErrorCode ErrorCode = 3;
  bool HasData = 4;
  repeated RoguelikeLastInfo RoguelikeLastInfos = 13;
}

// MessageId: 19650 (Request)
message RoguelikePopularEntriesInfoRequest {
  int32 InstId = 7;
  int32 SeasonId = 9;
}

// MessageId: 27223 (Response)
message RoguelikePopularEntriesInfoResponse {
  ErrorCode ErrorCode = 1;
  sqs sqs = 6;
}

// MessageId: 24091 (Request)
message RoguelikePopularEntriesChangeRequest {
  int32 InstId = 3;
  repeated int32 BHn = 14;
  int32 SeasonId = 9;
}

// MessageId: 20299 (Response)
message RoguelikePopularEntriesChangeResponse {
  ErrorCode ErrorCode = 12;
}

message sqs {
  int32 InstId = 1;
  repeated int32 BHn = 2;
  int32 SeasonId = 3;
}

// MessageId: 24930 (Request)
message RoguelikeStartRequest {
  bool ContinueLastProgress = 7;
  int32 InstId = 8;
  repeated int32 RoleIds = 13;
  int32 SeasonId = 1;
}

// MessageId: 15724 (Response)
message RoguelikeStartResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 27969 (Request)
message RoguelikeQuitRequest {
}

// MessageId: 18000 (Response)
message RoguelikeQuitResponse {
  ErrorCode ErrorCode = 10;
}

message RoguelikeResultInfo {
  oneof u8s {
    RogueGainEntry j2s2 = 10;
  }
  bool IsNewRecord = 1;
  uint32 Time = 2;
  int32 CurLayer = 3;
  int32 MaxLayer = 4;
  int32 KillEnemyCount = 5;
  int32 GetGainCount = 6;
  map<int32, int32> Rewards = 8;
  RogueGainEntry RoleEntry = 9;
  bool IsDeadTrigger = 11;
  int32 InstId = 12;
  int32 TotalCostTime = 13;
  int32 PhantomEntry = 14;
}

// MessageId: 23556 (Notify)
message RoguelikeResultNotify {
  RoguelikeResultInfo RoguelikeResultInfo = 11;
}

// MessageId: 15437 (Request)
message RoguelikeResultRequest {
  int32 InstId = 14;
}

// MessageId: 28693 (Response)
message RoguelikeResultResponse {
  ErrorCode ErrorCode = 4;
  RoguelikeResultInfo RoguelikeResultInfo = 6;
}

// MessageId: 17520 (Notify)
message RoguelikeSubLevelNotify {
  string LoadSubLevel = 4;
  string Cqs2 = 2;
  float X = 6;
  float Y = 3;
  float gqs2 = 10;
  float fqs = 15;
  repeated string qo_1 = 12;
  repeated string Oo_ = 9;
}

// MessageId: 26437 (Request)
message T_s {
}

// MessageId: 15194 (Response)
message L_s {
  ErrorCode ErrorCode = 5;
}

enum RoguelikeRoomType {
  RoguelikeRoomType_Normal = 0;
  RoguelikeRoomType_Special = 1;
  RoguelikeRoomType_Boss = 2;
}

// MessageId: 18307 (Notify)
message RoguelikeRoomInfoNotify {
  int32 CurLayer = 7;
  int32 MaxLayer = 14;
  int32 RoguelikeRoomTypeId = 13;
  int32 SkyBoxId = 12;
  int32 Go_1 = 1;
}

// MessageId: 26209 (Request)
message RoguelikeTalentInfoRequest {
  int32 SeasonId = 1;
}

enum m8s {
  m8s_CMs = 0;
  m8s_Active = 1;
}

// MessageId: 29045 (Response)
message RoguelikeTalentInfoResponse {
  ErrorCode ErrorCode = 4;
  map<int32, int32> TalentSkillDict = 15;
}

// MessageId: 18543 (Request)
message RoguelikeTalentLevelUpRequest {
  int32 SkillId = 13;
}

// MessageId: 20414 (Response)
message RoguelikeTalentLevelUpResponse {
  ErrorCode ErrorCode = 4;
  int32 Level = 6;
}

// MessageId: 28583 (Notify)
message RoguelikeTalentUnlockNotify {
  int32 SkillId = 9;
}

message RoguelikeToken {
  int32 Id = 1;
  bool IsReceive = 2;
}

message SeasonReward {
  int32 Id = 1;
  bool IsReceive = 2;
}

message SeasonData {
  int32 SeasonId = 1;
  int64 StartTime = 2;
  int64 EndTime = 3;
  repeated RoguelikeToken RoguelikeTokenList = 4;
  repeated SeasonReward SeasonRewardList = 5;
  int32 TokenItemCount = 6;
}

// MessageId: 15264 (Request)
message RoguelikeSeasonDataRequest {
  int32 SeasonId = 15;
}

// MessageId: 28164 (Response)
message RoguelikeSeasonDataResponse {
  ErrorCode ErrorCode = 10;
  SeasonData SeasonData = 1;
}

// MessageId: 15429 (Request)
message RoguelikeTokenReceiveRequest {
  int32 SeasonId = 5;
  int32 Id = 2;
}

// MessageId: 24209 (Response)
message RoguelikeTokenReceiveResponse {
  ErrorCode ErrorCode = 15;
  map<int32, int32> ItemMap = 11;
}

// MessageId: 21735 (Request)
message RoguelikeSeasonRewardReceiveRequest {
  int32 SeasonId = 11;
  repeated int32 Index = 9;
}

// MessageId: 16600 (Response)
message RoguelikeSeasonRewardReceiveResponse {
  ErrorCode ErrorCode = 11;
  map<int32, int32> ItemMap = 2;
}

// MessageId: 27622 (Request)
message RoguelikeGiveUpGainRequest {
  int32 BindId = 6;
  int32 Layer = 3;
}

// MessageId: 22387 (Response)
message RoguelikeGiveUpGainResponse {
  int32 BindId = 8;
  ErrorCode ErrorCode = 9;
  map<int32, int32> ItemMap = 6;
}

enum RoguelikeGainType {
  RoguelikeGainType_GainDataAdd = 0;
  RoguelikeGainType_GainDataDelete = 1;
  RoguelikeGainType_GainDataUpdate = 2;
}

// MessageId: 22464 (Notify)
message Tfs {
  RoguelikeGainType Type = 14;
  int32 Index = 3;
  RogueGainEntry RogueGainEntry = 1;
}

// MessageId: 25483 (Request)
message RoguelikeTrialRoleInfoRequest {
  int32 SeasonId = 10;
  repeated int32 PHn = 15;
  repeated int32 Rpl = 9;
}

// MessageId: 26305 (Response)
message RoguelikeTrialRoleInfoResponse {
  ErrorCode ErrorCode = 7;
  repeated int32 Rqs2 = 9;
  int32 PJs = 2;
  int32 wJs = 1;
  int32 RoleLevel = 13;
  int32 WeaponLevel = 14;
  repeated Is_2 Fo_1 = 11;
}

message Is_2 {
  int32 InstId = 1;
  repeated int32 Rqs2 = 2;
  repeated int32 RoleIds = 3;
  repeated int32 No_ = 4;
}

// MessageId: 18746 (Notify)
message RogueCharacterRoomSelectViewNotify {
  int32 Index = 6;
  repeated int32 RoomIdList = 5;
}

// MessageId: 18431 (Request)
message RoguelikeRoleRoomSelectRequest {
  int32 Index = 3;
  int32 Mra = 11;
}

// MessageId: 17781 (Response)
message RoguelikeRoleRoomSelectResponse {
  ErrorCode ErrorCode = 4;
}

message Pqs2 {
  int32 SkillId = 1;
  repeated int64 Dqs = 2;
}

message f8s {
  int32 Aqs = 1;
  Pqs2 Pqs = 2;
}

message bqs {
  repeated Pqs2 Uqs = 1;
  repeated f8s wqs = 2;
}

message v8s {
  int32 xqs = 1;
  bqs bqs = 2;
}

message Gqs1 {
  bqs Bqs = 1;
  repeated v8s qqs = 2;
}

// MessageId: 28097 (Notify)
message PlayerSkillInfoPbNotify {
  Gqs1 Gqs1 = 4;
}

// MessageId: 24648 (Request)
message Cms1 {
  int64 EntityId = 5;
}

// MessageId: 29724 (Response)
message gms {
  ErrorCode ErrorCode = 2;
}

enum SceneStepStatus {
  SceneStepStatus_Accepted = 0;
  SceneStepStatus_Finished = 1;
  SceneStepStatus_Failed = 2;
}

message SceneStepConditionProgress {
  int32 ConditionId = 1;
  int32 ProgressNum = 2;
}

message SceneStepPlayerProgress {
  int32 PlayerId = 1;
  repeated SceneStepConditionProgress Progress = 2;
}

message SceneStepInfo {
  int32 StepId = 1;
  int32 Status = 2;
  repeated SceneStepConditionProgress Progress = 3;
  repeated SceneStepPlayerProgress MultiPlayerProgress = 4;
}

message SceneStepGroupInfo {
  int32 StepGroupId = 1;
  repeated SceneStepInfo StepGroupInfo = 2;
}

// MessageId: 27855 (Notify)
message SceneStepGroupInfoNotify {
  repeated SceneStepGroupInfo StepGroupInfo = 1;
}

// MessageId: 29034 (Notify)
message SceneStepInfoNotify {
  int32 StepGroupId = 8;
  SceneStepInfo StepInfo = 2;
}

// MessageId: 22222 (Request)
message TargetGearHitRequest {
  int64 EntityId = 9;
  repeated int32 yX_ = 15;
  int32 Mjn1 = 14;
}

// MessageId: 17103 (Response)
message TargetGearHitResponse {
  ErrorCode ErrorCode = 5;
}

// MessageId: 20247 (Request)
message ThrowDamageRequest {
  int64 EntityId = 6;
  int64 CalculateId = 3;
}

// MessageId: 28540 (Response)
message ThrowDamageResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 20305 (Notify)
message ThrowDamageNotify {
  int64 EntityId = 4;
  int32 Durability = 14;
}

// MessageId: 18962 (Notify)
message ThrowDamageRecoveryNotify {
  int64 EntityId = 2;
  int32 Durability = 4;
}

// MessageId: 18734 (Request)
message GetRewardTreasureBoxRequest {
  int64 EntityId = 3;
}

// MessageId: 25700 (Response)
message GetRewardTreasureBoxResponse {
  ErrorCode ErrorCode = 12;
}

message MobileButtonSetting {
  int32 Id = 1;
  float Size = 2;
  float Transparency = 3;
  float ScreenX = 4;
  float ScreenY = 5;
  int32 ButtonLevel = 6;
  int32 PanelLevel = 7;
}

// MessageId: 27045 (Notify)
message SettingNotify {
  repeated MobileButtonSetting MobileButtonSettings = 14;
}

// MessageId: 17422 (Request)
message MobileButtonSettingUpdateRequest {
  repeated MobileButtonSetting MobileButtonSettings = 4;
}

// MessageId: 28200 (Response)
message MobileButtonSettingUpdateResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 24249 (Request)
message LanguageSettingUpdateRequest {
  int32 Language = 1;
}

// MessageId: 23973 (Response)
message LanguageSettingUpdateResponse {
  ErrorCode ErrorCode = 6;
}

// MessageId: 18575 (Request)
message ChangeServerPlayStationPlayOnlyStateRequest {
  bool CrossPlayEnabled = 6;
}

// MessageId: 21749 (Response)
message ChangeServerPlayStationPlayOnlyStateResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 23883 (Request)
message ServerPlayStationPlayOnlyStateRequest {
}

// MessageId: 15817 (Response)
message ServerPlayStationPlayOnlyStateResponse {
  bool CrossPlayEnabled = 14;
}

message Ts_2 {
  repeated string srh = 1;
}

message bs_ {
  string urh = 1;
  repeated string srh = 2;
  int32 Version = 3;
}

message Ls_1 {
  string crh = 1;
  map<string, int32> Vo_1 = 2;
  int32 Version = 3;
}

message Wo_ {
  string urh = 1;
  repeated Ts_2 jo_ = 2;
  int32 Version = 3;
}

message Qo_2 {
  string crh = 1;
  repeated Ts_2 jo_ = 2;
  int32 Version = 3;
}

enum ws_ {
  ws__Mouse = 0;
  ws__uVn = 1;
}

message Zih {
  repeated Rs_1 trh = 1;
}

message Rs_1 {
  map<string, bs_> Ho_2 = 1;
  map<string, Ls_1> DOLLARo_ = 2;
  map<string, Wo_> Wo_ = 3;
  map<string, Qo_2> Qo_2 = 4;
  int32 irh = 5;
  string grh = 6;
}

// MessageId: 16179 (Request)
message InputSettingRequest {
}

// MessageId: 27607 (Response)
message InputSettingResponse {
  Zih Zih = 13;
}

// MessageId: 20173 (Request)
message InputSettingUpdateRequest {
  Zih Zih = 11;
}

// MessageId: 19180 (Response)
message InputSettingUpdateResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 21210 (Notify)
message InputSettingNotify {
  Zih Zih = 5;
}

message T8s {
  int32 Id = 1;
  int32 BoughtCount = 2;
  int32 Lock = 3;
}

message ShoppMoneyInfo {
  int32 MoneyId = 1;
  int32 MoneyNum = 2;
}

message R8s1 {
  int32 ShopId = 1;
  int32 Id = 2;
}

message ShopItemInfoNew {
  int32 Id = 1;
  int32 BoughtCount = 2;
  bool Lock = 3;
  int32 ItemId = 4;
  int32 ItemNum = 5;
  string CondText = 6;
  repeated ShoppMoneyInfo MoneyList = 7;
  uint32 BeginTime = 8;
  uint32 EndTime = 9;
  int32 LimitNum = 10;
  repeated ShoppMoneyInfo OriginalMoneyList = 11;
  string Label = 12;
  string SwitchText = 13;
  string PurchaseText = 14;
}

message ShopInfo {
  int32 ShopId = 1;
  uint32 UpdateTime = 2;
  repeated ShopItemInfoNew ItemInfoList = 3;
}

// MessageId: 23594 (Request)
message ShopInfoRequest {
  string VersionStr = 2;
}

// MessageId: 23725 (Response)
message ShopInfoResponse {
  ErrorCode ErrorCode = 6;
  string VersionStr = 10;
  repeated ShopInfo ShopList = 7;
}

// MessageId: 22104 (Notify)
message ShopInfoNotify {
  string VersionStr = 10;
  repeated ShopInfo ShopList = 3;
}

// MessageId: 28423 (Request)
message ShopBuyRequest {
  string VersionStr = 3;
  int32 ShopId = 1;
  int32 Id = 13;
  int32 Num = 2;
  int32 MoneyId = 9;
  int64 InteractEntityId = 12;
}

// MessageId: 18727 (Response)
message ShopBuyResponse {
  ErrorCode ErrorCode = 13;
  int32 ShopId = 10;
  int32 Id = 4;
  int32 BoughtCount = 11;
}

// MessageId: 18886 (Request)
message ShopUpdateRequest {
  int32 ShopId = 14;
}

// MessageId: 15104 (Response)
message ShopUpdateResponse {
  ErrorCode ErrorCode = 11;
  ShopInfo Info = 6;
}

// MessageId: 29202 (Notify)
message ShopUnlockNotify {
  repeated R8s1 UnlockIds = 6;
}

// MessageId: 22140 (Notify)
message ShopInfoUpdateNotify {
  ShopInfo Info = 4;
}

message JR_1 {
  TL_2 TL_ = 1;
  int32 MaxScore = 2;
  int32 EL_1 = 3;
  repeated int32 oG_ = 4;
}

message ZR_ {
  int32 Id = 1;
  JR_1 IL_2 = 2;
  JR_1 TL_2 = 3;
  int64 nG_ = 4;
}

message TL_2 {
  repeated int32 bL_ = 1;
  int32 LL_ = 2;
}

message eA_ {
  int32 Id = 1;
  bool vT_2 = 2;
  int32 wL_ = 3;
  int32 RL_ = 4;
  TL_2 AL_ = 5;
  TL_2 PL_ = 6;
  bool iA_ = 7;
}

// MessageId: 18945 (Request)
message SlashAndTowerInfoRequest {
}

// MessageId: 15105 (Response)
message SlashAndTowerInfoResponse {
  ErrorCode ErrorCode = 4;
  repeated eA_ xL_ = 12;
  repeated int32 RewardsReceived = 1;
  int64 CurSeasonEndTime = 9;
  bool IsNeedShowConfirmSeasonUpdate = 14;
  bool CurIsHaveRecord = 5;
  repeated int32 Xoc2 = 10;
}

// MessageId: 19731 (Request)
message SlashAndTowerScoreRewardRequest {
  int32 Id = 9;
  repeated int32 AreaStageRewardDataList = 4;
}

// MessageId: 29266 (Response)
message SlashAndTowerScoreRewardResponse {
  ErrorCode ErrorCode = 11;
  repeated int32 AreaStageRewardDataList = 13;
}

// MessageId: 23309 (Request)
message EndLessHistoryRequest {
}

// MessageId: 27153 (Response)
message EndLessHistoryResponse {
  ErrorCode ErrorCode = 2;
  ZR_ DL_ = 1;
  ZR_ BL_ = 6;
}

// MessageId: 29156 (Notify)
message ShipTowerUpdateResultNotify {
  int32 ELl = 9;
  int32 kL_ = 13;
  int32 qL_ = 3;
  int32 OL_ = 10;
  int32 GL_ = 11;
  TL_2 rA_ = 5;
  TL_2 oA_ = 4;
}

// MessageId: 20901 (Notify)
message ShipTowerUpdateLevelPlayNotify {
  repeated eA_ xL_ = 9;
}

// MessageId: 22910 (Request)
message SlashAndTowerSaveRecordRequest {
  int32 Id = 3;
}

// MessageId: 21330 (Response)
message SlashAndTowerSaveRecordResponse {
  ErrorCode ErrorCode = 13;
}

// MessageId: 18337 (Request)
message SlashAndTowerResetRequest {
  int32 Id = 1;
}

// MessageId: 18922 (Response)
message SlashAndTowerResetResponse {
  ErrorCode ErrorCode = 2;
}

message Yhc2 {
  TL_2 Whc = 1;
  TL_2 Qhc = 2;
  int32 Usage = 3;
}

// MessageId: 26158 (Request)
message SlashAndTowerRecommendRequest {
  int32 Id = 8;
}

// MessageId: 19612 (Response)
message SlashAndTowerRecommendResponse {
  ErrorCode ErrorCode = 8;
  repeated Yhc2 Khc = 14;
}

// MessageId: 28422 (Request)
message SlashAndTowerReviewRequest {
}

message cG_ {
  int32 lG_ = 1;
  int32 Score = 2;
}

// MessageId: 29228 (Response)
message SlashAndTowerReviewResponse {
  ErrorCode ErrorCode = 4;
  repeated cG_ _G_ = 13;
  int32 Acc = 8;
  int32 Pcc = 5;
}

// MessageId: 21750 (Notify)
message iT1 {
}

enum SneakState {
  SneakState_Open = 0;
  SneakState_Close = 1;
}

enum SneakFinishType {
  SneakFinishType_SneakSuccess = 0;
  SneakFinishType_SneakFail = 1;
}

// MessageId: 17140 (Notify)
message SceneItemDurabilityChangeNotify {
  int32 iGs = 8;
  int32 State = 4;
  repeated int64 EntityIds = 5;
}

// MessageId: 16165 (Request)
message Qms {
  int32 iGs = 9;
  int32 rGs = 3;
}

// MessageId: 19066 (Response)
message Xms {
  ErrorCode ErrorCode = 5;
}

// MessageId: 27540 (Notify)
message Yms {
  int32 oGs2 = 3;
}

// MessageId: 15208 (Request)
message SpecialItemEquipRequest {
  int32 ItemId = 11;
}

// MessageId: 27154 (Response)
message SpecialItemEquipResponse {
  ErrorCode ErrorCode = 15;
}

// MessageId: 26000 (Request)
message Zms {
}

// MessageId: 27396 (Response)
message eCs {
  ErrorCode ErrorCode = 7;
}

// MessageId: 18625 (Request)
message SpringSignDrawRoleRequest {
}

// MessageId: 27395 (Response)
message SpringSignDrawRoleResponse {
  ErrorCode ErrorCode = 11;
  int32 Ko_1 = 15;
}

// MessageId: 15315 (Request)
message SpringSignDrawRewardRequest {
  int32 Id = 9;
}

// MessageId: 23214 (Response)
message SpringSignDrawRewardResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 28663 (Request)
message SpringSignSkinRewardRequest {
}

// MessageId: 15551 (Response)
message SpringSignSkinRewardResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 20635 (Request)
message EZl1 {
}

// MessageId: 15751 (Response)
message IZl1 {
  ErrorCode ErrorCode = 3;
}

// MessageId: 17408 (Request)
message SynthesisInfoRequest {
}

// MessageId: 23562 (Response)
message SynthesisInfoResponse {
  ErrorCode ErrorCode = 2;
  repeated OneSynthesisInfo SynthesisInfoList = 11;
  repeated OneSynthesisConfig SynthesisConfigs = 7;
  SynthesisLevelInfo LevelInfo = 1;
  int64 LimitRefreshTime = 3;
}

message SynthesisLevelInfo {
  int32 Level = 1;
  int32 TotalProficiency = 2;
}

message OneSynthesisInfo {
  int32 Id = 1;
  int32 Count = 2;
  int32 LastRoleId = 3;
  int32 LimitTotalCount = 4;
  int32 LimitSynthesisCount = 5;
  int64 ExistStartTime = 6;
  int64 ExistEndTime = 7;
}

message OneSynthesisConfig {
  int32 Id = 1;
  int64 ExistStartTime = 2;
  int64 ExistEndTime = 3;
}

// MessageId: 20380 (Request)
message SynthesisItemRequest {
  int32 Id = 11;
  int32 RoleId = 4;
  int32 Count = 15;
  int64 InteractEntityId = 9;
}

// MessageId: 26487 (Response)
message SynthesisItemResponse {
  ErrorCode ErrorCode = 7;
  int32 Id = 11;
  repeated SingleItemInfo ItemInfos = 10;
  int32 ActiveSkillType = 15;
  repeated SingleItemInfo ExtraItemInfos = 12;
  int32 RoleId = 3;
}

// MessageId: 28628 (Notify)
message SynthesisInfoUpdateNotify {
  repeated OneSynthesisInfo SynthesisInfoList = 14;
  repeated int32 HideSynthesisIdList = 2;
}

// MessageId: 21481 (Request)
message SynthesisLevelRewardRequest {
}

// MessageId: 26185 (Response)
message SynthesisLevelRewardResponse {
  ErrorCode ErrorCode = 6;
  SynthesisLevelInfo LevelInfo = 7;
}

// MessageId: 18100 (Notify)
message SynthesisLevelUpdateNotify {
  oneof B8s {
    SynthesisLevelInfo LevelInfo = 13;
  }
}

// MessageId: 15618 (Request)
message SynthesisFormulaUnlockRequest {
  int32 Id = 3;
}

// MessageId: 20099 (Response)
message SynthesisFormulaUnlockResponse {
  ErrorCode ErrorCode = 11;
  int32 Id = 7;
}

// MessageId: 21293 (Request)
message ExchangeItemRequest {
  int32 _5l = 4;
  int32 c5l = 2;
  int32 u5l = 13;
}

// MessageId: 20652 (Response)
message ExchangeItemResponse {
  ErrorCode ErrorCode = 1;
}

message TemporaryTeleportInfo {
  int32 MarkId = 1;
  int64 temporaryTeleportId = 2;
  int32 IsTrace = 3;
  int32 InstId = 4;
  Vector Pos = 5;
  Rotator Rot = 6;
  Vector PlayerTeleportPos = 7;
  int32 Xhc = 8;
}

// MessageId: 27569 (Notify)
message TemporaryTeleportAllInfoNotify {
  repeated TemporaryTeleportInfo AllTemporaryTeleportInfo = 2;
}

// MessageId: 29503 (Notify)
message AddTemporaryTeleportInfoNotify {
  TemporaryTeleportInfo TemporaryTeleportInfo = 13;
}

// MessageId: 29133 (Notify)
message RemoveTemporaryTeleportNotify {
  int64 temporaryTeleportId = 2;
}

// MessageId: 26958 (Notify)
message TemporaryTeleportChangeNotify {
  TemporaryTeleportInfo TemporaryTeleportInfo = 7;
}

// MessageId: 28274 (Request)
message RemoveTemporaryTeleportRequest {
  int64 temporaryTeleportId = 15;
}

// MessageId: 21990 (Response)
message RemoveTemporaryTeleportResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 16957 (Request)
message TeleportToTargetRequest {
  int64 temporaryTeleportId = 5;
  Rotator Rot = 15;
}

// MessageId: 24122 (Response)
message TeleportToTargetResponse {
  ErrorCode ErrorCode = 1;
}

// MessageId: 20532 (Request)
message LYl {
  Vector Pos = 2;
  Rotator Rot = 5;
  int32 Xhc = 14;
}

// MessageId: 17889 (Response)
message wYl {
  ErrorCode ErrorCode = 8;
  int64 temporaryTeleportId = 5;
}

// MessageId: 25276 (Notify)
message ThirdPartySharedNotify {
  repeated int32 SharedIds = 10;
}

// MessageId: 26311 (Request)
message ThirdPartyShareRequest {
  int32 SharedId = 1;
}

// MessageId: 18744 (Response)
message ThirdPartyShareResponse {
  ErrorCode ErrorCode = 2;
}

// MessageId: 23411 (Notify)
message TimeResetNotify {
  int32 S0a = 12;
}

// MessageId: 27134 (Request)
message TimelineTraceStartRequest {
  int64 EntityId = 8;
  int32 Index = 7;
}

message ControlPointData {
  int32 ControlPointIndex = 1;
  bool LeftEnable = 2;
  bool RightEnable = 3;
}

// MessageId: 16188 (Response)
message TimelineTraceStartResponse {
  ErrorCode ErrorCode = 9;
  int32 Index = 14;
  int32 ControlPoint = 10;
  repeated int64 EntityIds = 4;
  repeated ControlPointData PointDatas = 12;
}

// MessageId: 22178 (Request)
message TimelineTraceControlRequest {
  int64 EntityId = 4;
  bool Forward = 12;
}

// MessageId: 15142 (Response)
message TimelineTraceControlResponse {
  ErrorCode ErrorCode = 2;
  int32 ControlPoint = 11;
}

// MessageId: 17642 (Request)
message TimelineTraceExitRequest {
  int64 EntityId = 8;
}

// MessageId: 27761 (Response)
message TimelineTraceExitResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 23152 (Request)
message TimeCheckRequest {
  int64 ClientTime = 6;
  float Dilation = 9;
  float RDilation = 4;
}

// MessageId: 22633 (Notify)
message TimeCheckNotify {
  int64 ClientTime = 12;
  int64 ServerTime = 9;
  int64 ServerStopTime = 7;
  int64 SceneStopTime = 6;
  int64 Xo_2 = 5;
}

// MessageId: 28933 (Response)
message TimeCheckResponse {
  ErrorCode ErrorCode = 7;
  int64 ClientTime = 3;
  int64 ServerTime = 15;
  int64 ServerStopTime = 13;
  int64 SceneStopTime = 5;
  int64 Xo_2 = 6;
}

message TowerInfo {
  int32 CurrentSeason = 1;
  int32 DataSeason = 2;
  repeated TowerDifficultyPb TowerDifficulties = 3;
  int64 BeginTime = 4;
  int64 EndTime = 5;
  int32 MaxUnlockDifficulty = 6;
}

message TowerDifficultyPb {
  int32 Difficulty = 1;
  repeated int32 RewardIndex = 2;
  repeated TowerAreaPb TowerAreas = 3;
  int32 MaxStar = 4;
}

message TowerAreaPb {
  int32 AreaNum = 1;
  repeated TowerFloorPb TowerFloors = 2;
}

message TowerFloorPb {
  int32 TowerConfigId = 1;
  int32 Star = 2;
  repeated TowerRolePb Formation = 4;
  repeated int32 AGs = 5;
}

message TowerRolePb {
  int32 RoleId = 1;
  int32 LeaveSkillId = 2;
}

message TowerRecommendRole {
  int32 RoleId = 1;
  int32 LeaveSkillId = 2;
  int32 Level = 3;
}

message TowerRecommendFormation {
  repeated TowerRecommendRole Formation = 1;
  int32 Usage = 2;
}

// MessageId: 18576 (Request)
message TowerRequest {
}

// MessageId: 23624 (Response)
message TowerResponse {
  TowerInfo TowerInfo = 6;
}

// MessageId: 27701 (Request)
message TowerSeasonUpdateRequest {
}

// MessageId: 25920 (Response)
message TowerSeasonUpdateResponse {
  oneof DOLLAR8s {
    TowerInfo TowerInfo = 8;
  }
  int32 MaxUnlockDifficulty = 15;
}

// MessageId: 19333 (Request)
message TowerFormationRecommendRequest {
  int32 TowerConfigId = 7;
}

// MessageId: 25672 (Response)
message TowerFormationRecommendResponse {
  ErrorCode ErrorCode = 4;
  bool NeedUpdateSeason = 9;
  int32 TowerConfigId = 15;
  repeated TowerRecommendFormation Formations = 14;
}

// MessageId: 21477 (Request)
message TowerRewardRequest {
  int32 Difficulty = 11;
  int32 RewardIndex = 2;
  repeated int32 Hnc2 = 14;
}

// MessageId: 20722 (Response)
message TowerRewardResponse {
  ErrorCode ErrorCode = 3;
  bool NeedUpdateSeason = 6;
  repeated int32 Hnc2 = 7;
}

// MessageId: 19202 (Request)
message TowerStartRequest {
  int32 TowerConfigId = 1;
  repeated TowerRolePb Formation = 9;
}

// MessageId: 28525 (Response)
message TowerStartResponse {
  ErrorCode ErrorCode = 4;
  bool NeedUpdateSeason = 14;
}

// MessageId: 25470 (Request)
message TowerResetRequest {
  int32 TowerConfigId = 10;
}

// MessageId: 16185 (Response)
message TowerResetResponse {
  ErrorCode ErrorCode = 11;
  int32 TowerConfigId = 8;
  bool NeedUpdateSeason = 9;
}

// MessageId: 25844 (Request)
message TowerApplyFloorDataRequest {
  bool Apply = 11;
}

// MessageId: 21905 (Response)
message TowerApplyFloorDataResponse {
  ErrorCode ErrorCode = 10;
  bool NeedUpdateSeason = 14;
}

// MessageId: 27074 (Notify)
message TowerEndNotify {
  bool NeedUpdateSeason = 8;
  TowerFloorPb CurrentFloorData = 13;
  bool Success = 7;
}

// MessageId: 18639 (Notify)
message TowerFloorUpdateNotify {
  repeated TowerFloorPb TowerFloors = 4;
}

// MessageId: 23009 (Notify)
message TowerDifficultyUpdateNotify {
  repeated TowerDifficultyPb TowerDifficulties = 3;
}

// MessageId: 24326 (Notify)
message TowerInfoUpdateNotify {
  TowerInfo TowerInfo = 5;
}

// MessageId: 27358 (Request)
message TowerGuideActivityRewardRequest {
  int32 TowerGuideId = 7;
}

// MessageId: 23915 (Response)
message TowerGuideActivityRewardResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 20824 (Request)
message TowerGuideActivityInfoRequest {
}

// MessageId: 19467 (Response)
message TowerGuideActivityInfoResponse {
  repeated int32 TowerGuideId = 9;
}

message DOLLARGs {
  int32 Level = 1;
  KGs2 BGs = 2;
}

message eDOLLARs {
  int32 Id = 1;
  int32 Num = 2;
}

enum iOs2 {
  iOs_TrackMoonEntrust = 0;
  iOs_TrackMoonRole = 1;
  iOs_TrackMoonBuild = 2;
}

enum H8s {
  H8s_TrackMoonTargetRunning = 0;
  H8s_TrackMoonTargetFinish = 1;
  H8s_TrackMoonTargetTaken = 2;
}

message j8s {
  int32 Id = 1;
  int32 Current = 2;
  int32 Target = 3;
  int32 Status = 4;
}

enum As_2 {
  As__Bad = 0;
  As__Normal = 1;
  As__qGs = 2;
}

message W8s {
  int32 RoleId = 1;
  int32 Result = 2;
}

message KGs2 {
  int32 RoleId = 1;
  int32 GGs = 2;
  int32 OGs1 = 3;
  int32 kGs1 = 4;
  int32 Level = 5;
}

message HGs {
  int32 BuildingId = 1;
  int32 Level = 2;
  bool IsUnlock = 3;
}

message VGs {
  int32 DelegationId = 1;
  bool NGs = 2;
  int32 FGs = 3;
}

message rOs1 {
  oneof Data {
    VGs VGs = 1;
    DOLLARGs DOLLARGs = 2;
    HGs HGs = 3;
  }
}

// MessageId: 24468 (Request)
message MoonChasingRoleTrainRequest {
  int32 RoleId = 2;
  int32 TrainType = 14;
}

// MessageId: 25638 (Response)
message MoonChasingRoleTrainResponse {
  ErrorCode ErrorCode = 1;
  bool IsMoreSuccessful = 4;
}

// MessageId: 15761 (Request)
message MoonChasingAcceptDelegateRequest {
  int32 DelegationId = 13;
  repeated int32 RoleIds = 10;
}

// MessageId: 27718 (Response)
message MoonChasingAcceptDelegateResponse {
  bool IsTriggerEvent = 13;
  int32 EvaluateLevel = 9;
  repeated KGs2 KGs = 6;
  repeated W8s QGs = 7;
  int32 Gold = 11;
  int32 Wish = 5;
  int32 JGs = 1;
  int32 TriggerEventRoleId = 8;
  VGs DelegationData = 3;
  ErrorCode ErrorCode = 4;
}

// MessageId: 17092 (Request)
message MoonChasingInvestRequest {
  int32 DelegationId = 1;
  int32 Amount = 3;
}

// MessageId: 16231 (Response)
message MoonChasingInvestResponse {
  ErrorCode ErrorCode = 7;
  int32 Gold = 15;
  bool Success = 9;
  int32 EvaluateLevel = 5;
  repeated KGs2 KGs = 12;
  int32 JGs = 6;
  int32 Yo_ = 10;
}

// MessageId: 15606 (Request)
message MoonChasingAllDelegationDataRequest {
}

// MessageId: 25572 (Response)
message MoonChasingAllDelegationDataResponse {
  repeated VGs DelegationData = 1;
}

// MessageId: 22961 (Request)
message MoonChasingAllEditTeamDataRequest {
}

// MessageId: 15181 (Response)
message MoonChasingAllEditTeamDataResponse {
  repeated DOLLARGs eOs = 8;
}

// MessageId: 18493 (Request)
message MoonChasingAllBuildingDataRequest {
}

// MessageId: 28304 (Response)
message MoonChasingAllBuildingDataResponse {
  repeated HGs tOs = 13;
}

// MessageId: 25080 (Request)
message MoonChasingBuildingLevelUpRequest {
  int32 BuildingId = 14;
}

// MessageId: 20217 (Response)
message MoonChasingBuildingLevelUpResponse {
  ErrorCode ErrorCode = 11;
  HGs HGs = 9;
  int32 CurrentPopularity = 6;
}

// MessageId: 25657 (Request)
message MoonChasingBuildingUnLockRequest {
  int32 BuildingId = 9;
}

// MessageId: 22882 (Response)
message MoonChasingBuildingUnLockResponse {
  ErrorCode ErrorCode = 8;
  int32 CurrentPopularity = 9;
}

// MessageId: 21893 (Notify)
message Sfs {
  int32 iOs2 = 2;
  rOs1 rOs = 11;
}

// MessageId: 25106 (Request)
message MoonChasingTrackMoonTargetRewardRequest {
  int32 Id = 15;
}

// MessageId: 25841 (Response)
message MoonChasingTrackMoonTargetRewardResponse {
  ErrorCode ErrorCode = 3;
}

// MessageId: 21952 (Notify)
message MoonChasingAllRewardTargetData {
  repeated j8s oOs = 11;
}

// MessageId: 29419 (Request)
message MoonChasingTrackMoonMemoryInfoRequest {
}

// MessageId: 17082 (Response)
message MoonChasingTrackMoonMemoryInfoResponse {
  ErrorCode ErrorCode = 11;
  int32 j7s2 = 9;
  int32 W7s = 13;
  int32 Q7s = 3;
  int32 K7s = 5;
  eDOLLARs X7s = 4;
  eDOLLARs Y7s = 7;
  eDOLLARs J7s = 8;
}

// MessageId: 15257 (Request)
message MoonChasingTrackMoonHandbookRewardRequest {
  repeated int32 Ids = 11;
}

// MessageId: 19413 (Response)
message MoonChasingTrackMoonHandbookRewardResponse {
  repeated int32 Ids = 10;
}

// MessageId: 25095 (Notify)
message MoonChasingTrackMoonHandbookRewardNotify {
  repeated int32 Ids = 14;
}

// MessageId: 18292 (Notify)
message MoonChasingEditTeamDataNotify {
  repeated DOLLARGs RobotRoleInfo = 5;
}

// MessageId: 19071 (Request)
message MoonChasingBuildingBuildFlowRequest {
  int32 BuildingId = 1;
}

// MessageId: 24141 (Response)
message MoonChasingBuildingBuildFlowResponse {
  ErrorCode ErrorCode = 10;
}

// MessageId: 19774 (Notify)
message MoonChasingTargetGetCountNotify {
  int32 TargetGetCount = 13;
}

// MessageId: 29269 (Request)
message MoonChasingTrackMoonActivityTargetRewardRequest {
  int32 Id = 8;
  int32 ActivityId = 14;
}

// MessageId: 19486 (Response)
message MoonChasingTrackMoonActivityTargetRewardResponse {
  ErrorCode ErrorCode = 12;
}

// MessageId: 15902 (Request)
message TurntableCompleteRequest {
  int64 EntityId = 15;
}

// MessageId: 17544 (Response)
message TurntableCompleteResponse {
  ErrorCode ErrorCode = 1;
  int64 EntityId = 8;
}

message TutorialInfo {
  int32 Id = 1;
  uint32 CreateTime = 2;
  bool GetAward = 3;
}

// MessageId: 20738 (Request)
message TutorialInfoRequest {
}

// MessageId: 22608 (Response)
message TutorialInfoResponse {
  repeated TutorialInfo UnlockList = 13;
}

// MessageId: 27351 (Notify)
message TutorialUnlockNotify {
  repeated TutorialInfo UnlockList = 2;
}

// MessageId: 18851 (Request)
message TutorialReceiveRequest {
  int32 Id = 3;
}

// MessageId: 28027 (Response)
message TutorialReceiveResponse {
  ErrorCode ErrorCode = 2;
  repeated string ErrorParams = 14;
  map<int32, int32> ItemMap = 12;
}

// MessageId: 25338 (Request)
message TutorialUnlockRequest {
  int32 Id = 9;
}

// MessageId: 25546 (Response)
message TutorialUnlockResponse {
  ErrorCode ErrorCode = 10;
  repeated string ErrorParams = 7;
  TutorialInfo UnLockInfo = 1;
}

message OneWeaponItemInfo {
  int32 IncId = 1;
  int32 WeaponLevel = 2;
  int32 WeaponExp = 3;
  int32 WeaponBreach = 4;
  int32 WeaponResonLevel = 5;
  int32 RoleId = 6;
}

message WeaponConsumeItem {
  int32 IncId = 1;
  int32 Count = 2;
  int32 ItemId = 3;
}

// MessageId: 22453 (Request)
message WeaponLevelUpRequest {
  int32 IncId = 11;
  repeated WeaponConsumeItem ConsumeList = 15;
}

// MessageId: 15461 (Response)
message WeaponLevelUpResponse {
  ErrorCode ErrorCode = 15;
  int32 IncId = 8;
  int32 WeaponLevel = 7;
  int32 WeaponExp = 9;
  map<int32, int32> ItemMap = 4;
}

// MessageId: 22247 (Request)
message WeaponBreachRequest {
  int32 IncId = 14;
}

// MessageId: 25382 (Response)
message WeaponBreachResponse {
  ErrorCode ErrorCode = 2;
  int32 IncId = 10;
  int32 WeaponBreach = 8;
}

// MessageId: 15131 (Request)
message WeaponResonUpRequest {
  int32 IncId = 13;
  repeated int32 ConsumeList = 15;
  repeated WeaponConsumeItem ConsumeItemList = 5;
}

// MessageId: 29805 (Response)
message WeaponResonUpResponse {
  ErrorCode ErrorCode = 4;
  int32 IncId = 14;
  int32 ResonLevel = 8;
}

// MessageId: 19943 (Notify)
message WeaponAllInfoNotify {
  repeated OneWeaponItemInfo AllWeapon = 13;
}

// MessageId: 18831 (Notify)
message WeaponAddNotify {
  OneWeaponItemInfo WeaponInfo = 11;
}

// MessageId: 17457 (Notify)
message WeaponRemoveNotify {
  int32 IncId = 9;
}

// MessageId: 23999 (Request)
message WorldLevelDownRequest {
}

// MessageId: 16017 (Response)
message WorldLevelDownResponse {
  ErrorCode ErrorCode = 5;
  int32 OriginWorldLevel = 2;
  int32 CurWorldLevel = 8;
  int32 WorldLevelTimeStamp = 6;
}

// MessageId: 20990 (Request)
message WorldLevelRegainRequest {
}

// MessageId: 17562 (Response)
message WorldLevelRegainResponse {
  ErrorCode ErrorCode = 10;
  int32 OriginWorldLevel = 15;
  int32 CurWorldLevel = 6;
  int32 WorldLevelTimeStamp = 8;
}

// MessageId: 22176 (Request)
message OnlinePlayersAreaAsyncRequest {
}

// MessageId: 27188 (Response)
message OnlinePlayersAreaAsyncResponse {
  ErrorCode ErrorCode = 6;
  map<int32, int32> Zo_ = 12;
}

enum WorldEnterPermission {
  WorldEnterPermission_ConfirmJoin = 0;
  WorldEnterPermission_DirectJoin = 1;
  WorldEnterPermission_ForbidJoin = 2;
  WorldEnterPermission_OnlyFriendJoin = 3;
}

enum WorldEnterWay {
  WorldEnterWay_LobbyJoin = 0;
  WorldEnterWay_QueryJoin = 1;
}

enum AgreeJoinWay {
  AgreeJoinWay_ClientActive = 0;
  AgreeJoinWay_ClientTimeOut = 1;
}

// MessageId: 18410 (Request)
message WorldEnterPermissionsRequest {
  int32 Type = 9;
}

// MessageId: 26076 (Response)
message WorldEnterPermissionsResponse {
  ErrorCode ErrorCode = 10;
  int32 Type = 1;
}

// MessageId: 28439 (Request)
message ApplyJoinWorldRequest {
  int32 PlayerId = 2;
  int32 Ways = 13;
}

// MessageId: 21813 (Response)
message ApplyJoinWorldResponse {
  ErrorCode ErrorCode = 2;
  repeated string ErrorParams = 15;
}

// MessageId: 28070 (Notify)
message ApplyJoinWorldNotify {
  int32 PlayerId = 2;
  int64 RefuseTimestamp = 9;
  string PlayerName = 6;
  int32 HeadId = 1;
  int32 Level = 13;
  string SdkUserId = 3;
  string SdkOnlineId = 10;
  string SdkAccountId = 14;
}

// MessageId: 26710 (Request)
message AgreeJoinResultRequest {
  int32 PlayerId = 2;
  bool Result = 11;
  int32 Way = 5;
}

// MessageId: 26409 (Response)
message AgreeJoinResultResponse {
  ErrorCode ErrorCode = 14;
  string PlayerName = 12;
}

// MessageId: 21521 (Notify)
message AgreeJoinResultNotify {
  ErrorCode ErrorCode = 13;
  string PlayerName = 8;
}

// MessageId: 21404 (Notify)
message ApplyerEnterSceneNotify {
  ErrorCode ErrorCode = 8;
  int32 PlayerId = 2;
}

// MessageId: 24433 (Notify)
message AllApplyJoinNotify {
  repeated ApplyJoinWorldNotify ApplyList = 5;
}

// MessageId: 22136 (Request)
message LobbyListRequest {
  bool IsFriend = 4;
}

// MessageId: 21123 (Response)
message LobbyListResponse {
  ErrorCode ErrorCode = 1;
  repeated PlayerDetails ItemList = 7;
}

// MessageId: 18514 (Request)
message LobbyQueryPlayersRequest {
  int32 PlayerId = 14;
}

// MessageId: 24275 (Response)
message LobbyQueryPlayersResponse {
  ErrorCode ErrorCode = 8;
  PlayerDetails Item = 15;
}

enum WY_2 {
  WY__WorldTeam = 0;
  WY__MatchTeam = 1;
}

// MessageId: 29520 (Notify)
message DOLLARY_ {
  WY_2 WY_ = 13;
  int32 PlayerId = 6;
}

message WorldTeamPlayerInfo {
  int32 PlayerId = 1;
  string PlayerName = 2;
  int32 HeadId = 3;
  int32 Level = 4;
  string Signature = 5;
  WorldTeamPlayerFightInfo FightInfo = 6;
  int32 PingState = 7;
  PlayerDetails Item = 8;
  int32 PlayerTitleId = 9;
  int32 CurPlayerTitleId = 10;
  int32 Sex = 11;
}

enum WorldTeamLeaveReason {
  WorldTeamLeaveReason_Initiative = 0;
  WorldTeamLeaveReason_BeKick = 1;
  WorldTeamLeaveReason_Dissolve = 2;
  WorldTeamLeaveReason_Logout = 3;
  WorldTeamLeaveReason_ToOwnBigWorld = 4;
  WorldTeamLeaveReason_PSNAccountLogin = 5;
  WorldTeamLeaveReason_CheckClientVersionFailed = 6;
}

enum i7s {
  i7s_H8n = 0;
  i7s_Head = 1;
  i7s_F6n = 2;
  i7s_zVn = 3;
  i7s_PlayerTitle = 4;
  i7s_Sex = 5;
}

enum ENetPingState {
  ENetPingState_UNKNOWN = 0;
  ENetPingState_GREAT = 1;
  ENetPingState_GOOD = 2;
  ENetPingState_POOR = 3;
  ENetPingState_MAX = 4;
}

enum EPlayerTeleportState {
  EPlayerTeleportState_Default = 0;
  EPlayerTeleportState_Teleporting = 1;
  EPlayerTeleportState_TeleportTimeOut = 2;
}

// MessageId: 19345 (Notify)
message WorldTeamPlayerInfoChangeNotify {
  int32 PlayerId = 15;
  int32 ChangeType = 4;
  int32 IntValue = 13;
  string StringValue = 5;
}

// MessageId: 16958 (Notify)
message JoinWorldTeamNotify {
  int32 OwnerId = 8;
  repeated WorldTeamPlayerInfo PlayerInfos = 3;
}

// MessageId: 15336 (Notify)
message PlayerLeaveWorldTeamNotify {
  int32 PlayerId = 11;
  int32 Reason = 13;
}

// MessageId: 29566 (Notify)
message PlayerEnterWorldTeamNotify {
  WorldTeamPlayerInfo PlayerInfo = 11;
}

// MessageId: 29287 (Request)
message LeaveWorldTeamRequest {
  oneof QY {
    int32 Reason = 10;
  }
  int32 PlayerId = 14;
}

// MessageId: 28715 (Response)
message LeaveWorldTeamResponse {
  ErrorCode ErrorCode = 9;
}

// MessageId: 25450 (Request)
message KickWorldTeamRequest {
  int32 PlayerId = 3;
}

// MessageId: 15647 (Response)
message KickWorldTeamResponse {
  ErrorCode ErrorCode = 8;
}

// MessageId: 22819 (Push)
message RobotDestinationPush {
  Vector Location = 14;
}

// MessageId: 18626 (Notify)
message RobotDestinationNotify {
  Vector Location = 14;
}

message WorldTeamRoleInfo {
  int32 RoleId = 1;
  int32 RoleLevel = 2;
  int32 RoleSkinId = 3;
}

message WorldTeamPlayerFightInfo {
  int32 CurRoleId = 2;
  repeated WorldTeamRoleInfo RoleInfos = 3;
}

// MessageId: 22380 (Notify)
message UpdateWorldTeamPlayerFightInfoNotify {
  int32 PlayerId = 10;
  WorldTeamPlayerFightInfo FightInfo = 4;
}

// MessageId: 16622 (Push)
message PlayerNetStatePush {
  int32 W7n = 12;
}

// MessageId: 21322 (Notify)
message PlayerNetStateNotify {
  int32 PlayerId = 3;
  int32 PingState = 4;
}

// MessageId: 19449 (Notify)
message PlayerTeleportStateNotify {
  int32 PlayerId = 15;
  EPlayerTeleportState TeleportState = 9;
  EntitySimplyMoveInfo CurRolePosInfo = 3;
}

